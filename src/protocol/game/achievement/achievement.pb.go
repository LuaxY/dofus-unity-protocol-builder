// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: proto/game/achievement.proto

package achievement

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AchievementDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId int32 `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
}

func (x *AchievementDetailsRequest) Reset() {
	*x = AchievementDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementDetailsRequest) ProtoMessage() {}

func (x *AchievementDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementDetailsRequest.ProtoReflect.Descriptor instead.
func (*AchievementDetailsRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{0}
}

func (x *AchievementDetailsRequest) GetAchievementId() int32 {
	if x != nil {
		return x.AchievementId
	}
	return 0
}

type AchievementsDetailedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int32 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *AchievementsDetailedRequest) Reset() {
	*x = AchievementsDetailedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsDetailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsDetailedRequest) ProtoMessage() {}

func (x *AchievementsDetailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsDetailedRequest.ProtoReflect.Descriptor instead.
func (*AchievementsDetailedRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{1}
}

func (x *AchievementsDetailedRequest) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type AchievementsAlmostFinishedDetailedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AchievementsAlmostFinishedDetailedRequest) Reset() {
	*x = AchievementsAlmostFinishedDetailedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsAlmostFinishedDetailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsAlmostFinishedDetailedRequest) ProtoMessage() {}

func (x *AchievementsAlmostFinishedDetailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsAlmostFinishedDetailedRequest.ProtoReflect.Descriptor instead.
func (*AchievementsAlmostFinishedDetailedRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{2}
}

type AchievementRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId int32 `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
}

func (x *AchievementRewardRequest) Reset() {
	*x = AchievementRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementRewardRequest) ProtoMessage() {}

func (x *AchievementRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementRewardRequest.ProtoReflect.Descriptor instead.
func (*AchievementRewardRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{3}
}

func (x *AchievementRewardRequest) GetAchievementId() int32 {
	if x != nil {
		return x.AchievementId
	}
	return 0
}

type AchievementsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievedAchievements []*AchievedAchievement `protobuf:"bytes,1,rep,name=achieved_achievements,json=achievedAchievements,proto3" json:"achieved_achievements,omitempty"`
}

func (x *AchievementsEvent) Reset() {
	*x = AchievementsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsEvent) ProtoMessage() {}

func (x *AchievementsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsEvent.ProtoReflect.Descriptor instead.
func (*AchievementsEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{4}
}

func (x *AchievementsEvent) GetAchievedAchievements() []*AchievedAchievement {
	if x != nil {
		return x.AchievedAchievements
	}
	return nil
}

type AchievementDetailsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Achievement *Achievement `protobuf:"bytes,1,opt,name=achievement,proto3" json:"achievement,omitempty"`
}

func (x *AchievementDetailsEvent) Reset() {
	*x = AchievementDetailsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementDetailsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementDetailsEvent) ProtoMessage() {}

func (x *AchievementDetailsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementDetailsEvent.ProtoReflect.Descriptor instead.
func (*AchievementDetailsEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{5}
}

func (x *AchievementDetailsEvent) GetAchievement() *Achievement {
	if x != nil {
		return x.Achievement
	}
	return nil
}

type AchievementsDetailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Achievements []*Achievement `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty"`
}

func (x *AchievementsDetailedEvent) Reset() {
	*x = AchievementsDetailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsDetailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsDetailedEvent) ProtoMessage() {}

func (x *AchievementsDetailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsDetailedEvent.ProtoReflect.Descriptor instead.
func (*AchievementsDetailedEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{6}
}

func (x *AchievementsDetailedEvent) GetAchievements() []*Achievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

type AchievementsAlmostFinishedDetailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlmostFinishedAchievements []*Achievement `protobuf:"bytes,1,rep,name=almost_finished_achievements,json=almostFinishedAchievements,proto3" json:"almost_finished_achievements,omitempty"`
}

func (x *AchievementsAlmostFinishedDetailedEvent) Reset() {
	*x = AchievementsAlmostFinishedDetailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsAlmostFinishedDetailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsAlmostFinishedDetailedEvent) ProtoMessage() {}

func (x *AchievementsAlmostFinishedDetailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsAlmostFinishedDetailedEvent.ProtoReflect.Descriptor instead.
func (*AchievementsAlmostFinishedDetailedEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{7}
}

func (x *AchievementsAlmostFinishedDetailedEvent) GetAlmostFinishedAchievements() []*Achievement {
	if x != nil {
		return x.AlmostFinishedAchievements
	}
	return nil
}

type AchievementFinishedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Achievement *AchievedAchievement `protobuf:"bytes,1,opt,name=achievement,proto3" json:"achievement,omitempty"`
}

func (x *AchievementFinishedEvent) Reset() {
	*x = AchievementFinishedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementFinishedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementFinishedEvent) ProtoMessage() {}

func (x *AchievementFinishedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementFinishedEvent.ProtoReflect.Descriptor instead.
func (*AchievementFinishedEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{8}
}

func (x *AchievementFinishedEvent) GetAchievement() *AchievedAchievement {
	if x != nil {
		return x.Achievement
	}
	return nil
}

type AchievementFinishedInformationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Achievement *AchievedAchievement `protobuf:"bytes,1,opt,name=achievement,proto3" json:"achievement,omitempty"`
	PlayerName  string               `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	PlayerId    int64                `protobuf:"varint,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *AchievementFinishedInformationEvent) Reset() {
	*x = AchievementFinishedInformationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementFinishedInformationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementFinishedInformationEvent) ProtoMessage() {}

func (x *AchievementFinishedInformationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementFinishedInformationEvent.ProtoReflect.Descriptor instead.
func (*AchievementFinishedInformationEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{9}
}

func (x *AchievementFinishedInformationEvent) GetAchievement() *AchievedAchievement {
	if x != nil {
		return x.Achievement
	}
	return nil
}

func (x *AchievementFinishedInformationEvent) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *AchievementFinishedInformationEvent) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

type AchievementRewardResultEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId int32 `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	Success       bool  `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AchievementRewardResultEvent) Reset() {
	*x = AchievementRewardResultEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementRewardResultEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementRewardResultEvent) ProtoMessage() {}

func (x *AchievementRewardResultEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementRewardResultEvent.ProtoReflect.Descriptor instead.
func (*AchievementRewardResultEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{10}
}

func (x *AchievementRewardResultEvent) GetAchievementId() int32 {
	if x != nil {
		return x.AchievementId
	}
	return 0
}

func (x *AchievementRewardResultEvent) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AchievementsPioneerRanksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AchievementsPioneerRanksRequest) Reset() {
	*x = AchievementsPioneerRanksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsPioneerRanksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsPioneerRanksRequest) ProtoMessage() {}

func (x *AchievementsPioneerRanksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsPioneerRanksRequest.ProtoReflect.Descriptor instead.
func (*AchievementsPioneerRanksRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{11}
}

type AchievementsPioneerRanksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementsPioneerRanks []*AchievementsPioneerRanksResponse_AchievementPioneerRank `protobuf:"bytes,1,rep,name=achievements_pioneer_ranks,json=achievementsPioneerRanks,proto3" json:"achievements_pioneer_ranks,omitempty"`
}

func (x *AchievementsPioneerRanksResponse) Reset() {
	*x = AchievementsPioneerRanksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsPioneerRanksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsPioneerRanksResponse) ProtoMessage() {}

func (x *AchievementsPioneerRanksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsPioneerRanksResponse.ProtoReflect.Descriptor instead.
func (*AchievementsPioneerRanksResponse) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{12}
}

func (x *AchievementsPioneerRanksResponse) GetAchievementsPioneerRanks() []*AchievementsPioneerRanksResponse_AchievementPioneerRank {
	if x != nil {
		return x.AchievementsPioneerRanks
	}
	return nil
}

type Achievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId         int32                               `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	AchievementObjectives []*Achievement_AchievementObjective `protobuf:"bytes,2,rep,name=achievement_objectives,json=achievementObjectives,proto3" json:"achievement_objectives,omitempty"`
}

func (x *Achievement) Reset() {
	*x = Achievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Achievement) ProtoMessage() {}

func (x *Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Achievement.ProtoReflect.Descriptor instead.
func (*Achievement) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{13}
}

func (x *Achievement) GetAchievementId() int32 {
	if x != nil {
		return x.AchievementId
	}
	return 0
}

func (x *Achievement) GetAchievementObjectives() []*Achievement_AchievementObjective {
	if x != nil {
		return x.AchievementObjectives
	}
	return nil
}

type AchievedAchievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId int32  `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	AchievedBy    int64  `protobuf:"varint,2,opt,name=achieved_by,json=achievedBy,proto3" json:"achieved_by,omitempty"`
	PioneerRank   int32  `protobuf:"varint,4,opt,name=pioneer_rank,json=pioneerRank,proto3" json:"pioneer_rank,omitempty"`
	FinishedLevel *int32 `protobuf:"varint,3,opt,name=finished_level,json=finishedLevel,proto3,oneof" json:"finished_level,omitempty"`
}

func (x *AchievedAchievement) Reset() {
	*x = AchievedAchievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievedAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievedAchievement) ProtoMessage() {}

func (x *AchievedAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievedAchievement.ProtoReflect.Descriptor instead.
func (*AchievedAchievement) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{14}
}

func (x *AchievedAchievement) GetAchievementId() int32 {
	if x != nil {
		return x.AchievementId
	}
	return 0
}

func (x *AchievedAchievement) GetAchievedBy() int64 {
	if x != nil {
		return x.AchievedBy
	}
	return 0
}

func (x *AchievedAchievement) GetPioneerRank() int32 {
	if x != nil {
		return x.PioneerRank
	}
	return 0
}

func (x *AchievedAchievement) GetFinishedLevel() int32 {
	if x != nil && x.FinishedLevel != nil {
		return *x.FinishedLevel
	}
	return 0
}

type AchievementsPioneerRanksResponse_AchievementPioneerRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId int32 `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	PioneerRank   int32 `protobuf:"varint,2,opt,name=pioneer_rank,json=pioneerRank,proto3" json:"pioneer_rank,omitempty"`
}

func (x *AchievementsPioneerRanksResponse_AchievementPioneerRank) Reset() {
	*x = AchievementsPioneerRanksResponse_AchievementPioneerRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementsPioneerRanksResponse_AchievementPioneerRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementsPioneerRanksResponse_AchievementPioneerRank) ProtoMessage() {}

func (x *AchievementsPioneerRanksResponse_AchievementPioneerRank) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementsPioneerRanksResponse_AchievementPioneerRank.ProtoReflect.Descriptor instead.
func (*AchievementsPioneerRanksResponse_AchievementPioneerRank) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{12, 0}
}

func (x *AchievementsPioneerRanksResponse_AchievementPioneerRank) GetAchievementId() int32 {
	if x != nil {
		return x.AchievementId
	}
	return 0
}

func (x *AchievementsPioneerRanksResponse_AchievementPioneerRank) GetPioneerRank() int32 {
	if x != nil {
		return x.PioneerRank
	}
	return 0
}

type Achievement_AchievementObjective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectiveId  int32  `protobuf:"varint,1,opt,name=objective_id,json=objectiveId,proto3" json:"objective_id,omitempty"`
	MaxValue     int64  `protobuf:"varint,2,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	CurrentValue *int64 `protobuf:"varint,3,opt,name=current_value,json=currentValue,proto3,oneof" json:"current_value,omitempty"`
}

func (x *Achievement_AchievementObjective) Reset() {
	*x = Achievement_AchievementObjective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_achievement_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Achievement_AchievementObjective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Achievement_AchievementObjective) ProtoMessage() {}

func (x *Achievement_AchievementObjective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_achievement_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Achievement_AchievementObjective.ProtoReflect.Descriptor instead.
func (*Achievement_AchievementObjective) Descriptor() ([]byte, []int) {
	return file_proto_game_achievement_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Achievement_AchievementObjective) GetObjectiveId() int32 {
	if x != nil {
		return x.ObjectiveId
	}
	return 0
}

func (x *Achievement_AchievementObjective) GetMaxValue() int64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *Achievement_AchievementObjective) GetCurrentValue() int64 {
	if x != nil && x.CurrentValue != nil {
		return *x.CurrentValue
	}
	return 0
}

var File_proto_game_achievement_proto protoreflect.FileDescriptor

var file_proto_game_achievement_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x42, 0x0a, 0x19, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x1b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x29, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x41, 0x0a, 0x18, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x15, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x14, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7b, 0x0a, 0x17, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x19, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x62, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x27, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x1c, 0x61, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a, 0x61, 0x6c, 0x6d, 0x6f, 0x73,
	0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x68, 0x0a, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xcd, 0x01, 0x0a,
	0x23, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x1c,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x21, 0x0a,
	0x1f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x69, 0x6f,
	0x6e, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xb1, 0x02, 0x0a, 0x20, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x50, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x1a, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x69, 0x6f, 0x6e, 0x65,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6f, 0x6e, 0x65,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x18, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x73,
	0x1a, 0x62, 0x0a, 0x16, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x22, 0xd6, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x16,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x15, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x1a, 0x92, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf, 0x01,
	0x0a, 0x13, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42,
	0x3f, 0x5a, 0x3d, 0x67, 0x6f, 0x2d, 0x78, 0x70, 0x2d, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x67, 0x61, 0x6d, 0x65, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_game_achievement_proto_rawDescOnce sync.Once
	file_proto_game_achievement_proto_rawDescData = file_proto_game_achievement_proto_rawDesc
)

func file_proto_game_achievement_proto_rawDescGZIP() []byte {
	file_proto_game_achievement_proto_rawDescOnce.Do(func() {
		file_proto_game_achievement_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_game_achievement_proto_rawDescData)
	})
	return file_proto_game_achievement_proto_rawDescData
}

var file_proto_game_achievement_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_game_achievement_proto_goTypes = []any{
	(*AchievementDetailsRequest)(nil),                               // 0: com.ankama.dofus.server.game.protocol.achievement.AchievementDetailsRequest
	(*AchievementsDetailedRequest)(nil),                             // 1: com.ankama.dofus.server.game.protocol.achievement.AchievementsDetailedRequest
	(*AchievementsAlmostFinishedDetailedRequest)(nil),               // 2: com.ankama.dofus.server.game.protocol.achievement.AchievementsAlmostFinishedDetailedRequest
	(*AchievementRewardRequest)(nil),                                // 3: com.ankama.dofus.server.game.protocol.achievement.AchievementRewardRequest
	(*AchievementsEvent)(nil),                                       // 4: com.ankama.dofus.server.game.protocol.achievement.AchievementsEvent
	(*AchievementDetailsEvent)(nil),                                 // 5: com.ankama.dofus.server.game.protocol.achievement.AchievementDetailsEvent
	(*AchievementsDetailedEvent)(nil),                               // 6: com.ankama.dofus.server.game.protocol.achievement.AchievementsDetailedEvent
	(*AchievementsAlmostFinishedDetailedEvent)(nil),                 // 7: com.ankama.dofus.server.game.protocol.achievement.AchievementsAlmostFinishedDetailedEvent
	(*AchievementFinishedEvent)(nil),                                // 8: com.ankama.dofus.server.game.protocol.achievement.AchievementFinishedEvent
	(*AchievementFinishedInformationEvent)(nil),                     // 9: com.ankama.dofus.server.game.protocol.achievement.AchievementFinishedInformationEvent
	(*AchievementRewardResultEvent)(nil),                            // 10: com.ankama.dofus.server.game.protocol.achievement.AchievementRewardResultEvent
	(*AchievementsPioneerRanksRequest)(nil),                         // 11: com.ankama.dofus.server.game.protocol.achievement.AchievementsPioneerRanksRequest
	(*AchievementsPioneerRanksResponse)(nil),                        // 12: com.ankama.dofus.server.game.protocol.achievement.AchievementsPioneerRanksResponse
	(*Achievement)(nil),                                             // 13: com.ankama.dofus.server.game.protocol.achievement.Achievement
	(*AchievedAchievement)(nil),                                     // 14: com.ankama.dofus.server.game.protocol.achievement.AchievedAchievement
	(*AchievementsPioneerRanksResponse_AchievementPioneerRank)(nil), // 15: com.ankama.dofus.server.game.protocol.achievement.AchievementsPioneerRanksResponse.AchievementPioneerRank
	(*Achievement_AchievementObjective)(nil),                        // 16: com.ankama.dofus.server.game.protocol.achievement.Achievement.AchievementObjective
}
var file_proto_game_achievement_proto_depIdxs = []int32{
	14, // 0: com.ankama.dofus.server.game.protocol.achievement.AchievementsEvent.achieved_achievements:type_name -> com.ankama.dofus.server.game.protocol.achievement.AchievedAchievement
	13, // 1: com.ankama.dofus.server.game.protocol.achievement.AchievementDetailsEvent.achievement:type_name -> com.ankama.dofus.server.game.protocol.achievement.Achievement
	13, // 2: com.ankama.dofus.server.game.protocol.achievement.AchievementsDetailedEvent.achievements:type_name -> com.ankama.dofus.server.game.protocol.achievement.Achievement
	13, // 3: com.ankama.dofus.server.game.protocol.achievement.AchievementsAlmostFinishedDetailedEvent.almost_finished_achievements:type_name -> com.ankama.dofus.server.game.protocol.achievement.Achievement
	14, // 4: com.ankama.dofus.server.game.protocol.achievement.AchievementFinishedEvent.achievement:type_name -> com.ankama.dofus.server.game.protocol.achievement.AchievedAchievement
	14, // 5: com.ankama.dofus.server.game.protocol.achievement.AchievementFinishedInformationEvent.achievement:type_name -> com.ankama.dofus.server.game.protocol.achievement.AchievedAchievement
	15, // 6: com.ankama.dofus.server.game.protocol.achievement.AchievementsPioneerRanksResponse.achievements_pioneer_ranks:type_name -> com.ankama.dofus.server.game.protocol.achievement.AchievementsPioneerRanksResponse.AchievementPioneerRank
	16, // 7: com.ankama.dofus.server.game.protocol.achievement.Achievement.achievement_objectives:type_name -> com.ankama.dofus.server.game.protocol.achievement.Achievement.AchievementObjective
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_game_achievement_proto_init() }
func file_proto_game_achievement_proto_init() {
	if File_proto_game_achievement_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_game_achievement_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsDetailedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsAlmostFinishedDetailedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementDetailsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsDetailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsAlmostFinishedDetailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementFinishedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementFinishedInformationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementRewardResultEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsPioneerRanksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsPioneerRanksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Achievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AchievedAchievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AchievementsPioneerRanksResponse_AchievementPioneerRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_achievement_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Achievement_AchievementObjective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_game_achievement_proto_msgTypes[14].OneofWrappers = []any{}
	file_proto_game_achievement_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_game_achievement_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_game_achievement_proto_goTypes,
		DependencyIndexes: file_proto_game_achievement_proto_depIdxs,
		MessageInfos:      file_proto_game_achievement_proto_msgTypes,
	}.Build()
	File_proto_game_achievement_proto = out.File
	file_proto_game_achievement_proto_rawDesc = nil
	file_proto_game_achievement_proto_goTypes = nil
	file_proto_game_achievement_proto_depIdxs = nil
}
