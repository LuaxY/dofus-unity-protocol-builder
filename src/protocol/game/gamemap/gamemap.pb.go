// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: proto/game/gamemap.proto

package gamemap

import (
	common "go-xp-dofus-unity-proto-builder/src/protocol/game/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MapObstacle_ObstacleState int32

const (
	MapObstacle_OBSTACLE_OPENED MapObstacle_ObstacleState = 0
	MapObstacle_OBSTACLE_CLOSED MapObstacle_ObstacleState = 1
)

// Enum value maps for MapObstacle_ObstacleState.
var (
	MapObstacle_ObstacleState_name = map[int32]string{
		0: "OBSTACLE_OPENED",
		1: "OBSTACLE_CLOSED",
	}
	MapObstacle_ObstacleState_value = map[string]int32{
		"OBSTACLE_OPENED": 0,
		"OBSTACLE_CLOSED": 1,
	}
)

func (x MapObstacle_ObstacleState) Enum() *MapObstacle_ObstacleState {
	p := new(MapObstacle_ObstacleState)
	*p = x
	return p
}

func (x MapObstacle_ObstacleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapObstacle_ObstacleState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_gamemap_proto_enumTypes[0].Descriptor()
}

func (MapObstacle_ObstacleState) Type() protoreflect.EnumType {
	return &file_proto_game_gamemap_proto_enumTypes[0]
}

func (x MapObstacle_ObstacleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapObstacle_ObstacleState.Descriptor instead.
func (MapObstacle_ObstacleState) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{29, 0}
}

type MapMovementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyCells []int32 `protobuf:"varint,1,rep,packed,name=key_cells,json=keyCells,proto3" json:"key_cells,omitempty"`
	MapId    int64   `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Cautious bool    `protobuf:"varint,3,opt,name=cautious,proto3" json:"cautious,omitempty"`
}

func (x *MapMovementRequest) Reset() {
	*x = MapMovementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMovementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMovementRequest) ProtoMessage() {}

func (x *MapMovementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMovementRequest.ProtoReflect.Descriptor instead.
func (*MapMovementRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{0}
}

func (x *MapMovementRequest) GetKeyCells() []int32 {
	if x != nil {
		return x.KeyCells
	}
	return nil
}

func (x *MapMovementRequest) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MapMovementRequest) GetCautious() bool {
	if x != nil {
		return x.Cautious
	}
	return false
}

type MapMovementCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId int32 `protobuf:"varint,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (x *MapMovementCancelRequest) Reset() {
	*x = MapMovementCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMovementCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMovementCancelRequest) ProtoMessage() {}

func (x *MapMovementCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMovementCancelRequest.ProtoReflect.Descriptor instead.
func (*MapMovementCancelRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{1}
}

func (x *MapMovementCancelRequest) GetCellId() int32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

type MapMovementConfirmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MapMovementConfirmRequest) Reset() {
	*x = MapMovementConfirmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMovementConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMovementConfirmRequest) ProtoMessage() {}

func (x *MapMovementConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMovementConfirmRequest.ProtoReflect.Descriptor instead.
func (*MapMovementConfirmRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{2}
}

type MapChangeOrientationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction common.Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=com.ankama.dofus.server.game.protocol.common.Direction" json:"direction,omitempty"`
}

func (x *MapChangeOrientationRequest) Reset() {
	*x = MapChangeOrientationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapChangeOrientationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapChangeOrientationRequest) ProtoMessage() {}

func (x *MapChangeOrientationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapChangeOrientationRequest.ProtoReflect.Descriptor instead.
func (*MapChangeOrientationRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{3}
}

func (x *MapChangeOrientationRequest) GetDirection() common.Direction {
	if x != nil {
		return x.Direction
	}
	return common.Direction(0)
}

type MapErrorNotFoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId int32 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (x *MapErrorNotFoundRequest) Reset() {
	*x = MapErrorNotFoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapErrorNotFoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapErrorNotFoundRequest) ProtoMessage() {}

func (x *MapErrorNotFoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapErrorNotFoundRequest.ProtoReflect.Descriptor instead.
func (*MapErrorNotFoundRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{4}
}

func (x *MapErrorNotFoundRequest) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

type MapChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId     int32 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	AutoPilot bool  `protobuf:"varint,2,opt,name=auto_pilot,json=autoPilot,proto3" json:"auto_pilot,omitempty"`
}

func (x *MapChangeRequest) Reset() {
	*x = MapChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapChangeRequest) ProtoMessage() {}

func (x *MapChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapChangeRequest.ProtoReflect.Descriptor instead.
func (*MapChangeRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{5}
}

func (x *MapChangeRequest) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MapChangeRequest) GetAutoPilot() bool {
	if x != nil {
		return x.AutoPilot
	}
	return false
}

type MapRunningFightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MapRunningFightsRequest) Reset() {
	*x = MapRunningFightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRunningFightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRunningFightsRequest) ProtoMessage() {}

func (x *MapRunningFightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRunningFightsRequest.ProtoReflect.Descriptor instead.
func (*MapRunningFightsRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{6}
}

type MapRunningFightStopListeningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MapRunningFightStopListeningRequest) Reset() {
	*x = MapRunningFightStopListeningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRunningFightStopListeningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRunningFightStopListeningRequest) ProtoMessage() {}

func (x *MapRunningFightStopListeningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRunningFightStopListeningRequest.ProtoReflect.Descriptor instead.
func (*MapRunningFightStopListeningRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{7}
}

type MapRunningFightDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId int32 `protobuf:"varint,1,opt,name=fight_id,json=fightId,proto3" json:"fight_id,omitempty"`
}

func (x *MapRunningFightDetailsRequest) Reset() {
	*x = MapRunningFightDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRunningFightDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRunningFightDetailsRequest) ProtoMessage() {}

func (x *MapRunningFightDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRunningFightDetailsRequest.ProtoReflect.Descriptor instead.
func (*MapRunningFightDetailsRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{8}
}

func (x *MapRunningFightDetailsRequest) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

type MapInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId int32 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (x *MapInformationRequest) Reset() {
	*x = MapInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInformationRequest) ProtoMessage() {}

func (x *MapInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInformationRequest.ProtoReflect.Descriptor instead.
func (*MapInformationRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{9}
}

func (x *MapInformationRequest) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

type MapMovementRefusedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellX int32 `protobuf:"varint,1,opt,name=cell_x,json=cellX,proto3" json:"cell_x,omitempty"`
	CellY int32 `protobuf:"varint,2,opt,name=cell_y,json=cellY,proto3" json:"cell_y,omitempty"`
}

func (x *MapMovementRefusedEvent) Reset() {
	*x = MapMovementRefusedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMovementRefusedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMovementRefusedEvent) ProtoMessage() {}

func (x *MapMovementRefusedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMovementRefusedEvent.ProtoReflect.Descriptor instead.
func (*MapMovementRefusedEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{10}
}

func (x *MapMovementRefusedEvent) GetCellX() int32 {
	if x != nil {
		return x.CellX
	}
	return 0
}

func (x *MapMovementRefusedEvent) GetCellY() int32 {
	if x != nil {
		return x.CellY
	}
	return 0
}

type MapMovementEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells       []int32 `protobuf:"varint,1,rep,packed,name=cells,proto3" json:"cells,omitempty"`
	CharacterId int64   `protobuf:"varint,3,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	Cautious    bool    `protobuf:"varint,4,opt,name=cautious,proto3" json:"cautious,omitempty"`
	Direction   *int32  `protobuf:"varint,2,opt,name=direction,proto3,oneof" json:"direction,omitempty"`
}

func (x *MapMovementEvent) Reset() {
	*x = MapMovementEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMovementEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMovementEvent) ProtoMessage() {}

func (x *MapMovementEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMovementEvent.ProtoReflect.Descriptor instead.
func (*MapMovementEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{11}
}

func (x *MapMovementEvent) GetCells() []int32 {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *MapMovementEvent) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *MapMovementEvent) GetCautious() bool {
	if x != nil {
		return x.Cautious
	}
	return false
}

func (x *MapMovementEvent) GetDirection() int32 {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return 0
}

type MapChangeOrientationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId   int64            `protobuf:"varint,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	Direction common.Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=com.ankama.dofus.server.game.protocol.common.Direction" json:"direction,omitempty"`
}

func (x *MapChangeOrientationEvent) Reset() {
	*x = MapChangeOrientationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapChangeOrientationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapChangeOrientationEvent) ProtoMessage() {}

func (x *MapChangeOrientationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapChangeOrientationEvent.ProtoReflect.Descriptor instead.
func (*MapChangeOrientationEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{12}
}

func (x *MapChangeOrientationEvent) GetActorId() int64 {
	if x != nil {
		return x.ActorId
	}
	return 0
}

func (x *MapChangeOrientationEvent) GetDirection() common.Direction {
	if x != nil {
		return x.Direction
	}
	return common.Direction(0)
}

type MapCurrentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (x *MapCurrentEvent) Reset() {
	*x = MapCurrentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapCurrentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapCurrentEvent) ProtoMessage() {}

func (x *MapCurrentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapCurrentEvent.ProtoReflect.Descriptor instead.
func (*MapCurrentEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{13}
}

func (x *MapCurrentEvent) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

type MapCurrentInstanceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId            int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	InstantiateMapId int64 `protobuf:"varint,2,opt,name=instantiate_map_id,json=instantiateMapId,proto3" json:"instantiate_map_id,omitempty"`
}

func (x *MapCurrentInstanceEvent) Reset() {
	*x = MapCurrentInstanceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapCurrentInstanceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapCurrentInstanceEvent) ProtoMessage() {}

func (x *MapCurrentInstanceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapCurrentInstanceEvent.ProtoReflect.Descriptor instead.
func (*MapCurrentInstanceEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{14}
}

func (x *MapCurrentInstanceEvent) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MapCurrentInstanceEvent) GetInstantiateMapId() int64 {
	if x != nil {
		return x.InstantiateMapId
	}
	return 0
}

type MapTeleportOnSameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId int64 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	CellId   int32 `protobuf:"varint,2,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (x *MapTeleportOnSameEvent) Reset() {
	*x = MapTeleportOnSameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTeleportOnSameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTeleportOnSameEvent) ProtoMessage() {}

func (x *MapTeleportOnSameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTeleportOnSameEvent.ProtoReflect.Descriptor instead.
func (*MapTeleportOnSameEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{15}
}

func (x *MapTeleportOnSameEvent) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *MapTeleportOnSameEvent) GetCellId() int32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

type MapFightCountEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightCount int32 `protobuf:"varint,1,opt,name=fight_count,json=fightCount,proto3" json:"fight_count,omitempty"`
}

func (x *MapFightCountEvent) Reset() {
	*x = MapFightCountEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapFightCountEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapFightCountEvent) ProtoMessage() {}

func (x *MapFightCountEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapFightCountEvent.ProtoReflect.Descriptor instead.
func (*MapFightCountEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{16}
}

func (x *MapFightCountEvent) GetFightCount() int32 {
	if x != nil {
		return x.FightCount
	}
	return 0
}

type MapRunningFightsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fights []*common.FightExternalInformation `protobuf:"bytes,1,rep,name=fights,proto3" json:"fights,omitempty"`
}

func (x *MapRunningFightsEvent) Reset() {
	*x = MapRunningFightsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRunningFightsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRunningFightsEvent) ProtoMessage() {}

func (x *MapRunningFightsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRunningFightsEvent.ProtoReflect.Descriptor instead.
func (*MapRunningFightsEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{17}
}

func (x *MapRunningFightsEvent) GetFights() []*common.FightExternalInformation {
	if x != nil {
		return x.Fights
	}
	return nil
}

type MapRunningFightDetailsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId   int32                             `protobuf:"varint,1,opt,name=fight_id,json=fightId,proto3" json:"fight_id,omitempty"`
	Attackers []*common.FighterLightInformation `protobuf:"bytes,2,rep,name=attackers,proto3" json:"attackers,omitempty"`
	Defenders []*common.FighterLightInformation `protobuf:"bytes,3,rep,name=defenders,proto3" json:"defenders,omitempty"`
}

func (x *MapRunningFightDetailsEvent) Reset() {
	*x = MapRunningFightDetailsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRunningFightDetailsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRunningFightDetailsEvent) ProtoMessage() {}

func (x *MapRunningFightDetailsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRunningFightDetailsEvent.ProtoReflect.Descriptor instead.
func (*MapRunningFightDetailsEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{18}
}

func (x *MapRunningFightDetailsEvent) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *MapRunningFightDetailsEvent) GetAttackers() []*common.FighterLightInformation {
	if x != nil {
		return x.Attackers
	}
	return nil
}

func (x *MapRunningFightDetailsEvent) GetDefenders() []*common.FighterLightInformation {
	if x != nil {
		return x.Defenders
	}
	return nil
}

type MapRunningFightDetailsExtendedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId         int32                             `protobuf:"varint,1,opt,name=fight_id,json=fightId,proto3" json:"fight_id,omitempty"`
	Attackers       []*common.FighterLightInformation `protobuf:"bytes,2,rep,name=attackers,proto3" json:"attackers,omitempty"`
	Defenders       []*common.FighterLightInformation `protobuf:"bytes,3,rep,name=defenders,proto3" json:"defenders,omitempty"`
	NamedPartyTeams []*common.NamedPartyTeam          `protobuf:"bytes,4,rep,name=named_party_teams,json=namedPartyTeams,proto3" json:"named_party_teams,omitempty"`
}

func (x *MapRunningFightDetailsExtendedEvent) Reset() {
	*x = MapRunningFightDetailsExtendedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRunningFightDetailsExtendedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRunningFightDetailsExtendedEvent) ProtoMessage() {}

func (x *MapRunningFightDetailsExtendedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRunningFightDetailsExtendedEvent.ProtoReflect.Descriptor instead.
func (*MapRunningFightDetailsExtendedEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{19}
}

func (x *MapRunningFightDetailsExtendedEvent) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *MapRunningFightDetailsExtendedEvent) GetAttackers() []*common.FighterLightInformation {
	if x != nil {
		return x.Attackers
	}
	return nil
}

func (x *MapRunningFightDetailsExtendedEvent) GetDefenders() []*common.FighterLightInformation {
	if x != nil {
		return x.Defenders
	}
	return nil
}

func (x *MapRunningFightDetailsExtendedEvent) GetNamedPartyTeams() []*common.NamedPartyTeam {
	if x != nil {
		return x.NamedPartyTeams
	}
	return nil
}

type MapObstacleUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obstacles []*MapObstacle `protobuf:"bytes,1,rep,name=obstacles,proto3" json:"obstacles,omitempty"`
}

func (x *MapObstacleUpdateEvent) Reset() {
	*x = MapObstacleUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapObstacleUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapObstacleUpdateEvent) ProtoMessage() {}

func (x *MapObstacleUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapObstacleUpdateEvent.ProtoReflect.Descriptor instead.
func (*MapObstacleUpdateEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{20}
}

func (x *MapObstacleUpdateEvent) GetObstacles() []*MapObstacle {
	if x != nil {
		return x.Obstacles
	}
	return nil
}

type MapComplementaryInformationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubareaId             int32                              `protobuf:"varint,1,opt,name=subarea_id,json=subareaId,proto3" json:"subarea_id,omitempty"`
	MapId                 int64                              `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Houses                []*common.House                    `protobuf:"bytes,3,rep,name=houses,proto3" json:"houses,omitempty"`
	Actors                []*common.ActorPositionInformation `protobuf:"bytes,4,rep,name=actors,proto3" json:"actors,omitempty"`
	InteractiveElements   []*common.InteractiveElement       `protobuf:"bytes,5,rep,name=interactive_elements,json=interactiveElements,proto3" json:"interactive_elements,omitempty"`
	StatedElements        []*common.StatedElement            `protobuf:"bytes,6,rep,name=stated_elements,json=statedElements,proto3" json:"stated_elements,omitempty"`
	Obstacles             []*MapObstacle                     `protobuf:"bytes,7,rep,name=obstacles,proto3" json:"obstacles,omitempty"`
	Fights                []*common.FightCommonInformation   `protobuf:"bytes,8,rep,name=fights,proto3" json:"fights,omitempty"`
	HasAggressiveMonsters bool                               `protobuf:"varint,9,opt,name=has_aggressive_monsters,json=hasAggressiveMonsters,proto3" json:"has_aggressive_monsters,omitempty"`
	// Types that are assignable to SpecificComplementaryInformation:
	//
	//	*MapComplementaryInformationEvent_InHouseInformation
	//	*MapComplementaryInformationEvent_Coordinates
	//	*MapComplementaryInformationEvent_BreachInformation
	//	*MapComplementaryInformationEvent_AnomalyInformation
	//	*MapComplementaryInformationEvent_HavenBagInformation
	SpecificComplementaryInformation isMapComplementaryInformationEvent_SpecificComplementaryInformation `protobuf_oneof:"specific_complementary_information"`
}

func (x *MapComplementaryInformationEvent) Reset() {
	*x = MapComplementaryInformationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapComplementaryInformationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapComplementaryInformationEvent) ProtoMessage() {}

func (x *MapComplementaryInformationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapComplementaryInformationEvent.ProtoReflect.Descriptor instead.
func (*MapComplementaryInformationEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{21}
}

func (x *MapComplementaryInformationEvent) GetSubareaId() int32 {
	if x != nil {
		return x.SubareaId
	}
	return 0
}

func (x *MapComplementaryInformationEvent) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MapComplementaryInformationEvent) GetHouses() []*common.House {
	if x != nil {
		return x.Houses
	}
	return nil
}

func (x *MapComplementaryInformationEvent) GetActors() []*common.ActorPositionInformation {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *MapComplementaryInformationEvent) GetInteractiveElements() []*common.InteractiveElement {
	if x != nil {
		return x.InteractiveElements
	}
	return nil
}

func (x *MapComplementaryInformationEvent) GetStatedElements() []*common.StatedElement {
	if x != nil {
		return x.StatedElements
	}
	return nil
}

func (x *MapComplementaryInformationEvent) GetObstacles() []*MapObstacle {
	if x != nil {
		return x.Obstacles
	}
	return nil
}

func (x *MapComplementaryInformationEvent) GetFights() []*common.FightCommonInformation {
	if x != nil {
		return x.Fights
	}
	return nil
}

func (x *MapComplementaryInformationEvent) GetHasAggressiveMonsters() bool {
	if x != nil {
		return x.HasAggressiveMonsters
	}
	return false
}

func (m *MapComplementaryInformationEvent) GetSpecificComplementaryInformation() isMapComplementaryInformationEvent_SpecificComplementaryInformation {
	if m != nil {
		return m.SpecificComplementaryInformation
	}
	return nil
}

func (x *MapComplementaryInformationEvent) GetInHouseInformation() *MapComplementaryInHouseInformation {
	if x, ok := x.GetSpecificComplementaryInformation().(*MapComplementaryInformationEvent_InHouseInformation); ok {
		return x.InHouseInformation
	}
	return nil
}

func (x *MapComplementaryInformationEvent) GetCoordinates() *common.MapCoordinates {
	if x, ok := x.GetSpecificComplementaryInformation().(*MapComplementaryInformationEvent_Coordinates); ok {
		return x.Coordinates
	}
	return nil
}

func (x *MapComplementaryInformationEvent) GetBreachInformation() *MapComplementaryBreachInformation {
	if x, ok := x.GetSpecificComplementaryInformation().(*MapComplementaryInformationEvent_BreachInformation); ok {
		return x.BreachInformation
	}
	return nil
}

func (x *MapComplementaryInformationEvent) GetAnomalyInformation() *MapComplementaryAnomalyInformation {
	if x, ok := x.GetSpecificComplementaryInformation().(*MapComplementaryInformationEvent_AnomalyInformation); ok {
		return x.AnomalyInformation
	}
	return nil
}

func (x *MapComplementaryInformationEvent) GetHavenBagInformation() *MapComplementaryHavenBagInformation {
	if x, ok := x.GetSpecificComplementaryInformation().(*MapComplementaryInformationEvent_HavenBagInformation); ok {
		return x.HavenBagInformation
	}
	return nil
}

type isMapComplementaryInformationEvent_SpecificComplementaryInformation interface {
	isMapComplementaryInformationEvent_SpecificComplementaryInformation()
}

type MapComplementaryInformationEvent_InHouseInformation struct {
	InHouseInformation *MapComplementaryInHouseInformation `protobuf:"bytes,10,opt,name=in_house_information,json=inHouseInformation,proto3,oneof"`
}

type MapComplementaryInformationEvent_Coordinates struct {
	Coordinates *common.MapCoordinates `protobuf:"bytes,11,opt,name=coordinates,proto3,oneof"`
}

type MapComplementaryInformationEvent_BreachInformation struct {
	BreachInformation *MapComplementaryBreachInformation `protobuf:"bytes,12,opt,name=breach_information,json=breachInformation,proto3,oneof"`
}

type MapComplementaryInformationEvent_AnomalyInformation struct {
	AnomalyInformation *MapComplementaryAnomalyInformation `protobuf:"bytes,13,opt,name=anomaly_information,json=anomalyInformation,proto3,oneof"`
}

type MapComplementaryInformationEvent_HavenBagInformation struct {
	HavenBagInformation *MapComplementaryHavenBagInformation `protobuf:"bytes,14,opt,name=haven_bag_information,json=havenBagInformation,proto3,oneof"`
}

func (*MapComplementaryInformationEvent_InHouseInformation) isMapComplementaryInformationEvent_SpecificComplementaryInformation() {
}

func (*MapComplementaryInformationEvent_Coordinates) isMapComplementaryInformationEvent_SpecificComplementaryInformation() {
}

func (*MapComplementaryInformationEvent_BreachInformation) isMapComplementaryInformationEvent_SpecificComplementaryInformation() {
}

func (*MapComplementaryInformationEvent_AnomalyInformation) isMapComplementaryInformationEvent_SpecificComplementaryInformation() {
}

func (*MapComplementaryInformationEvent_HavenBagInformation) isMapComplementaryInformationEvent_SpecificComplementaryInformation() {
}

type GameRolePlayShowActorsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actors []*common.ActorPositionInformation `protobuf:"bytes,1,rep,name=actors,proto3" json:"actors,omitempty"`
}

func (x *GameRolePlayShowActorsEvent) Reset() {
	*x = GameRolePlayShowActorsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRolePlayShowActorsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRolePlayShowActorsEvent) ProtoMessage() {}

func (x *GameRolePlayShowActorsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRolePlayShowActorsEvent.ProtoReflect.Descriptor instead.
func (*GameRolePlayShowActorsEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{22}
}

func (x *GameRolePlayShowActorsEvent) GetActors() []*common.ActorPositionInformation {
	if x != nil {
		return x.Actors
	}
	return nil
}

type FightMapInformationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubareaId int32 `protobuf:"varint,1,opt,name=subarea_id,json=subareaId,proto3" json:"subarea_id,omitempty"`
	MapId     int64 `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	// Types that are assignable to SpecificComplementaryInformation:
	//
	//	*FightMapInformationEvent_Coordinates
	//	*FightMapInformationEvent_BreachInformation
	//	*FightMapInformationEvent_AnomalyInformation
	SpecificComplementaryInformation isFightMapInformationEvent_SpecificComplementaryInformation `protobuf_oneof:"specific_complementary_information"`
}

func (x *FightMapInformationEvent) Reset() {
	*x = FightMapInformationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightMapInformationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightMapInformationEvent) ProtoMessage() {}

func (x *FightMapInformationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightMapInformationEvent.ProtoReflect.Descriptor instead.
func (*FightMapInformationEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{23}
}

func (x *FightMapInformationEvent) GetSubareaId() int32 {
	if x != nil {
		return x.SubareaId
	}
	return 0
}

func (x *FightMapInformationEvent) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (m *FightMapInformationEvent) GetSpecificComplementaryInformation() isFightMapInformationEvent_SpecificComplementaryInformation {
	if m != nil {
		return m.SpecificComplementaryInformation
	}
	return nil
}

func (x *FightMapInformationEvent) GetCoordinates() *common.MapCoordinates {
	if x, ok := x.GetSpecificComplementaryInformation().(*FightMapInformationEvent_Coordinates); ok {
		return x.Coordinates
	}
	return nil
}

func (x *FightMapInformationEvent) GetBreachInformation() *MapComplementaryBreachInformation {
	if x, ok := x.GetSpecificComplementaryInformation().(*FightMapInformationEvent_BreachInformation); ok {
		return x.BreachInformation
	}
	return nil
}

func (x *FightMapInformationEvent) GetAnomalyInformation() *MapComplementaryAnomalyInformation {
	if x, ok := x.GetSpecificComplementaryInformation().(*FightMapInformationEvent_AnomalyInformation); ok {
		return x.AnomalyInformation
	}
	return nil
}

type isFightMapInformationEvent_SpecificComplementaryInformation interface {
	isFightMapInformationEvent_SpecificComplementaryInformation()
}

type FightMapInformationEvent_Coordinates struct {
	Coordinates *common.MapCoordinates `protobuf:"bytes,3,opt,name=coordinates,proto3,oneof"`
}

type FightMapInformationEvent_BreachInformation struct {
	BreachInformation *MapComplementaryBreachInformation `protobuf:"bytes,4,opt,name=breach_information,json=breachInformation,proto3,oneof"`
}

type FightMapInformationEvent_AnomalyInformation struct {
	AnomalyInformation *MapComplementaryAnomalyInformation `protobuf:"bytes,5,opt,name=anomaly_information,json=anomalyInformation,proto3,oneof"`
}

func (*FightMapInformationEvent_Coordinates) isFightMapInformationEvent_SpecificComplementaryInformation() {
}

func (*FightMapInformationEvent_BreachInformation) isFightMapInformationEvent_SpecificComplementaryInformation() {
}

func (*FightMapInformationEvent_AnomalyInformation) isFightMapInformationEvent_SpecificComplementaryInformation() {
}

type MapComplementaryInHouseInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentHouse *common.House `protobuf:"bytes,1,opt,name=current_house,json=currentHouse,proto3" json:"current_house,omitempty"`
}

func (x *MapComplementaryInHouseInformation) Reset() {
	*x = MapComplementaryInHouseInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapComplementaryInHouseInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapComplementaryInHouseInformation) ProtoMessage() {}

func (x *MapComplementaryInHouseInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapComplementaryInHouseInformation.ProtoReflect.Descriptor instead.
func (*MapComplementaryInHouseInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{24}
}

func (x *MapComplementaryInHouseInformation) GetCurrentHouse() *common.House {
	if x != nil {
		return x.CurrentHouse
	}
	return nil
}

type MapComplementaryWithCoordsInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinates *common.MapCoordinates `protobuf:"bytes,1,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *MapComplementaryWithCoordsInformation) Reset() {
	*x = MapComplementaryWithCoordsInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapComplementaryWithCoordsInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapComplementaryWithCoordsInformation) ProtoMessage() {}

func (x *MapComplementaryWithCoordsInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapComplementaryWithCoordsInformation.ProtoReflect.Descriptor instead.
func (*MapComplementaryWithCoordsInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{25}
}

func (x *MapComplementaryWithCoordsInformation) GetCoordinates() *common.MapCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

type MapComplementaryBreachInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Floor        int32                  `protobuf:"varint,1,opt,name=floor,proto3" json:"floor,omitempty"`
	Room         int32                  `protobuf:"varint,2,opt,name=room,proto3" json:"room,omitempty"`
	InfinityMode int32                  `protobuf:"varint,3,opt,name=infinity_mode,json=infinityMode,proto3" json:"infinity_mode,omitempty"`
	Branches     []*common.BreachBranch `protobuf:"bytes,4,rep,name=branches,proto3" json:"branches,omitempty"`
}

func (x *MapComplementaryBreachInformation) Reset() {
	*x = MapComplementaryBreachInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapComplementaryBreachInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapComplementaryBreachInformation) ProtoMessage() {}

func (x *MapComplementaryBreachInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapComplementaryBreachInformation.ProtoReflect.Descriptor instead.
func (*MapComplementaryBreachInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{26}
}

func (x *MapComplementaryBreachInformation) GetFloor() int32 {
	if x != nil {
		return x.Floor
	}
	return 0
}

func (x *MapComplementaryBreachInformation) GetRoom() int32 {
	if x != nil {
		return x.Room
	}
	return 0
}

func (x *MapComplementaryBreachInformation) GetInfinityMode() int32 {
	if x != nil {
		return x.InfinityMode
	}
	return 0
}

func (x *MapComplementaryBreachInformation) GetBranches() []*common.BreachBranch {
	if x != nil {
		return x.Branches
	}
	return nil
}

type MapComplementaryAnomalyInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level       int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	ClosingTime int64 `protobuf:"varint,2,opt,name=closing_time,json=closingTime,proto3" json:"closing_time,omitempty"`
}

func (x *MapComplementaryAnomalyInformation) Reset() {
	*x = MapComplementaryAnomalyInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapComplementaryAnomalyInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapComplementaryAnomalyInformation) ProtoMessage() {}

func (x *MapComplementaryAnomalyInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapComplementaryAnomalyInformation.ProtoReflect.Descriptor instead.
func (*MapComplementaryAnomalyInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{27}
}

func (x *MapComplementaryAnomalyInformation) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MapComplementaryAnomalyInformation) GetClosingTime() int64 {
	if x != nil {
		return x.ClosingTime
	}
	return 0
}

type MapComplementaryHavenBagInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerInformation *common.Character `protobuf:"bytes,1,opt,name=owner_information,json=ownerInformation,proto3" json:"owner_information,omitempty"`
	Theme            int32             `protobuf:"varint,2,opt,name=theme,proto3" json:"theme,omitempty"`
	RoomId           int32             `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	MaxRoomId        int32             `protobuf:"varint,4,opt,name=max_room_id,json=maxRoomId,proto3" json:"max_room_id,omitempty"`
}

func (x *MapComplementaryHavenBagInformation) Reset() {
	*x = MapComplementaryHavenBagInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapComplementaryHavenBagInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapComplementaryHavenBagInformation) ProtoMessage() {}

func (x *MapComplementaryHavenBagInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapComplementaryHavenBagInformation.ProtoReflect.Descriptor instead.
func (*MapComplementaryHavenBagInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{28}
}

func (x *MapComplementaryHavenBagInformation) GetOwnerInformation() *common.Character {
	if x != nil {
		return x.OwnerInformation
	}
	return nil
}

func (x *MapComplementaryHavenBagInformation) GetTheme() int32 {
	if x != nil {
		return x.Theme
	}
	return 0
}

func (x *MapComplementaryHavenBagInformation) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *MapComplementaryHavenBagInformation) GetMaxRoomId() int32 {
	if x != nil {
		return x.MaxRoomId
	}
	return 0
}

type MapObstacle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId int32                     `protobuf:"varint,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	State  MapObstacle_ObstacleState `protobuf:"varint,2,opt,name=state,proto3,enum=com.ankama.dofus.server.game.protocol.gamemap.MapObstacle_ObstacleState" json:"state,omitempty"`
}

func (x *MapObstacle) Reset() {
	*x = MapObstacle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_gamemap_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapObstacle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapObstacle) ProtoMessage() {}

func (x *MapObstacle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_gamemap_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapObstacle.ProtoReflect.Descriptor instead.
func (*MapObstacle) Descriptor() ([]byte, []int) {
	return file_proto_game_gamemap_proto_rawDescGZIP(), []int{29}
}

func (x *MapObstacle) GetCellId() int32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *MapObstacle) GetState() MapObstacle_ObstacleState {
	if x != nil {
		return x.State
	}
	return MapObstacle_OBSTACLE_OPENED
}

var File_proto_game_gamemap_proto protoreflect.FileDescriptor

var file_proto_game_gamemap_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x67, 0x61, 0x6d,
	0x65, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x61, 0x70, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x4d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x75, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x75, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x22, 0x33, 0x0a,
	0x18, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x74, 0x0a, 0x1b, 0x4d, 0x61, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x69, 0x6c, 0x6f,
	0x74, 0x22, 0x19, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23,
	0x4d, 0x61, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x1d, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x22,
	0x2e, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22,
	0x47, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c,
	0x58, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x59, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x70,
	0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x75, 0x74, 0x69, 0x6f,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x75, 0x74, 0x69, 0x6f,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22, 0x5e, 0x0a,
	0x17, 0x4d, 0x61, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x22, 0x4e, 0x0a,
	0x16, 0x4d, 0x61, 0x70, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x53, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x35, 0x0a,
	0x12, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a,
	0x06, 0x66, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x82, 0x02,
	0x0a, 0x1b, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x63, 0x0a,
	0x09, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x22, 0xf4, 0x02, 0x0a, 0x23, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x63, 0x0a, 0x09, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x68, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x72, 0x0a, 0x16, 0x4d, 0x61, 0x70,
	0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x6d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63,
	0x6c, 0x65, 0x52, 0x09, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x22, 0xf6, 0x0a,
	0x0a, 0x20, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x06, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x73, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x58, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x6d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52,
	0x09, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x66, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x5f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x61, 0x73, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x85, 0x01, 0x0a, 0x14, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x61, 0x70, 0x2e,
	0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x49, 0x6e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x62,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x6d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x62, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84,
	0x01, 0x0a, 0x13, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x6f,
	0x6d, 0x61, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x5f,
	0x62, 0x61, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x6d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x48, 0x61, 0x76, 0x65, 0x6e, 0x42, 0x61, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x42, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x24, 0x0a, 0x22, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x1b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xe3, 0x03, 0x0a, 0x18, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x62,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x6d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x62, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84,
	0x01, 0x0a, 0x13, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x6f,
	0x6d, 0x61, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x24, 0x0a, 0x22, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x22, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x25,
	0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x21, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x22, 0x5d, 0x0a, 0x22, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xda, 0x01, 0x0a, 0x23, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x48, 0x61, 0x76, 0x65, 0x6e, 0x42, 0x61, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x11, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x10, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0xc1,
	0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x6d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63,
	0x6c, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x39, 0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x74, 0x61,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x53, 0x54,
	0x41, 0x43, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x4f, 0x42, 0x53, 0x54, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44,
	0x10, 0x01, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x6f, 0x2d, 0x78, 0x70, 0x2d, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x61, 0x70, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_game_gamemap_proto_rawDescOnce sync.Once
	file_proto_game_gamemap_proto_rawDescData = file_proto_game_gamemap_proto_rawDesc
)

func file_proto_game_gamemap_proto_rawDescGZIP() []byte {
	file_proto_game_gamemap_proto_rawDescOnce.Do(func() {
		file_proto_game_gamemap_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_game_gamemap_proto_rawDescData)
	})
	return file_proto_game_gamemap_proto_rawDescData
}

var file_proto_game_gamemap_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_game_gamemap_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_proto_game_gamemap_proto_goTypes = []any{
	(MapObstacle_ObstacleState)(0),                // 0: com.ankama.dofus.server.game.protocol.gamemap.MapObstacle.ObstacleState
	(*MapMovementRequest)(nil),                    // 1: com.ankama.dofus.server.game.protocol.gamemap.MapMovementRequest
	(*MapMovementCancelRequest)(nil),              // 2: com.ankama.dofus.server.game.protocol.gamemap.MapMovementCancelRequest
	(*MapMovementConfirmRequest)(nil),             // 3: com.ankama.dofus.server.game.protocol.gamemap.MapMovementConfirmRequest
	(*MapChangeOrientationRequest)(nil),           // 4: com.ankama.dofus.server.game.protocol.gamemap.MapChangeOrientationRequest
	(*MapErrorNotFoundRequest)(nil),               // 5: com.ankama.dofus.server.game.protocol.gamemap.MapErrorNotFoundRequest
	(*MapChangeRequest)(nil),                      // 6: com.ankama.dofus.server.game.protocol.gamemap.MapChangeRequest
	(*MapRunningFightsRequest)(nil),               // 7: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightsRequest
	(*MapRunningFightStopListeningRequest)(nil),   // 8: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightStopListeningRequest
	(*MapRunningFightDetailsRequest)(nil),         // 9: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightDetailsRequest
	(*MapInformationRequest)(nil),                 // 10: com.ankama.dofus.server.game.protocol.gamemap.MapInformationRequest
	(*MapMovementRefusedEvent)(nil),               // 11: com.ankama.dofus.server.game.protocol.gamemap.MapMovementRefusedEvent
	(*MapMovementEvent)(nil),                      // 12: com.ankama.dofus.server.game.protocol.gamemap.MapMovementEvent
	(*MapChangeOrientationEvent)(nil),             // 13: com.ankama.dofus.server.game.protocol.gamemap.MapChangeOrientationEvent
	(*MapCurrentEvent)(nil),                       // 14: com.ankama.dofus.server.game.protocol.gamemap.MapCurrentEvent
	(*MapCurrentInstanceEvent)(nil),               // 15: com.ankama.dofus.server.game.protocol.gamemap.MapCurrentInstanceEvent
	(*MapTeleportOnSameEvent)(nil),                // 16: com.ankama.dofus.server.game.protocol.gamemap.MapTeleportOnSameEvent
	(*MapFightCountEvent)(nil),                    // 17: com.ankama.dofus.server.game.protocol.gamemap.MapFightCountEvent
	(*MapRunningFightsEvent)(nil),                 // 18: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightsEvent
	(*MapRunningFightDetailsEvent)(nil),           // 19: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightDetailsEvent
	(*MapRunningFightDetailsExtendedEvent)(nil),   // 20: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightDetailsExtendedEvent
	(*MapObstacleUpdateEvent)(nil),                // 21: com.ankama.dofus.server.game.protocol.gamemap.MapObstacleUpdateEvent
	(*MapComplementaryInformationEvent)(nil),      // 22: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent
	(*GameRolePlayShowActorsEvent)(nil),           // 23: com.ankama.dofus.server.game.protocol.gamemap.GameRolePlayShowActorsEvent
	(*FightMapInformationEvent)(nil),              // 24: com.ankama.dofus.server.game.protocol.gamemap.FightMapInformationEvent
	(*MapComplementaryInHouseInformation)(nil),    // 25: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInHouseInformation
	(*MapComplementaryWithCoordsInformation)(nil), // 26: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryWithCoordsInformation
	(*MapComplementaryBreachInformation)(nil),     // 27: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryBreachInformation
	(*MapComplementaryAnomalyInformation)(nil),    // 28: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryAnomalyInformation
	(*MapComplementaryHavenBagInformation)(nil),   // 29: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryHavenBagInformation
	(*MapObstacle)(nil),                           // 30: com.ankama.dofus.server.game.protocol.gamemap.MapObstacle
	(common.Direction)(0),                         // 31: com.ankama.dofus.server.game.protocol.common.Direction
	(*common.FightExternalInformation)(nil),       // 32: com.ankama.dofus.server.game.protocol.common.FightExternalInformation
	(*common.FighterLightInformation)(nil),        // 33: com.ankama.dofus.server.game.protocol.common.FighterLightInformation
	(*common.NamedPartyTeam)(nil),                 // 34: com.ankama.dofus.server.game.protocol.common.NamedPartyTeam
	(*common.House)(nil),                          // 35: com.ankama.dofus.server.game.protocol.common.House
	(*common.ActorPositionInformation)(nil),       // 36: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation
	(*common.InteractiveElement)(nil),             // 37: com.ankama.dofus.server.game.protocol.common.InteractiveElement
	(*common.StatedElement)(nil),                  // 38: com.ankama.dofus.server.game.protocol.common.StatedElement
	(*common.FightCommonInformation)(nil),         // 39: com.ankama.dofus.server.game.protocol.common.FightCommonInformation
	(*common.MapCoordinates)(nil),                 // 40: com.ankama.dofus.server.game.protocol.common.MapCoordinates
	(*common.BreachBranch)(nil),                   // 41: com.ankama.dofus.server.game.protocol.common.BreachBranch
	(*common.Character)(nil),                      // 42: com.ankama.dofus.server.game.protocol.common.Character
}
var file_proto_game_gamemap_proto_depIdxs = []int32{
	31, // 0: com.ankama.dofus.server.game.protocol.gamemap.MapChangeOrientationRequest.direction:type_name -> com.ankama.dofus.server.game.protocol.common.Direction
	31, // 1: com.ankama.dofus.server.game.protocol.gamemap.MapChangeOrientationEvent.direction:type_name -> com.ankama.dofus.server.game.protocol.common.Direction
	32, // 2: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightsEvent.fights:type_name -> com.ankama.dofus.server.game.protocol.common.FightExternalInformation
	33, // 3: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightDetailsEvent.attackers:type_name -> com.ankama.dofus.server.game.protocol.common.FighterLightInformation
	33, // 4: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightDetailsEvent.defenders:type_name -> com.ankama.dofus.server.game.protocol.common.FighterLightInformation
	33, // 5: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightDetailsExtendedEvent.attackers:type_name -> com.ankama.dofus.server.game.protocol.common.FighterLightInformation
	33, // 6: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightDetailsExtendedEvent.defenders:type_name -> com.ankama.dofus.server.game.protocol.common.FighterLightInformation
	34, // 7: com.ankama.dofus.server.game.protocol.gamemap.MapRunningFightDetailsExtendedEvent.named_party_teams:type_name -> com.ankama.dofus.server.game.protocol.common.NamedPartyTeam
	30, // 8: com.ankama.dofus.server.game.protocol.gamemap.MapObstacleUpdateEvent.obstacles:type_name -> com.ankama.dofus.server.game.protocol.gamemap.MapObstacle
	35, // 9: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent.houses:type_name -> com.ankama.dofus.server.game.protocol.common.House
	36, // 10: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent.actors:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation
	37, // 11: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent.interactive_elements:type_name -> com.ankama.dofus.server.game.protocol.common.InteractiveElement
	38, // 12: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent.stated_elements:type_name -> com.ankama.dofus.server.game.protocol.common.StatedElement
	30, // 13: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent.obstacles:type_name -> com.ankama.dofus.server.game.protocol.gamemap.MapObstacle
	39, // 14: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent.fights:type_name -> com.ankama.dofus.server.game.protocol.common.FightCommonInformation
	25, // 15: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent.in_house_information:type_name -> com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInHouseInformation
	40, // 16: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent.coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapCoordinates
	27, // 17: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent.breach_information:type_name -> com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryBreachInformation
	28, // 18: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent.anomaly_information:type_name -> com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryAnomalyInformation
	29, // 19: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent.haven_bag_information:type_name -> com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryHavenBagInformation
	36, // 20: com.ankama.dofus.server.game.protocol.gamemap.GameRolePlayShowActorsEvent.actors:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation
	40, // 21: com.ankama.dofus.server.game.protocol.gamemap.FightMapInformationEvent.coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapCoordinates
	27, // 22: com.ankama.dofus.server.game.protocol.gamemap.FightMapInformationEvent.breach_information:type_name -> com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryBreachInformation
	28, // 23: com.ankama.dofus.server.game.protocol.gamemap.FightMapInformationEvent.anomaly_information:type_name -> com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryAnomalyInformation
	35, // 24: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInHouseInformation.current_house:type_name -> com.ankama.dofus.server.game.protocol.common.House
	40, // 25: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryWithCoordsInformation.coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapCoordinates
	41, // 26: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryBreachInformation.branches:type_name -> com.ankama.dofus.server.game.protocol.common.BreachBranch
	42, // 27: com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryHavenBagInformation.owner_information:type_name -> com.ankama.dofus.server.game.protocol.common.Character
	0,  // 28: com.ankama.dofus.server.game.protocol.gamemap.MapObstacle.state:type_name -> com.ankama.dofus.server.game.protocol.gamemap.MapObstacle.ObstacleState
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_proto_game_gamemap_proto_init() }
func file_proto_game_gamemap_proto_init() {
	if File_proto_game_gamemap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_game_gamemap_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MapMovementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MapMovementCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MapMovementConfirmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MapChangeOrientationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MapErrorNotFoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MapChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MapRunningFightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MapRunningFightStopListeningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MapRunningFightDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MapInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MapMovementRefusedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MapMovementEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MapChangeOrientationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MapCurrentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MapCurrentInstanceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MapTeleportOnSameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*MapFightCountEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MapRunningFightsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MapRunningFightDetailsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MapRunningFightDetailsExtendedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*MapObstacleUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*MapComplementaryInformationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GameRolePlayShowActorsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*FightMapInformationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*MapComplementaryInHouseInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*MapComplementaryWithCoordsInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*MapComplementaryBreachInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*MapComplementaryAnomalyInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*MapComplementaryHavenBagInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_gamemap_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*MapObstacle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_game_gamemap_proto_msgTypes[11].OneofWrappers = []any{}
	file_proto_game_gamemap_proto_msgTypes[21].OneofWrappers = []any{
		(*MapComplementaryInformationEvent_InHouseInformation)(nil),
		(*MapComplementaryInformationEvent_Coordinates)(nil),
		(*MapComplementaryInformationEvent_BreachInformation)(nil),
		(*MapComplementaryInformationEvent_AnomalyInformation)(nil),
		(*MapComplementaryInformationEvent_HavenBagInformation)(nil),
	}
	file_proto_game_gamemap_proto_msgTypes[23].OneofWrappers = []any{
		(*FightMapInformationEvent_Coordinates)(nil),
		(*FightMapInformationEvent_BreachInformation)(nil),
		(*FightMapInformationEvent_AnomalyInformation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_game_gamemap_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_game_gamemap_proto_goTypes,
		DependencyIndexes: file_proto_game_gamemap_proto_depIdxs,
		EnumInfos:         file_proto_game_gamemap_proto_enumTypes,
		MessageInfos:      file_proto_game_gamemap_proto_msgTypes,
	}.Build()
	File_proto_game_gamemap_proto = out.File
	file_proto_game_gamemap_proto_rawDesc = nil
	file_proto_game_gamemap_proto_goTypes = nil
	file_proto_game_gamemap_proto_depIdxs = nil
}
