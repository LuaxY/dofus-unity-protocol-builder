// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: proto/game/fight_preparation.proto

package fight_preparation

import (
	common "go-xp-dofus-unity-proto-builder/src/protocol/game/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FightJoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FighterId int64 `protobuf:"varint,1,opt,name=fighter_id,json=fighterId,proto3" json:"fighter_id,omitempty"`
	FightId   int32 `protobuf:"varint,2,opt,name=fight_id,json=fightId,proto3" json:"fight_id,omitempty"`
}

func (x *FightJoinRequest) Reset() {
	*x = FightJoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightJoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightJoinRequest) ProtoMessage() {}

func (x *FightJoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightJoinRequest.ProtoReflect.Descriptor instead.
func (*FightJoinRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{0}
}

func (x *FightJoinRequest) GetFighterId() int64 {
	if x != nil {
		return x.FighterId
	}
	return 0
}

func (x *FightJoinRequest) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

type FightSpectatePlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId int64 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *FightSpectatePlayerRequest) Reset() {
	*x = FightSpectatePlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightSpectatePlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightSpectatePlayerRequest) ProtoMessage() {}

func (x *FightSpectatePlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightSpectatePlayerRequest.ProtoReflect.Descriptor instead.
func (*FightSpectatePlayerRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{1}
}

func (x *FightSpectatePlayerRequest) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

type FightPlacementPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId   int32 `protobuf:"varint,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	EntityId int64 `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (x *FightPlacementPositionRequest) Reset() {
	*x = FightPlacementPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPlacementPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPlacementPositionRequest) ProtoMessage() {}

func (x *FightPlacementPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPlacementPositionRequest.ProtoReflect.Descriptor instead.
func (*FightPlacementPositionRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{2}
}

func (x *FightPlacementPositionRequest) GetCellId() int32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *FightPlacementPositionRequest) GetEntityId() int64 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

type FightPlacementSwapPositionsCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *FightPlacementSwapPositionsCancelRequest) Reset() {
	*x = FightPlacementSwapPositionsCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPlacementSwapPositionsCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPlacementSwapPositionsCancelRequest) ProtoMessage() {}

func (x *FightPlacementSwapPositionsCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPlacementSwapPositionsCancelRequest.ProtoReflect.Descriptor instead.
func (*FightPlacementSwapPositionsCancelRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{3}
}

func (x *FightPlacementSwapPositionsCancelRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type FightPlacementSwapPositionsAcceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *FightPlacementSwapPositionsAcceptRequest) Reset() {
	*x = FightPlacementSwapPositionsAcceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPlacementSwapPositionsAcceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPlacementSwapPositionsAcceptRequest) ProtoMessage() {}

func (x *FightPlacementSwapPositionsAcceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPlacementSwapPositionsAcceptRequest.ProtoReflect.Descriptor instead.
func (*FightPlacementSwapPositionsAcceptRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{4}
}

func (x *FightPlacementSwapPositionsAcceptRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type FightOptionToggleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option common.FightOption `protobuf:"varint,1,opt,name=option,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightOption" json:"option,omitempty"`
}

func (x *FightOptionToggleRequest) Reset() {
	*x = FightOptionToggleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightOptionToggleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightOptionToggleRequest) ProtoMessage() {}

func (x *FightOptionToggleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightOptionToggleRequest.ProtoReflect.Descriptor instead.
func (*FightOptionToggleRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{5}
}

func (x *FightOptionToggleRequest) GetOption() common.FightOption {
	if x != nil {
		return x.Option
	}
	return common.FightOption(0)
}

type FightReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady bool `protobuf:"varint,1,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
}

func (x *FightReadyRequest) Reset() {
	*x = FightReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightReadyRequest) ProtoMessage() {}

func (x *FightReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightReadyRequest.ProtoReflect.Descriptor instead.
func (*FightReadyRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{6}
}

func (x *FightReadyRequest) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type FightStartingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightType   common.FightType `protobuf:"varint,1,opt,name=fight_type,json=fightType,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightType" json:"fight_type,omitempty"`
	FightId     int32            `protobuf:"varint,2,opt,name=fight_id,json=fightId,proto3" json:"fight_id,omitempty"`
	AttackerId  int64            `protobuf:"varint,3,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	DefenderId  int64            `protobuf:"varint,4,opt,name=defender_id,json=defenderId,proto3" json:"defender_id,omitempty"`
	ContainBoss bool             `protobuf:"varint,5,opt,name=contain_boss,json=containBoss,proto3" json:"contain_boss,omitempty"`
	Monsters    []int32          `protobuf:"varint,6,rep,packed,name=monsters,proto3" json:"monsters,omitempty"`
}

func (x *FightStartingEvent) Reset() {
	*x = FightStartingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightStartingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightStartingEvent) ProtoMessage() {}

func (x *FightStartingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightStartingEvent.ProtoReflect.Descriptor instead.
func (*FightStartingEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{7}
}

func (x *FightStartingEvent) GetFightType() common.FightType {
	if x != nil {
		return x.FightType
	}
	return common.FightType(0)
}

func (x *FightStartingEvent) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *FightStartingEvent) GetAttackerId() int64 {
	if x != nil {
		return x.AttackerId
	}
	return 0
}

func (x *FightStartingEvent) GetDefenderId() int64 {
	if x != nil {
		return x.DefenderId
	}
	return 0
}

func (x *FightStartingEvent) GetContainBoss() bool {
	if x != nil {
		return x.ContainBoss
	}
	return false
}

func (x *FightStartingEvent) GetMonsters() []int32 {
	if x != nil {
		return x.Monsters
	}
	return nil
}

type FightJoinEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTeamPhase             bool             `protobuf:"varint,1,opt,name=is_team_phase,json=isTeamPhase,proto3" json:"is_team_phase,omitempty"`
	CanBeCancelled          bool             `protobuf:"varint,2,opt,name=can_be_cancelled,json=canBeCancelled,proto3" json:"can_be_cancelled,omitempty"`
	CanSayReady             bool             `protobuf:"varint,3,opt,name=can_say_ready,json=canSayReady,proto3" json:"can_say_ready,omitempty"`
	IsFightStarted          bool             `protobuf:"varint,4,opt,name=is_fight_started,json=isFightStarted,proto3" json:"is_fight_started,omitempty"`
	TimeMaxBeforeFightStart int64            `protobuf:"varint,5,opt,name=time_max_before_fight_start,json=timeMaxBeforeFightStart,proto3" json:"time_max_before_fight_start,omitempty"`
	FightType               common.FightType `protobuf:"varint,6,opt,name=fight_type,json=fightType,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightType" json:"fight_type,omitempty"`
}

func (x *FightJoinEvent) Reset() {
	*x = FightJoinEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightJoinEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightJoinEvent) ProtoMessage() {}

func (x *FightJoinEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightJoinEvent.ProtoReflect.Descriptor instead.
func (*FightJoinEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{8}
}

func (x *FightJoinEvent) GetIsTeamPhase() bool {
	if x != nil {
		return x.IsTeamPhase
	}
	return false
}

func (x *FightJoinEvent) GetCanBeCancelled() bool {
	if x != nil {
		return x.CanBeCancelled
	}
	return false
}

func (x *FightJoinEvent) GetCanSayReady() bool {
	if x != nil {
		return x.CanSayReady
	}
	return false
}

func (x *FightJoinEvent) GetIsFightStarted() bool {
	if x != nil {
		return x.IsFightStarted
	}
	return false
}

func (x *FightJoinEvent) GetTimeMaxBeforeFightStart() int64 {
	if x != nil {
		return x.TimeMaxBeforeFightStart
	}
	return 0
}

func (x *FightJoinEvent) GetFightType() common.FightType {
	if x != nil {
		return x.FightType
	}
	return common.FightType(0)
}

type FightSpectatorJoinEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightJoinEvent  *FightJoinEvent          `protobuf:"bytes,1,opt,name=fight_join_event,json=fightJoinEvent,proto3" json:"fight_join_event,omitempty"`
	NamedPartyTeams []*common.NamedPartyTeam `protobuf:"bytes,2,rep,name=named_party_teams,json=namedPartyTeams,proto3" json:"named_party_teams,omitempty"`
}

func (x *FightSpectatorJoinEvent) Reset() {
	*x = FightSpectatorJoinEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightSpectatorJoinEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightSpectatorJoinEvent) ProtoMessage() {}

func (x *FightSpectatorJoinEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightSpectatorJoinEvent.ProtoReflect.Descriptor instead.
func (*FightSpectatorJoinEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{9}
}

func (x *FightSpectatorJoinEvent) GetFightJoinEvent() *FightJoinEvent {
	if x != nil {
		return x.FightJoinEvent
	}
	return nil
}

func (x *FightSpectatorJoinEvent) GetNamedPartyTeams() []*common.NamedPartyTeam {
	if x != nil {
		return x.NamedPartyTeams
	}
	return nil
}

type FightPlacementPossiblePositionsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartingPositions *common.FightStartingPositions `protobuf:"bytes,1,opt,name=starting_positions,json=startingPositions,proto3" json:"starting_positions,omitempty"`
	Team              common.Team                    `protobuf:"varint,2,opt,name=team,proto3,enum=com.ankama.dofus.server.game.protocol.common.Team" json:"team,omitempty"`
}

func (x *FightPlacementPossiblePositionsEvent) Reset() {
	*x = FightPlacementPossiblePositionsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPlacementPossiblePositionsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPlacementPossiblePositionsEvent) ProtoMessage() {}

func (x *FightPlacementPossiblePositionsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPlacementPossiblePositionsEvent.ProtoReflect.Descriptor instead.
func (*FightPlacementPossiblePositionsEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{10}
}

func (x *FightPlacementPossiblePositionsEvent) GetStartingPositions() *common.FightStartingPositions {
	if x != nil {
		return x.StartingPositions
	}
	return nil
}

func (x *FightPlacementPossiblePositionsEvent) GetTeam() common.Team {
	if x != nil {
		return x.Team
	}
	return common.Team(0)
}

type FightPlacementSwapPositionsErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FightPlacementSwapPositionsErrorEvent) Reset() {
	*x = FightPlacementSwapPositionsErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPlacementSwapPositionsErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPlacementSwapPositionsErrorEvent) ProtoMessage() {}

func (x *FightPlacementSwapPositionsErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPlacementSwapPositionsErrorEvent.ProtoReflect.Descriptor instead.
func (*FightPlacementSwapPositionsErrorEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{11}
}

type FightPlacementSwapPositionsOfferEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       int32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RequesterId     int64 `protobuf:"varint,2,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	RequesterCellId int32 `protobuf:"varint,3,opt,name=requester_cell_id,json=requesterCellId,proto3" json:"requester_cell_id,omitempty"`
	TargetId        int64 `protobuf:"varint,4,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetCellId    int32 `protobuf:"varint,5,opt,name=target_cell_id,json=targetCellId,proto3" json:"target_cell_id,omitempty"`
}

func (x *FightPlacementSwapPositionsOfferEvent) Reset() {
	*x = FightPlacementSwapPositionsOfferEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPlacementSwapPositionsOfferEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPlacementSwapPositionsOfferEvent) ProtoMessage() {}

func (x *FightPlacementSwapPositionsOfferEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPlacementSwapPositionsOfferEvent.ProtoReflect.Descriptor instead.
func (*FightPlacementSwapPositionsOfferEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{12}
}

func (x *FightPlacementSwapPositionsOfferEvent) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *FightPlacementSwapPositionsOfferEvent) GetRequesterId() int64 {
	if x != nil {
		return x.RequesterId
	}
	return 0
}

func (x *FightPlacementSwapPositionsOfferEvent) GetRequesterCellId() int32 {
	if x != nil {
		return x.RequesterCellId
	}
	return 0
}

func (x *FightPlacementSwapPositionsOfferEvent) GetTargetId() int64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *FightPlacementSwapPositionsOfferEvent) GetTargetCellId() int32 {
	if x != nil {
		return x.TargetCellId
	}
	return 0
}

type FightPlacementSwapPositionsCancelledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   int32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CancellerId int64 `protobuf:"varint,2,opt,name=canceller_id,json=cancellerId,proto3" json:"canceller_id,omitempty"`
}

func (x *FightPlacementSwapPositionsCancelledEvent) Reset() {
	*x = FightPlacementSwapPositionsCancelledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPlacementSwapPositionsCancelledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPlacementSwapPositionsCancelledEvent) ProtoMessage() {}

func (x *FightPlacementSwapPositionsCancelledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPlacementSwapPositionsCancelledEvent.ProtoReflect.Descriptor instead.
func (*FightPlacementSwapPositionsCancelledEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{13}
}

func (x *FightPlacementSwapPositionsCancelledEvent) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *FightPlacementSwapPositionsCancelledEvent) GetCancellerId() int64 {
	if x != nil {
		return x.CancellerId
	}
	return 0
}

type FightPlacementSwapPositionsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dispositions []*common.EntityDisposition `protobuf:"bytes,1,rep,name=dispositions,proto3" json:"dispositions,omitempty"`
}

func (x *FightPlacementSwapPositionsEvent) Reset() {
	*x = FightPlacementSwapPositionsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPlacementSwapPositionsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPlacementSwapPositionsEvent) ProtoMessage() {}

func (x *FightPlacementSwapPositionsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPlacementSwapPositionsEvent.ProtoReflect.Descriptor instead.
func (*FightPlacementSwapPositionsEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{14}
}

func (x *FightPlacementSwapPositionsEvent) GetDispositions() []*common.EntityDisposition {
	if x != nil {
		return x.Dispositions
	}
	return nil
}

type FightOptionUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId int32              `protobuf:"varint,1,opt,name=fight_id,json=fightId,proto3" json:"fight_id,omitempty"`
	Team    common.Team        `protobuf:"varint,2,opt,name=team,proto3,enum=com.ankama.dofus.server.game.protocol.common.Team" json:"team,omitempty"`
	Option  common.FightOption `protobuf:"varint,3,opt,name=option,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightOption" json:"option,omitempty"`
	State   bool               `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *FightOptionUpdateEvent) Reset() {
	*x = FightOptionUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightOptionUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightOptionUpdateEvent) ProtoMessage() {}

func (x *FightOptionUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightOptionUpdateEvent.ProtoReflect.Descriptor instead.
func (*FightOptionUpdateEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{15}
}

func (x *FightOptionUpdateEvent) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *FightOptionUpdateEvent) GetTeam() common.Team {
	if x != nil {
		return x.Team
	}
	return common.Team(0)
}

func (x *FightOptionUpdateEvent) GetOption() common.FightOption {
	if x != nil {
		return x.Option
	}
	return common.FightOption(0)
}

func (x *FightOptionUpdateEvent) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

type FightTeamUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId int32                        `protobuf:"varint,1,opt,name=fight_id,json=fightId,proto3" json:"fight_id,omitempty"`
	Team    *common.FightTeamInformation `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *FightTeamUpdateEvent) Reset() {
	*x = FightTeamUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamUpdateEvent) ProtoMessage() {}

func (x *FightTeamUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamUpdateEvent.ProtoReflect.Descriptor instead.
func (*FightTeamUpdateEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{16}
}

func (x *FightTeamUpdateEvent) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *FightTeamUpdateEvent) GetTeam() *common.FightTeamInformation {
	if x != nil {
		return x.Team
	}
	return nil
}

type FightTeamRemoveMemberEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId     int32       `protobuf:"varint,1,opt,name=fight_id,json=fightId,proto3" json:"fight_id,omitempty"`
	Team        common.Team `protobuf:"varint,2,opt,name=team,proto3,enum=com.ankama.dofus.server.game.protocol.common.Team" json:"team,omitempty"`
	CharacterId int64       `protobuf:"varint,3,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
}

func (x *FightTeamRemoveMemberEvent) Reset() {
	*x = FightTeamRemoveMemberEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamRemoveMemberEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamRemoveMemberEvent) ProtoMessage() {}

func (x *FightTeamRemoveMemberEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamRemoveMemberEvent.ProtoReflect.Descriptor instead.
func (*FightTeamRemoveMemberEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{17}
}

func (x *FightTeamRemoveMemberEvent) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *FightTeamRemoveMemberEvent) GetTeam() common.Team {
	if x != nil {
		return x.Team
	}
	return common.Team(0)
}

func (x *FightTeamRemoveMemberEvent) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

type FightHumanReadyStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId int64 `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	IsReady     bool  `protobuf:"varint,2,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
}

func (x *FightHumanReadyStateEvent) Reset() {
	*x = FightHumanReadyStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightHumanReadyStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightHumanReadyStateEvent) ProtoMessage() {}

func (x *FightHumanReadyStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightHumanReadyStateEvent.ProtoReflect.Descriptor instead.
func (*FightHumanReadyStateEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{18}
}

func (x *FightHumanReadyStateEvent) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *FightHumanReadyStateEvent) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type FightLeaveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId int64 `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
}

func (x *FightLeaveEvent) Reset() {
	*x = FightLeaveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightLeaveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightLeaveEvent) ProtoMessage() {}

func (x *FightLeaveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightLeaveEvent.ProtoReflect.Descriptor instead.
func (*FightLeaveEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{19}
}

func (x *FightLeaveEvent) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

type FightStartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FightStartEvent) Reset() {
	*x = FightStartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightStartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightStartEvent) ProtoMessage() {}

func (x *FightStartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightStartEvent.ProtoReflect.Descriptor instead.
func (*FightStartEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{20}
}

type FightMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FightMapRequest) Reset() {
	*x = FightMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_preparation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightMapRequest) ProtoMessage() {}

func (x *FightMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_preparation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightMapRequest.ProtoReflect.Descriptor instead.
func (*FightMapRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_preparation_proto_rawDescGZIP(), []int{21}
}

var File_proto_game_fight_preparation_proto protoreflect.FileDescriptor

var file_proto_game_fight_preparation_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x10, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x1a, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1d, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x28, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x61,
	0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x28, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x6d, 0x0a, 0x18, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2e, 0x0a, 0x11, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x22, 0x88, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x0e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61,
	0x6e, 0x42, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x61, 0x6e, 0x5f, 0x73, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x53, 0x61, 0x79, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xf6, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x10,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x0e, 0x66, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x68, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x24, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x73, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22,
	0x27, 0x0a, 0x25, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x25, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x61, 0x70, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x29, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x20, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe4, 0x01, 0x0a,
	0x16, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x51, 0x0a, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22,
	0xa2, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x19, 0x46, 0x69, 0x67, 0x68, 0x74, 0x48, 0x75, 0x6d,
	0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22,
	0x34, 0x0a, 0x0f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x45, 0x5a, 0x43, 0x67,
	0x6f, 0x2d, 0x78, 0x70, 0x2d, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x73,
	0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x61, 0x6d, 0x65,
	0x2f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_game_fight_preparation_proto_rawDescOnce sync.Once
	file_proto_game_fight_preparation_proto_rawDescData = file_proto_game_fight_preparation_proto_rawDesc
)

func file_proto_game_fight_preparation_proto_rawDescGZIP() []byte {
	file_proto_game_fight_preparation_proto_rawDescOnce.Do(func() {
		file_proto_game_fight_preparation_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_game_fight_preparation_proto_rawDescData)
	})
	return file_proto_game_fight_preparation_proto_rawDescData
}

var file_proto_game_fight_preparation_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_game_fight_preparation_proto_goTypes = []any{
	(*FightJoinRequest)(nil),                          // 0: com.ankama.dofus.server.game.protocol.fight.preparation.FightJoinRequest
	(*FightSpectatePlayerRequest)(nil),                // 1: com.ankama.dofus.server.game.protocol.fight.preparation.FightSpectatePlayerRequest
	(*FightPlacementPositionRequest)(nil),             // 2: com.ankama.dofus.server.game.protocol.fight.preparation.FightPlacementPositionRequest
	(*FightPlacementSwapPositionsCancelRequest)(nil),  // 3: com.ankama.dofus.server.game.protocol.fight.preparation.FightPlacementSwapPositionsCancelRequest
	(*FightPlacementSwapPositionsAcceptRequest)(nil),  // 4: com.ankama.dofus.server.game.protocol.fight.preparation.FightPlacementSwapPositionsAcceptRequest
	(*FightOptionToggleRequest)(nil),                  // 5: com.ankama.dofus.server.game.protocol.fight.preparation.FightOptionToggleRequest
	(*FightReadyRequest)(nil),                         // 6: com.ankama.dofus.server.game.protocol.fight.preparation.FightReadyRequest
	(*FightStartingEvent)(nil),                        // 7: com.ankama.dofus.server.game.protocol.fight.preparation.FightStartingEvent
	(*FightJoinEvent)(nil),                            // 8: com.ankama.dofus.server.game.protocol.fight.preparation.FightJoinEvent
	(*FightSpectatorJoinEvent)(nil),                   // 9: com.ankama.dofus.server.game.protocol.fight.preparation.FightSpectatorJoinEvent
	(*FightPlacementPossiblePositionsEvent)(nil),      // 10: com.ankama.dofus.server.game.protocol.fight.preparation.FightPlacementPossiblePositionsEvent
	(*FightPlacementSwapPositionsErrorEvent)(nil),     // 11: com.ankama.dofus.server.game.protocol.fight.preparation.FightPlacementSwapPositionsErrorEvent
	(*FightPlacementSwapPositionsOfferEvent)(nil),     // 12: com.ankama.dofus.server.game.protocol.fight.preparation.FightPlacementSwapPositionsOfferEvent
	(*FightPlacementSwapPositionsCancelledEvent)(nil), // 13: com.ankama.dofus.server.game.protocol.fight.preparation.FightPlacementSwapPositionsCancelledEvent
	(*FightPlacementSwapPositionsEvent)(nil),          // 14: com.ankama.dofus.server.game.protocol.fight.preparation.FightPlacementSwapPositionsEvent
	(*FightOptionUpdateEvent)(nil),                    // 15: com.ankama.dofus.server.game.protocol.fight.preparation.FightOptionUpdateEvent
	(*FightTeamUpdateEvent)(nil),                      // 16: com.ankama.dofus.server.game.protocol.fight.preparation.FightTeamUpdateEvent
	(*FightTeamRemoveMemberEvent)(nil),                // 17: com.ankama.dofus.server.game.protocol.fight.preparation.FightTeamRemoveMemberEvent
	(*FightHumanReadyStateEvent)(nil),                 // 18: com.ankama.dofus.server.game.protocol.fight.preparation.FightHumanReadyStateEvent
	(*FightLeaveEvent)(nil),                           // 19: com.ankama.dofus.server.game.protocol.fight.preparation.FightLeaveEvent
	(*FightStartEvent)(nil),                           // 20: com.ankama.dofus.server.game.protocol.fight.preparation.FightStartEvent
	(*FightMapRequest)(nil),                           // 21: com.ankama.dofus.server.game.protocol.fight.preparation.FightMapRequest
	(common.FightOption)(0),                           // 22: com.ankama.dofus.server.game.protocol.common.FightOption
	(common.FightType)(0),                             // 23: com.ankama.dofus.server.game.protocol.common.FightType
	(*common.NamedPartyTeam)(nil),                     // 24: com.ankama.dofus.server.game.protocol.common.NamedPartyTeam
	(*common.FightStartingPositions)(nil),             // 25: com.ankama.dofus.server.game.protocol.common.FightStartingPositions
	(common.Team)(0),                                  // 26: com.ankama.dofus.server.game.protocol.common.Team
	(*common.EntityDisposition)(nil),                  // 27: com.ankama.dofus.server.game.protocol.common.EntityDisposition
	(*common.FightTeamInformation)(nil),               // 28: com.ankama.dofus.server.game.protocol.common.FightTeamInformation
}
var file_proto_game_fight_preparation_proto_depIdxs = []int32{
	22, // 0: com.ankama.dofus.server.game.protocol.fight.preparation.FightOptionToggleRequest.option:type_name -> com.ankama.dofus.server.game.protocol.common.FightOption
	23, // 1: com.ankama.dofus.server.game.protocol.fight.preparation.FightStartingEvent.fight_type:type_name -> com.ankama.dofus.server.game.protocol.common.FightType
	23, // 2: com.ankama.dofus.server.game.protocol.fight.preparation.FightJoinEvent.fight_type:type_name -> com.ankama.dofus.server.game.protocol.common.FightType
	8,  // 3: com.ankama.dofus.server.game.protocol.fight.preparation.FightSpectatorJoinEvent.fight_join_event:type_name -> com.ankama.dofus.server.game.protocol.fight.preparation.FightJoinEvent
	24, // 4: com.ankama.dofus.server.game.protocol.fight.preparation.FightSpectatorJoinEvent.named_party_teams:type_name -> com.ankama.dofus.server.game.protocol.common.NamedPartyTeam
	25, // 5: com.ankama.dofus.server.game.protocol.fight.preparation.FightPlacementPossiblePositionsEvent.starting_positions:type_name -> com.ankama.dofus.server.game.protocol.common.FightStartingPositions
	26, // 6: com.ankama.dofus.server.game.protocol.fight.preparation.FightPlacementPossiblePositionsEvent.team:type_name -> com.ankama.dofus.server.game.protocol.common.Team
	27, // 7: com.ankama.dofus.server.game.protocol.fight.preparation.FightPlacementSwapPositionsEvent.dispositions:type_name -> com.ankama.dofus.server.game.protocol.common.EntityDisposition
	26, // 8: com.ankama.dofus.server.game.protocol.fight.preparation.FightOptionUpdateEvent.team:type_name -> com.ankama.dofus.server.game.protocol.common.Team
	22, // 9: com.ankama.dofus.server.game.protocol.fight.preparation.FightOptionUpdateEvent.option:type_name -> com.ankama.dofus.server.game.protocol.common.FightOption
	28, // 10: com.ankama.dofus.server.game.protocol.fight.preparation.FightTeamUpdateEvent.team:type_name -> com.ankama.dofus.server.game.protocol.common.FightTeamInformation
	26, // 11: com.ankama.dofus.server.game.protocol.fight.preparation.FightTeamRemoveMemberEvent.team:type_name -> com.ankama.dofus.server.game.protocol.common.Team
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_game_fight_preparation_proto_init() }
func file_proto_game_fight_preparation_proto_init() {
	if File_proto_game_fight_preparation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_game_fight_preparation_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FightJoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FightSpectatePlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FightPlacementPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*FightPlacementSwapPositionsCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*FightPlacementSwapPositionsAcceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*FightOptionToggleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FightReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FightStartingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FightJoinEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*FightSpectatorJoinEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*FightPlacementPossiblePositionsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FightPlacementSwapPositionsErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FightPlacementSwapPositionsOfferEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*FightPlacementSwapPositionsCancelledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*FightPlacementSwapPositionsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*FightOptionUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*FightTeamUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*FightTeamRemoveMemberEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*FightHumanReadyStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*FightLeaveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*FightStartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_preparation_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*FightMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_game_fight_preparation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_game_fight_preparation_proto_goTypes,
		DependencyIndexes: file_proto_game_fight_preparation_proto_depIdxs,
		MessageInfos:      file_proto_game_fight_preparation_proto_msgTypes,
	}.Build()
	File_proto_game_fight_preparation_proto = out.File
	file_proto_game_fight_preparation_proto_rawDesc = nil
	file_proto_game_fight_preparation_proto_goTypes = nil
	file_proto_game_fight_preparation_proto_depIdxs = nil
}
