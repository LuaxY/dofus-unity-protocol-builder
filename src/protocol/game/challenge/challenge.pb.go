// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: proto/game/challenge.proto

package challenge

import (
	common "go-xp-dofus-unity-proto-builder/src/protocol/game/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChallengeTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId int32 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *ChallengeTargetsRequest) Reset() {
	*x = ChallengeTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeTargetsRequest) ProtoMessage() {}

func (x *ChallengeTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeTargetsRequest.ProtoReflect.Descriptor instead.
func (*ChallengeTargetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{0}
}

func (x *ChallengeTargetsRequest) GetChallengeId() int32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type ChallengeSelectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId int32 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *ChallengeSelectionRequest) Reset() {
	*x = ChallengeSelectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeSelectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeSelectionRequest) ProtoMessage() {}

func (x *ChallengeSelectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeSelectionRequest.ProtoReflect.Descriptor instead.
func (*ChallengeSelectionRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{1}
}

func (x *ChallengeSelectionRequest) GetChallengeId() int32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type ChallengeValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId int32 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *ChallengeValidateRequest) Reset() {
	*x = ChallengeValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeValidateRequest) ProtoMessage() {}

func (x *ChallengeValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeValidateRequest.ProtoReflect.Descriptor instead.
func (*ChallengeValidateRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{2}
}

func (x *ChallengeValidateRequest) GetChallengeId() int32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type ChallengeModSelectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeMod common.ChallengeMod `protobuf:"varint,1,opt,name=challenge_mod,json=challengeMod,proto3,enum=com.ankama.dofus.server.game.protocol.common.ChallengeMod" json:"challenge_mod,omitempty"`
}

func (x *ChallengeModSelectRequest) Reset() {
	*x = ChallengeModSelectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeModSelectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeModSelectRequest) ProtoMessage() {}

func (x *ChallengeModSelectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeModSelectRequest.ProtoReflect.Descriptor instead.
func (*ChallengeModSelectRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{3}
}

func (x *ChallengeModSelectRequest) GetChallengeMod() common.ChallengeMod {
	if x != nil {
		return x.ChallengeMod
	}
	return common.ChallengeMod(0)
}

type ChallengeReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeMod common.ChallengeMod `protobuf:"varint,1,opt,name=challenge_mod,json=challengeMod,proto3,enum=com.ankama.dofus.server.game.protocol.common.ChallengeMod" json:"challenge_mod,omitempty"`
}

func (x *ChallengeReadyRequest) Reset() {
	*x = ChallengeReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeReadyRequest) ProtoMessage() {}

func (x *ChallengeReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeReadyRequest.ProtoReflect.Descriptor instead.
func (*ChallengeReadyRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{4}
}

func (x *ChallengeReadyRequest) GetChallengeMod() common.ChallengeMod {
	if x != nil {
		return x.ChallengeMod
	}
	return common.ChallengeMod(0)
}

type ChallengeBonusChoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeBonus common.ChallengeBonus `protobuf:"varint,1,opt,name=challenge_bonus,json=challengeBonus,proto3,enum=com.ankama.dofus.server.game.protocol.common.ChallengeBonus" json:"challenge_bonus,omitempty"`
}

func (x *ChallengeBonusChoiceRequest) Reset() {
	*x = ChallengeBonusChoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeBonusChoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeBonusChoiceRequest) ProtoMessage() {}

func (x *ChallengeBonusChoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeBonusChoiceRequest.ProtoReflect.Descriptor instead.
func (*ChallengeBonusChoiceRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{5}
}

func (x *ChallengeBonusChoiceRequest) GetChallengeBonus() common.ChallengeBonus {
	if x != nil {
		return x.ChallengeBonus
	}
	return common.ChallengeBonus(0)
}

type ChallengeListEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*common.Challenge `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *ChallengeListEvent) Reset() {
	*x = ChallengeListEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeListEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeListEvent) ProtoMessage() {}

func (x *ChallengeListEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeListEvent.ProtoReflect.Descriptor instead.
func (*ChallengeListEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{6}
}

func (x *ChallengeListEvent) GetChallenges() []*common.Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type ChallengeTargetsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge *common.Challenge `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *ChallengeTargetsEvent) Reset() {
	*x = ChallengeTargetsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeTargetsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeTargetsEvent) ProtoMessage() {}

func (x *ChallengeTargetsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeTargetsEvent.ProtoReflect.Descriptor instead.
func (*ChallengeTargetsEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{7}
}

func (x *ChallengeTargetsEvent) GetChallenge() *common.Challenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type ChallengeResultEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId int32 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Success     bool  `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ChallengeResultEvent) Reset() {
	*x = ChallengeResultEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeResultEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeResultEvent) ProtoMessage() {}

func (x *ChallengeResultEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeResultEvent.ProtoReflect.Descriptor instead.
func (*ChallengeResultEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{8}
}

func (x *ChallengeResultEvent) GetChallengeId() int32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *ChallengeResultEvent) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ChallengeNumberEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeNumber int32 `protobuf:"varint,1,opt,name=challenge_number,json=challengeNumber,proto3" json:"challenge_number,omitempty"`
}

func (x *ChallengeNumberEvent) Reset() {
	*x = ChallengeNumberEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeNumberEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeNumberEvent) ProtoMessage() {}

func (x *ChallengeNumberEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeNumberEvent.ProtoReflect.Descriptor instead.
func (*ChallengeNumberEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{9}
}

func (x *ChallengeNumberEvent) GetChallengeNumber() int32 {
	if x != nil {
		return x.ChallengeNumber
	}
	return 0
}

type ChallengeProposalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeProposals []*common.Challenge `protobuf:"bytes,1,rep,name=challenge_proposals,json=challengeProposals,proto3" json:"challenge_proposals,omitempty"`
	Timer              int64               `protobuf:"varint,2,opt,name=timer,proto3" json:"timer,omitempty"`
}

func (x *ChallengeProposalEvent) Reset() {
	*x = ChallengeProposalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeProposalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeProposalEvent) ProtoMessage() {}

func (x *ChallengeProposalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeProposalEvent.ProtoReflect.Descriptor instead.
func (*ChallengeProposalEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{10}
}

func (x *ChallengeProposalEvent) GetChallengeProposals() []*common.Challenge {
	if x != nil {
		return x.ChallengeProposals
	}
	return nil
}

func (x *ChallengeProposalEvent) GetTimer() int64 {
	if x != nil {
		return x.Timer
	}
	return 0
}

type ChallengeSelectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge *common.Challenge `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *ChallengeSelectedEvent) Reset() {
	*x = ChallengeSelectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeSelectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeSelectedEvent) ProtoMessage() {}

func (x *ChallengeSelectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeSelectedEvent.ProtoReflect.Descriptor instead.
func (*ChallengeSelectedEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{11}
}

func (x *ChallengeSelectedEvent) GetChallenge() *common.Challenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type ChallengeAddEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge *common.Challenge `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *ChallengeAddEvent) Reset() {
	*x = ChallengeAddEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeAddEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeAddEvent) ProtoMessage() {}

func (x *ChallengeAddEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeAddEvent.ProtoReflect.Descriptor instead.
func (*ChallengeAddEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{12}
}

func (x *ChallengeAddEvent) GetChallenge() *common.Challenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type ChallengeModSelectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeMod common.ChallengeMod `protobuf:"varint,1,opt,name=challenge_mod,json=challengeMod,proto3,enum=com.ankama.dofus.server.game.protocol.common.ChallengeMod" json:"challenge_mod,omitempty"`
}

func (x *ChallengeModSelectedEvent) Reset() {
	*x = ChallengeModSelectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeModSelectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeModSelectedEvent) ProtoMessage() {}

func (x *ChallengeModSelectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeModSelectedEvent.ProtoReflect.Descriptor instead.
func (*ChallengeModSelectedEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{13}
}

func (x *ChallengeModSelectedEvent) GetChallengeMod() common.ChallengeMod {
	if x != nil {
		return x.ChallengeMod
	}
	return common.ChallengeMod(0)
}

type ChallengeBonusChoiceSelectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeBonus common.ChallengeBonus `protobuf:"varint,1,opt,name=challenge_bonus,json=challengeBonus,proto3,enum=com.ankama.dofus.server.game.protocol.common.ChallengeBonus" json:"challenge_bonus,omitempty"`
}

func (x *ChallengeBonusChoiceSelectedEvent) Reset() {
	*x = ChallengeBonusChoiceSelectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_challenge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeBonusChoiceSelectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeBonusChoiceSelectedEvent) ProtoMessage() {}

func (x *ChallengeBonusChoiceSelectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_challenge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeBonusChoiceSelectedEvent.ProtoReflect.Descriptor instead.
func (*ChallengeBonusChoiceSelectedEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_challenge_proto_rawDescGZIP(), []int{14}
}

func (x *ChallengeBonusChoiceSelectedEvent) GetChallengeBonus() common.ChallengeBonus {
	if x != nil {
		return x.ChallengeBonus
	}
	return common.ChallengeBonus(0)
}

var File_proto_game_challenge_proto protoreflect.FileDescriptor

var file_proto_game_challenge_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x1a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x17, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x19, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x18, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x22, 0x78, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5f, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d,
	0x6f, 0x64, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64,
	0x22, 0x84, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x65, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0x6d, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x55, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x53, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x98,
	0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x13, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x22, 0x6f, 0x0a, 0x16, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x6a, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x55, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x4d, 0x6f, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x6f, 0x2d, 0x78, 0x70, 0x2d, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_game_challenge_proto_rawDescOnce sync.Once
	file_proto_game_challenge_proto_rawDescData = file_proto_game_challenge_proto_rawDesc
)

func file_proto_game_challenge_proto_rawDescGZIP() []byte {
	file_proto_game_challenge_proto_rawDescOnce.Do(func() {
		file_proto_game_challenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_game_challenge_proto_rawDescData)
	})
	return file_proto_game_challenge_proto_rawDescData
}

var file_proto_game_challenge_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_game_challenge_proto_goTypes = []any{
	(*ChallengeTargetsRequest)(nil),           // 0: com.ankama.dofus.server.game.protocol.challenge.ChallengeTargetsRequest
	(*ChallengeSelectionRequest)(nil),         // 1: com.ankama.dofus.server.game.protocol.challenge.ChallengeSelectionRequest
	(*ChallengeValidateRequest)(nil),          // 2: com.ankama.dofus.server.game.protocol.challenge.ChallengeValidateRequest
	(*ChallengeModSelectRequest)(nil),         // 3: com.ankama.dofus.server.game.protocol.challenge.ChallengeModSelectRequest
	(*ChallengeReadyRequest)(nil),             // 4: com.ankama.dofus.server.game.protocol.challenge.ChallengeReadyRequest
	(*ChallengeBonusChoiceRequest)(nil),       // 5: com.ankama.dofus.server.game.protocol.challenge.ChallengeBonusChoiceRequest
	(*ChallengeListEvent)(nil),                // 6: com.ankama.dofus.server.game.protocol.challenge.ChallengeListEvent
	(*ChallengeTargetsEvent)(nil),             // 7: com.ankama.dofus.server.game.protocol.challenge.ChallengeTargetsEvent
	(*ChallengeResultEvent)(nil),              // 8: com.ankama.dofus.server.game.protocol.challenge.ChallengeResultEvent
	(*ChallengeNumberEvent)(nil),              // 9: com.ankama.dofus.server.game.protocol.challenge.ChallengeNumberEvent
	(*ChallengeProposalEvent)(nil),            // 10: com.ankama.dofus.server.game.protocol.challenge.ChallengeProposalEvent
	(*ChallengeSelectedEvent)(nil),            // 11: com.ankama.dofus.server.game.protocol.challenge.ChallengeSelectedEvent
	(*ChallengeAddEvent)(nil),                 // 12: com.ankama.dofus.server.game.protocol.challenge.ChallengeAddEvent
	(*ChallengeModSelectedEvent)(nil),         // 13: com.ankama.dofus.server.game.protocol.challenge.ChallengeModSelectedEvent
	(*ChallengeBonusChoiceSelectedEvent)(nil), // 14: com.ankama.dofus.server.game.protocol.challenge.ChallengeBonusChoiceSelectedEvent
	(common.ChallengeMod)(0),                  // 15: com.ankama.dofus.server.game.protocol.common.ChallengeMod
	(common.ChallengeBonus)(0),                // 16: com.ankama.dofus.server.game.protocol.common.ChallengeBonus
	(*common.Challenge)(nil),                  // 17: com.ankama.dofus.server.game.protocol.common.Challenge
}
var file_proto_game_challenge_proto_depIdxs = []int32{
	15, // 0: com.ankama.dofus.server.game.protocol.challenge.ChallengeModSelectRequest.challenge_mod:type_name -> com.ankama.dofus.server.game.protocol.common.ChallengeMod
	15, // 1: com.ankama.dofus.server.game.protocol.challenge.ChallengeReadyRequest.challenge_mod:type_name -> com.ankama.dofus.server.game.protocol.common.ChallengeMod
	16, // 2: com.ankama.dofus.server.game.protocol.challenge.ChallengeBonusChoiceRequest.challenge_bonus:type_name -> com.ankama.dofus.server.game.protocol.common.ChallengeBonus
	17, // 3: com.ankama.dofus.server.game.protocol.challenge.ChallengeListEvent.challenges:type_name -> com.ankama.dofus.server.game.protocol.common.Challenge
	17, // 4: com.ankama.dofus.server.game.protocol.challenge.ChallengeTargetsEvent.challenge:type_name -> com.ankama.dofus.server.game.protocol.common.Challenge
	17, // 5: com.ankama.dofus.server.game.protocol.challenge.ChallengeProposalEvent.challenge_proposals:type_name -> com.ankama.dofus.server.game.protocol.common.Challenge
	17, // 6: com.ankama.dofus.server.game.protocol.challenge.ChallengeSelectedEvent.challenge:type_name -> com.ankama.dofus.server.game.protocol.common.Challenge
	17, // 7: com.ankama.dofus.server.game.protocol.challenge.ChallengeAddEvent.challenge:type_name -> com.ankama.dofus.server.game.protocol.common.Challenge
	15, // 8: com.ankama.dofus.server.game.protocol.challenge.ChallengeModSelectedEvent.challenge_mod:type_name -> com.ankama.dofus.server.game.protocol.common.ChallengeMod
	16, // 9: com.ankama.dofus.server.game.protocol.challenge.ChallengeBonusChoiceSelectedEvent.challenge_bonus:type_name -> com.ankama.dofus.server.game.protocol.common.ChallengeBonus
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_game_challenge_proto_init() }
func file_proto_game_challenge_proto_init() {
	if File_proto_game_challenge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_game_challenge_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeSelectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeModSelectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeBonusChoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeListEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeTargetsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeResultEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeNumberEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeProposalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeSelectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeAddEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeModSelectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_challenge_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeBonusChoiceSelectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_game_challenge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_game_challenge_proto_goTypes,
		DependencyIndexes: file_proto_game_challenge_proto_depIdxs,
		MessageInfos:      file_proto_game_challenge_proto_msgTypes,
	}.Build()
	File_proto_game_challenge_proto = out.File
	file_proto_game_challenge_proto_rawDesc = nil
	file_proto_game_challenge_proto_goTypes = nil
	file_proto_game_challenge_proto_depIdxs = nil
}
