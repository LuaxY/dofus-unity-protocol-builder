// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: proto/game/common.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DelayedActionType int32

const (
	DelayedActionType_DISCONNECT        DelayedActionType = 0
	DelayedActionType_OBJECT_USE        DelayedActionType = 1
	DelayedActionType_JOIN_CHARACTER    DelayedActionType = 2
	DelayedActionType_AGGRESSION_IMMUNE DelayedActionType = 3
)

// Enum value maps for DelayedActionType.
var (
	DelayedActionType_name = map[int32]string{
		0: "DISCONNECT",
		1: "OBJECT_USE",
		2: "JOIN_CHARACTER",
		3: "AGGRESSION_IMMUNE",
	}
	DelayedActionType_value = map[string]int32{
		"DISCONNECT":        0,
		"OBJECT_USE":        1,
		"JOIN_CHARACTER":    2,
		"AGGRESSION_IMMUNE": 3,
	}
)

func (x DelayedActionType) Enum() *DelayedActionType {
	p := new(DelayedActionType)
	*p = x
	return p
}

func (x DelayedActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DelayedActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[0].Descriptor()
}

func (DelayedActionType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[0]
}

func (x DelayedActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DelayedActionType.Descriptor instead.
func (DelayedActionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{0}
}

type AllianceRelation int32

const (
	AllianceRelation_ALLIANCE_RELATION_NONE    AllianceRelation = 0
	AllianceRelation_ALLIANCE_RELATION_MINE    AllianceRelation = 1
	AllianceRelation_ALLIANCE_RELATION_DEF     AllianceRelation = 2
	AllianceRelation_ALLIANCE_RELATION_ATT     AllianceRelation = 3
	AllianceRelation_ALLIANCE_RELATION_NEUTRAL AllianceRelation = 4
	AllianceRelation_ALLIANCE_RELATION_ALLY    AllianceRelation = 5
	AllianceRelation_ALLIANCE_RELATION_ENEMY   AllianceRelation = 6
)

// Enum value maps for AllianceRelation.
var (
	AllianceRelation_name = map[int32]string{
		0: "ALLIANCE_RELATION_NONE",
		1: "ALLIANCE_RELATION_MINE",
		2: "ALLIANCE_RELATION_DEF",
		3: "ALLIANCE_RELATION_ATT",
		4: "ALLIANCE_RELATION_NEUTRAL",
		5: "ALLIANCE_RELATION_ALLY",
		6: "ALLIANCE_RELATION_ENEMY",
	}
	AllianceRelation_value = map[string]int32{
		"ALLIANCE_RELATION_NONE":    0,
		"ALLIANCE_RELATION_MINE":    1,
		"ALLIANCE_RELATION_DEF":     2,
		"ALLIANCE_RELATION_ATT":     3,
		"ALLIANCE_RELATION_NEUTRAL": 4,
		"ALLIANCE_RELATION_ALLY":    5,
		"ALLIANCE_RELATION_ENEMY":   6,
	}
)

func (x AllianceRelation) Enum() *AllianceRelation {
	p := new(AllianceRelation)
	*p = x
	return p
}

func (x AllianceRelation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllianceRelation) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[1].Descriptor()
}

func (AllianceRelation) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[1]
}

func (x AllianceRelation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllianceRelation.Descriptor instead.
func (AllianceRelation) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1}
}

type ChallengeMod int32

const (
	ChallengeMod_CHALLENGE_CHOICE ChallengeMod = 0
	ChallengeMod_CHALLENGE_RANDOM ChallengeMod = 1
)

// Enum value maps for ChallengeMod.
var (
	ChallengeMod_name = map[int32]string{
		0: "CHALLENGE_CHOICE",
		1: "CHALLENGE_RANDOM",
	}
	ChallengeMod_value = map[string]int32{
		"CHALLENGE_CHOICE": 0,
		"CHALLENGE_RANDOM": 1,
	}
)

func (x ChallengeMod) Enum() *ChallengeMod {
	p := new(ChallengeMod)
	*p = x
	return p
}

func (x ChallengeMod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeMod) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[2].Descriptor()
}

func (ChallengeMod) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[2]
}

func (x ChallengeMod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeMod.Descriptor instead.
func (ChallengeMod) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{2}
}

type ChallengeBonus int32

const (
	ChallengeBonus_CHALLENGE_EXPERIENCE_BONUS ChallengeBonus = 0
	ChallengeBonus_CHALLENGE_DROP_BONUS       ChallengeBonus = 1
)

// Enum value maps for ChallengeBonus.
var (
	ChallengeBonus_name = map[int32]string{
		0: "CHALLENGE_EXPERIENCE_BONUS",
		1: "CHALLENGE_DROP_BONUS",
	}
	ChallengeBonus_value = map[string]int32{
		"CHALLENGE_EXPERIENCE_BONUS": 0,
		"CHALLENGE_DROP_BONUS":       1,
	}
)

func (x ChallengeBonus) Enum() *ChallengeBonus {
	p := new(ChallengeBonus)
	*p = x
	return p
}

func (x ChallengeBonus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeBonus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[3].Descriptor()
}

func (ChallengeBonus) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[3]
}

func (x ChallengeBonus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeBonus.Descriptor instead.
func (ChallengeBonus) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{3}
}

type CharacterState int32

const (
	CharacterState_NOT_CONNECTED CharacterState = 0
	CharacterState_IN_ROLE_PLAY  CharacterState = 1
	CharacterState_IN_FIGHT      CharacterState = 2
	CharacterState_UNKNOWN_STATE CharacterState = 3
)

// Enum value maps for CharacterState.
var (
	CharacterState_name = map[int32]string{
		0: "NOT_CONNECTED",
		1: "IN_ROLE_PLAY",
		2: "IN_FIGHT",
		3: "UNKNOWN_STATE",
	}
	CharacterState_value = map[string]int32{
		"NOT_CONNECTED": 0,
		"IN_ROLE_PLAY":  1,
		"IN_FIGHT":      2,
		"UNKNOWN_STATE": 3,
	}
)

func (x CharacterState) Enum() *CharacterState {
	p := new(CharacterState)
	*p = x
	return p
}

func (x CharacterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[4].Descriptor()
}

func (CharacterState) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[4]
}

func (x CharacterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterState.Descriptor instead.
func (CharacterState) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{4}
}

type Alignment int32

const (
	Alignment_UNKNOWN Alignment = 0
	Alignment_WITHOUT Alignment = 1
	Alignment_NEUTRAL Alignment = 2
	Alignment_ANGEL   Alignment = 3
	Alignment_EVIL    Alignment = 4
)

// Enum value maps for Alignment.
var (
	Alignment_name = map[int32]string{
		0: "UNKNOWN",
		1: "WITHOUT",
		2: "NEUTRAL",
		3: "ANGEL",
		4: "EVIL",
	}
	Alignment_value = map[string]int32{
		"UNKNOWN": 0,
		"WITHOUT": 1,
		"NEUTRAL": 2,
		"ANGEL":   3,
		"EVIL":    4,
	}
)

func (x Alignment) Enum() *Alignment {
	p := new(Alignment)
	*p = x
	return p
}

func (x Alignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alignment) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[5].Descriptor()
}

func (Alignment) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[5]
}

func (x Alignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Alignment.Descriptor instead.
func (Alignment) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{5}
}

type Gender int32

const (
	Gender_MALE   Gender = 0
	Gender_FEMALE Gender = 1
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "MALE",
		1: "FEMALE",
	}
	Gender_value = map[string]int32{
		"MALE":   0,
		"FEMALE": 1,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[6].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[6]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{6}
}

type Hierarchy int32

const (
	Hierarchy_ROLE_UNAVAILABLE          Hierarchy = 0
	Hierarchy_ROLE_PLAYER               Hierarchy = 1
	Hierarchy_ROLE_MODERATOR            Hierarchy = 2
	Hierarchy_ROLE_GAME_MASTER_PADAWAN  Hierarchy = 3
	Hierarchy_ROLE_GAME_MASTER          Hierarchy = 4
	Hierarchy_ROLE_ADMIN                Hierarchy = 5
	Hierarchy_ROLE_UNKNOWN_SPECIAL_USER Hierarchy = 6
)

// Enum value maps for Hierarchy.
var (
	Hierarchy_name = map[int32]string{
		0: "ROLE_UNAVAILABLE",
		1: "ROLE_PLAYER",
		2: "ROLE_MODERATOR",
		3: "ROLE_GAME_MASTER_PADAWAN",
		4: "ROLE_GAME_MASTER",
		5: "ROLE_ADMIN",
		6: "ROLE_UNKNOWN_SPECIAL_USER",
	}
	Hierarchy_value = map[string]int32{
		"ROLE_UNAVAILABLE":          0,
		"ROLE_PLAYER":               1,
		"ROLE_MODERATOR":            2,
		"ROLE_GAME_MASTER_PADAWAN":  3,
		"ROLE_GAME_MASTER":          4,
		"ROLE_ADMIN":                5,
		"ROLE_UNKNOWN_SPECIAL_USER": 6,
	}
)

func (x Hierarchy) Enum() *Hierarchy {
	p := new(Hierarchy)
	*p = x
	return p
}

func (x Hierarchy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hierarchy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[7].Descriptor()
}

func (Hierarchy) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[7]
}

func (x Hierarchy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hierarchy.Descriptor instead.
func (Hierarchy) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{7}
}

type AttackableStatus int32

const (
	AttackableStatus_NON_ATTACKABLE              AttackableStatus = 0
	AttackableStatus_PVP_ENABLED_ATTACKABLE      AttackableStatus = 1
	AttackableStatus_PVP_ENABLED_NON_ATTACKABLE  AttackableStatus = 2
	AttackableStatus_AVA_ENABLED_ATTACKABLE      AttackableStatus = 3
	AttackableStatus_AVA_ENABLED_NON_ATTACKABLE  AttackableStatus = 4
	AttackableStatus_AVA_DISQUALIFIED            AttackableStatus = 5
	AttackableStatus_AVA_PREQUALIFIED_ATTACKABLE AttackableStatus = 6
)

// Enum value maps for AttackableStatus.
var (
	AttackableStatus_name = map[int32]string{
		0: "NON_ATTACKABLE",
		1: "PVP_ENABLED_ATTACKABLE",
		2: "PVP_ENABLED_NON_ATTACKABLE",
		3: "AVA_ENABLED_ATTACKABLE",
		4: "AVA_ENABLED_NON_ATTACKABLE",
		5: "AVA_DISQUALIFIED",
		6: "AVA_PREQUALIFIED_ATTACKABLE",
	}
	AttackableStatus_value = map[string]int32{
		"NON_ATTACKABLE":              0,
		"PVP_ENABLED_ATTACKABLE":      1,
		"PVP_ENABLED_NON_ATTACKABLE":  2,
		"AVA_ENABLED_ATTACKABLE":      3,
		"AVA_ENABLED_NON_ATTACKABLE":  4,
		"AVA_DISQUALIFIED":            5,
		"AVA_PREQUALIFIED_ATTACKABLE": 6,
	}
)

func (x AttackableStatus) Enum() *AttackableStatus {
	p := new(AttackableStatus)
	*p = x
	return p
}

func (x AttackableStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttackableStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[8].Descriptor()
}

func (AttackableStatus) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[8]
}

func (x AttackableStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttackableStatus.Descriptor instead.
func (AttackableStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8}
}

type Restriction int32

const (
	Restriction_CANNOT_BE_ATTACKED           Restriction = 0
	Restriction_CANNOT_BE_CHALLENGED         Restriction = 1
	Restriction_CANNOT_TRADE                 Restriction = 2
	Restriction_CANNOT_BE_ATTACKED_BY_MUTANT Restriction = 3
	Restriction_CANNOT_RUN                   Restriction = 4
	Restriction_FORCE_SLOW_WALK              Restriction = 5
	Restriction_CANNOT_MINIMIZE              Restriction = 6
	Restriction_CANNOT_MOVE                  Restriction = 7
	Restriction_CANNOT_ATTACK                Restriction = 8
	Restriction_CANNOT_CHALLENGE             Restriction = 9
	Restriction_CANNOT_EXCHANGE              Restriction = 10
	Restriction_CANNOT_ATTACK_AS_MUTANT      Restriction = 11
	Restriction_CANNOT_CHAT                  Restriction = 12
	Restriction_CANNOT_USE_OBJECT            Restriction = 13
	Restriction_CANNOT_USE_TAX_COLLECTOR     Restriction = 14
	Restriction_CANNOT_USE_INTERACTIVE       Restriction = 15
	Restriction_CANNOT_SPEAK_TO_NPC          Restriction = 16
	Restriction_CANNOT_CHANGE_ZONE           Restriction = 17
	Restriction_CANNOT_ATTACK_MONSTER        Restriction = 18
)

// Enum value maps for Restriction.
var (
	Restriction_name = map[int32]string{
		0:  "CANNOT_BE_ATTACKED",
		1:  "CANNOT_BE_CHALLENGED",
		2:  "CANNOT_TRADE",
		3:  "CANNOT_BE_ATTACKED_BY_MUTANT",
		4:  "CANNOT_RUN",
		5:  "FORCE_SLOW_WALK",
		6:  "CANNOT_MINIMIZE",
		7:  "CANNOT_MOVE",
		8:  "CANNOT_ATTACK",
		9:  "CANNOT_CHALLENGE",
		10: "CANNOT_EXCHANGE",
		11: "CANNOT_ATTACK_AS_MUTANT",
		12: "CANNOT_CHAT",
		13: "CANNOT_USE_OBJECT",
		14: "CANNOT_USE_TAX_COLLECTOR",
		15: "CANNOT_USE_INTERACTIVE",
		16: "CANNOT_SPEAK_TO_NPC",
		17: "CANNOT_CHANGE_ZONE",
		18: "CANNOT_ATTACK_MONSTER",
	}
	Restriction_value = map[string]int32{
		"CANNOT_BE_ATTACKED":           0,
		"CANNOT_BE_CHALLENGED":         1,
		"CANNOT_TRADE":                 2,
		"CANNOT_BE_ATTACKED_BY_MUTANT": 3,
		"CANNOT_RUN":                   4,
		"FORCE_SLOW_WALK":              5,
		"CANNOT_MINIMIZE":              6,
		"CANNOT_MOVE":                  7,
		"CANNOT_ATTACK":                8,
		"CANNOT_CHALLENGE":             9,
		"CANNOT_EXCHANGE":              10,
		"CANNOT_ATTACK_AS_MUTANT":      11,
		"CANNOT_CHAT":                  12,
		"CANNOT_USE_OBJECT":            13,
		"CANNOT_USE_TAX_COLLECTOR":     14,
		"CANNOT_USE_INTERACTIVE":       15,
		"CANNOT_SPEAK_TO_NPC":          16,
		"CANNOT_CHANGE_ZONE":           17,
		"CANNOT_ATTACK_MONSTER":        18,
	}
)

func (x Restriction) Enum() *Restriction {
	p := new(Restriction)
	*p = x
	return p
}

func (x Restriction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Restriction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[9].Descriptor()
}

func (Restriction) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[9]
}

func (x Restriction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Restriction.Descriptor instead.
func (Restriction) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{9}
}

type DialogType int32

const (
	DialogType_DIALOG_BOOK                DialogType = 0
	DialogType_DIALOG_DIALOG              DialogType = 1
	DialogType_DIALOG_LOCKABLE            DialogType = 2
	DialogType_DIALOG_PURCHASABLE         DialogType = 3
	DialogType_DIALOG_GUILD_INVITATION    DialogType = 4
	DialogType_DIALOG_GUILD_CREATE        DialogType = 5
	DialogType_DIALOG_GUILD_RENAME        DialogType = 6
	DialogType_DIALOG_MARRIAGE            DialogType = 7
	DialogType_DIALOG_DUNGEON_MEETING     DialogType = 8
	DialogType_DIALOG_SPELL_FORGET        DialogType = 9
	DialogType_DIALOG_TELEPORTER          DialogType = 10
	DialogType_DIALOG_EXCHANGE            DialogType = 11
	DialogType_DIALOG_ALLIANCE_INVITATION DialogType = 12
	DialogType_DIALOG_ALLIANCE_CREATE     DialogType = 13
	DialogType_DIALOG_ALLIANCE_RENAME     DialogType = 14
	DialogType_DIALOG_HAVENBAG_MEETING    DialogType = 15
)

// Enum value maps for DialogType.
var (
	DialogType_name = map[int32]string{
		0:  "DIALOG_BOOK",
		1:  "DIALOG_DIALOG",
		2:  "DIALOG_LOCKABLE",
		3:  "DIALOG_PURCHASABLE",
		4:  "DIALOG_GUILD_INVITATION",
		5:  "DIALOG_GUILD_CREATE",
		6:  "DIALOG_GUILD_RENAME",
		7:  "DIALOG_MARRIAGE",
		8:  "DIALOG_DUNGEON_MEETING",
		9:  "DIALOG_SPELL_FORGET",
		10: "DIALOG_TELEPORTER",
		11: "DIALOG_EXCHANGE",
		12: "DIALOG_ALLIANCE_INVITATION",
		13: "DIALOG_ALLIANCE_CREATE",
		14: "DIALOG_ALLIANCE_RENAME",
		15: "DIALOG_HAVENBAG_MEETING",
	}
	DialogType_value = map[string]int32{
		"DIALOG_BOOK":                0,
		"DIALOG_DIALOG":              1,
		"DIALOG_LOCKABLE":            2,
		"DIALOG_PURCHASABLE":         3,
		"DIALOG_GUILD_INVITATION":    4,
		"DIALOG_GUILD_CREATE":        5,
		"DIALOG_GUILD_RENAME":        6,
		"DIALOG_MARRIAGE":            7,
		"DIALOG_DUNGEON_MEETING":     8,
		"DIALOG_SPELL_FORGET":        9,
		"DIALOG_TELEPORTER":          10,
		"DIALOG_EXCHANGE":            11,
		"DIALOG_ALLIANCE_INVITATION": 12,
		"DIALOG_ALLIANCE_CREATE":     13,
		"DIALOG_ALLIANCE_RENAME":     14,
		"DIALOG_HAVENBAG_MEETING":    15,
	}
)

func (x DialogType) Enum() *DialogType {
	p := new(DialogType)
	*p = x
	return p
}

func (x DialogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DialogType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[10].Descriptor()
}

func (DialogType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[10]
}

func (x DialogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DialogType.Descriptor instead.
func (DialogType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{10}
}

type ExchangeType int32

const (
	ExchangeType_NPC_SHOP                            ExchangeType = 0
	ExchangeType_PLAYER_TRADE                        ExchangeType = 1
	ExchangeType_NPC_TRADE                           ExchangeType = 2
	ExchangeType_CRAFT                               ExchangeType = 3
	ExchangeType_STORAGE                             ExchangeType = 4
	ExchangeType_SHOP_STOCK                          ExchangeType = 5
	ExchangeType_TAX_COLLECTOR                       ExchangeType = 6
	ExchangeType_NPC_MODIFY_TRADE                    ExchangeType = 7
	ExchangeType_BIDHOUSE_SELL                       ExchangeType = 8
	ExchangeType_BIDHOUSE_BUY                        ExchangeType = 9
	ExchangeType_MULTICRAFT_CRAFTER                  ExchangeType = 10
	ExchangeType_MULTICRAFT_CUSTOMER                 ExchangeType = 11
	ExchangeType_JOB_INDEX                           ExchangeType = 12
	ExchangeType_MOUNT                               ExchangeType = 13
	ExchangeType_MOUNT_STABLE                        ExchangeType = 14
	ExchangeType_NPC_RESURECT_PET                    ExchangeType = 15
	ExchangeType_NPC_TRADE_DRAGOTURKEY               ExchangeType = 16
	ExchangeType_REALESTATE_HOUSE                    ExchangeType = 17
	ExchangeType_REALESTATE_FARM                     ExchangeType = 18
	ExchangeType_RUNES_TRADE                         ExchangeType = 19
	ExchangeType_RECYCLE_TRADE                       ExchangeType = 20
	ExchangeType_BANK                                ExchangeType = 21
	ExchangeType_TRASHBIN                            ExchangeType = 22
	ExchangeType_ALLIANCE_PRISM                      ExchangeType = 23
	ExchangeType_HAVENBAG                            ExchangeType = 24
	ExchangeType_NPC_TRADE_SEEMYOOL                  ExchangeType = 25
	ExchangeType_NPC_TRADE_RHINEETLE                 ExchangeType = 26
	ExchangeType_EVOLUTIVE_OBJECT_ELEMENTARY_RECYCLE ExchangeType = 27
	ExchangeType_NPC_RIDE_CAPABILITY_TRADE           ExchangeType = 28
	ExchangeType_GUILD_CHEST                         ExchangeType = 29
)

// Enum value maps for ExchangeType.
var (
	ExchangeType_name = map[int32]string{
		0:  "NPC_SHOP",
		1:  "PLAYER_TRADE",
		2:  "NPC_TRADE",
		3:  "CRAFT",
		4:  "STORAGE",
		5:  "SHOP_STOCK",
		6:  "TAX_COLLECTOR",
		7:  "NPC_MODIFY_TRADE",
		8:  "BIDHOUSE_SELL",
		9:  "BIDHOUSE_BUY",
		10: "MULTICRAFT_CRAFTER",
		11: "MULTICRAFT_CUSTOMER",
		12: "JOB_INDEX",
		13: "MOUNT",
		14: "MOUNT_STABLE",
		15: "NPC_RESURECT_PET",
		16: "NPC_TRADE_DRAGOTURKEY",
		17: "REALESTATE_HOUSE",
		18: "REALESTATE_FARM",
		19: "RUNES_TRADE",
		20: "RECYCLE_TRADE",
		21: "BANK",
		22: "TRASHBIN",
		23: "ALLIANCE_PRISM",
		24: "HAVENBAG",
		25: "NPC_TRADE_SEEMYOOL",
		26: "NPC_TRADE_RHINEETLE",
		27: "EVOLUTIVE_OBJECT_ELEMENTARY_RECYCLE",
		28: "NPC_RIDE_CAPABILITY_TRADE",
		29: "GUILD_CHEST",
	}
	ExchangeType_value = map[string]int32{
		"NPC_SHOP":                            0,
		"PLAYER_TRADE":                        1,
		"NPC_TRADE":                           2,
		"CRAFT":                               3,
		"STORAGE":                             4,
		"SHOP_STOCK":                          5,
		"TAX_COLLECTOR":                       6,
		"NPC_MODIFY_TRADE":                    7,
		"BIDHOUSE_SELL":                       8,
		"BIDHOUSE_BUY":                        9,
		"MULTICRAFT_CRAFTER":                  10,
		"MULTICRAFT_CUSTOMER":                 11,
		"JOB_INDEX":                           12,
		"MOUNT":                               13,
		"MOUNT_STABLE":                        14,
		"NPC_RESURECT_PET":                    15,
		"NPC_TRADE_DRAGOTURKEY":               16,
		"REALESTATE_HOUSE":                    17,
		"REALESTATE_FARM":                     18,
		"RUNES_TRADE":                         19,
		"RECYCLE_TRADE":                       20,
		"BANK":                                21,
		"TRASHBIN":                            22,
		"ALLIANCE_PRISM":                      23,
		"HAVENBAG":                            24,
		"NPC_TRADE_SEEMYOOL":                  25,
		"NPC_TRADE_RHINEETLE":                 26,
		"EVOLUTIVE_OBJECT_ELEMENTARY_RECYCLE": 27,
		"NPC_RIDE_CAPABILITY_TRADE":           28,
		"GUILD_CHEST":                         29,
	}
)

func (x ExchangeType) Enum() *ExchangeType {
	p := new(ExchangeType)
	*p = x
	return p
}

func (x ExchangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[11].Descriptor()
}

func (ExchangeType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[11]
}

func (x ExchangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeType.Descriptor instead.
func (ExchangeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{11}
}

type FightType int32

const (
	FightType_FIGHT_TYPE_CHALLENGE  FightType = 0
	FightType_FIGHT_TYPE_AGGRESSION FightType = 1
	FightType_FIGHT_TYPE_PvMA       FightType = 2
	FightType_FIGHT_TYPE_MXvM       FightType = 3
	FightType_FIGHT_TYPE_PvM        FightType = 4
	FightType_FIGHT_TYPE_PvT        FightType = 5
	FightType_FIGHT_TYPE_PvMU       FightType = 6
	FightType_FIGHT_TYPE_PVP_ARENA  FightType = 7
	FightType_FIGHT_TYPE_KOH        FightType = 8
	FightType_FIGHT_TYPE_PvPr       FightType = 9
	FightType_FIGHT_TYPE_BREACH     FightType = 10
)

// Enum value maps for FightType.
var (
	FightType_name = map[int32]string{
		0:  "FIGHT_TYPE_CHALLENGE",
		1:  "FIGHT_TYPE_AGGRESSION",
		2:  "FIGHT_TYPE_PvMA",
		3:  "FIGHT_TYPE_MXvM",
		4:  "FIGHT_TYPE_PvM",
		5:  "FIGHT_TYPE_PvT",
		6:  "FIGHT_TYPE_PvMU",
		7:  "FIGHT_TYPE_PVP_ARENA",
		8:  "FIGHT_TYPE_KOH",
		9:  "FIGHT_TYPE_PvPr",
		10: "FIGHT_TYPE_BREACH",
	}
	FightType_value = map[string]int32{
		"FIGHT_TYPE_CHALLENGE":  0,
		"FIGHT_TYPE_AGGRESSION": 1,
		"FIGHT_TYPE_PvMA":       2,
		"FIGHT_TYPE_MXvM":       3,
		"FIGHT_TYPE_PvM":        4,
		"FIGHT_TYPE_PvT":        5,
		"FIGHT_TYPE_PvMU":       6,
		"FIGHT_TYPE_PVP_ARENA":  7,
		"FIGHT_TYPE_KOH":        8,
		"FIGHT_TYPE_PvPr":       9,
		"FIGHT_TYPE_BREACH":     10,
	}
)

func (x FightType) Enum() *FightType {
	p := new(FightType)
	*p = x
	return p
}

func (x FightType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FightType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[12].Descriptor()
}

func (FightType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[12]
}

func (x FightType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FightType.Descriptor instead.
func (FightType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{12}
}

type TeamType int32

const (
	TeamType_TEAM_TYPE_PLAYER        TeamType = 0
	TeamType_TEAM_TYPE_MONSTER       TeamType = 1
	TeamType_TEAM_TYPE_MUTANT        TeamType = 2
	TeamType_TEAM_TYPE_TAX_COLLECTOR TeamType = 3
	TeamType_TEAM_TYPE_BAD_PLAYER    TeamType = 4
	TeamType_TEAM_TYPE_PRISM         TeamType = 5
)

// Enum value maps for TeamType.
var (
	TeamType_name = map[int32]string{
		0: "TEAM_TYPE_PLAYER",
		1: "TEAM_TYPE_MONSTER",
		2: "TEAM_TYPE_MUTANT",
		3: "TEAM_TYPE_TAX_COLLECTOR",
		4: "TEAM_TYPE_BAD_PLAYER",
		5: "TEAM_TYPE_PRISM",
	}
	TeamType_value = map[string]int32{
		"TEAM_TYPE_PLAYER":        0,
		"TEAM_TYPE_MONSTER":       1,
		"TEAM_TYPE_MUTANT":        2,
		"TEAM_TYPE_TAX_COLLECTOR": 3,
		"TEAM_TYPE_BAD_PLAYER":    4,
		"TEAM_TYPE_PRISM":         5,
	}
)

func (x TeamType) Enum() *TeamType {
	p := new(TeamType)
	*p = x
	return p
}

func (x TeamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[13].Descriptor()
}

func (TeamType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[13]
}

func (x TeamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamType.Descriptor instead.
func (TeamType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{13}
}

type FightOption int32

const (
	FightOption_FIGHT_OPTION_SET_SECRET        FightOption = 0
	FightOption_FIGHT_OPTION_SET_TO_PARTY_ONLY FightOption = 1
	FightOption_FIGHT_OPTION_SET_CLOSED        FightOption = 2
	FightOption_FIGHT_OPTION_ASK_FOR_HELP      FightOption = 3
)

// Enum value maps for FightOption.
var (
	FightOption_name = map[int32]string{
		0: "FIGHT_OPTION_SET_SECRET",
		1: "FIGHT_OPTION_SET_TO_PARTY_ONLY",
		2: "FIGHT_OPTION_SET_CLOSED",
		3: "FIGHT_OPTION_ASK_FOR_HELP",
	}
	FightOption_value = map[string]int32{
		"FIGHT_OPTION_SET_SECRET":        0,
		"FIGHT_OPTION_SET_TO_PARTY_ONLY": 1,
		"FIGHT_OPTION_SET_CLOSED":        2,
		"FIGHT_OPTION_ASK_FOR_HELP":      3,
	}
)

func (x FightOption) Enum() *FightOption {
	p := new(FightOption)
	*p = x
	return p
}

func (x FightOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FightOption) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[14].Descriptor()
}

func (FightOption) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[14]
}

func (x FightOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FightOption.Descriptor instead.
func (FightOption) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{14}
}

type FightOutcome int32

const (
	FightOutcome_RESULT_LOST           FightOutcome = 0
	FightOutcome_RESULT_DRAW           FightOutcome = 1
	FightOutcome_RESULT_VICTORY        FightOutcome = 2
	FightOutcome_RESULT_TAX            FightOutcome = 3
	FightOutcome_RESULT_DEFENDER_GROUP FightOutcome = 4
)

// Enum value maps for FightOutcome.
var (
	FightOutcome_name = map[int32]string{
		0: "RESULT_LOST",
		1: "RESULT_DRAW",
		2: "RESULT_VICTORY",
		3: "RESULT_TAX",
		4: "RESULT_DEFENDER_GROUP",
	}
	FightOutcome_value = map[string]int32{
		"RESULT_LOST":           0,
		"RESULT_DRAW":           1,
		"RESULT_VICTORY":        2,
		"RESULT_TAX":            3,
		"RESULT_DEFENDER_GROUP": 4,
	}
)

func (x FightOutcome) Enum() *FightOutcome {
	p := new(FightOutcome)
	*p = x
	return p
}

func (x FightOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FightOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[15].Descriptor()
}

func (FightOutcome) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[15]
}

func (x FightOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FightOutcome.Descriptor instead.
func (FightOutcome) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{15}
}

type FightInvisibilityState int32

const (
	FightInvisibilityState_INVISIBLE FightInvisibilityState = 0
	FightInvisibilityState_DETECTED  FightInvisibilityState = 1
	FightInvisibilityState_VISIBLE   FightInvisibilityState = 2
)

// Enum value maps for FightInvisibilityState.
var (
	FightInvisibilityState_name = map[int32]string{
		0: "INVISIBLE",
		1: "DETECTED",
		2: "VISIBLE",
	}
	FightInvisibilityState_value = map[string]int32{
		"INVISIBLE": 0,
		"DETECTED":  1,
		"VISIBLE":   2,
	}
)

func (x FightInvisibilityState) Enum() *FightInvisibilityState {
	p := new(FightInvisibilityState)
	*p = x
	return p
}

func (x FightInvisibilityState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FightInvisibilityState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[16].Descriptor()
}

func (FightInvisibilityState) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[16]
}

func (x FightInvisibilityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FightInvisibilityState.Descriptor instead.
func (FightInvisibilityState) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{16}
}

type Team int32

const (
	Team_TEAM_CHALLENGER Team = 0
	Team_TEAM_DEFENDER   Team = 1
	Team_TEAM_SPECTATOR  Team = 2
)

// Enum value maps for Team.
var (
	Team_name = map[int32]string{
		0: "TEAM_CHALLENGER",
		1: "TEAM_DEFENDER",
		2: "TEAM_SPECTATOR",
	}
	Team_value = map[string]int32{
		"TEAM_CHALLENGER": 0,
		"TEAM_DEFENDER":   1,
		"TEAM_SPECTATOR":  2,
	}
)

func (x Team) Enum() *Team {
	p := new(Team)
	*p = x
	return p
}

func (x Team) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Team) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[17].Descriptor()
}

func (Team) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[17]
}

func (x Team) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Team.Descriptor instead.
func (Team) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{17}
}

type ShortcutBar int32

const (
	ShortcutBar_GENERAL_SHORTCUT_BAR ShortcutBar = 0
	ShortcutBar_SPELL_SHORTCUT_BAR   ShortcutBar = 1
)

// Enum value maps for ShortcutBar.
var (
	ShortcutBar_name = map[int32]string{
		0: "GENERAL_SHORTCUT_BAR",
		1: "SPELL_SHORTCUT_BAR",
	}
	ShortcutBar_value = map[string]int32{
		"GENERAL_SHORTCUT_BAR": 0,
		"SPELL_SHORTCUT_BAR":   1,
	}
)

func (x ShortcutBar) Enum() *ShortcutBar {
	p := new(ShortcutBar)
	*p = x
	return p
}

func (x ShortcutBar) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShortcutBar) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[18].Descriptor()
}

func (ShortcutBar) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[18]
}

func (x ShortcutBar) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShortcutBar.Descriptor instead.
func (ShortcutBar) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{18}
}

type PresetType int32

const (
	PresetType_CHARACTER         PresetType = 0
	PresetType_FORGETTABLE_SPELL PresetType = 1
)

// Enum value maps for PresetType.
var (
	PresetType_name = map[int32]string{
		0: "CHARACTER",
		1: "FORGETTABLE_SPELL",
	}
	PresetType_value = map[string]int32{
		"CHARACTER":         0,
		"FORGETTABLE_SPELL": 1,
	}
)

func (x PresetType) Enum() *PresetType {
	p := new(PresetType)
	*p = x
	return p
}

func (x PresetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PresetType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[19].Descriptor()
}

func (PresetType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[19]
}

func (x PresetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PresetType.Descriptor instead.
func (PresetType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{19}
}

type Direction int32

const (
	Direction_DIRECTION_EAST       Direction = 0
	Direction_DIRECTION_SOUTH_EAST Direction = 1
	Direction_DIRECTION_SOUTH      Direction = 2
	Direction_DIRECTION_SOUTH_WEST Direction = 3
	Direction_DIRECTION_WEST       Direction = 4
	Direction_DIRECTION_NORTH_WEST Direction = 5
	Direction_DIRECTION_NORTH      Direction = 6
	Direction_DIRECTION_NORTH_EAST Direction = 7
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "DIRECTION_EAST",
		1: "DIRECTION_SOUTH_EAST",
		2: "DIRECTION_SOUTH",
		3: "DIRECTION_SOUTH_WEST",
		4: "DIRECTION_WEST",
		5: "DIRECTION_NORTH_WEST",
		6: "DIRECTION_NORTH",
		7: "DIRECTION_NORTH_EAST",
	}
	Direction_value = map[string]int32{
		"DIRECTION_EAST":       0,
		"DIRECTION_SOUTH_EAST": 1,
		"DIRECTION_SOUTH":      2,
		"DIRECTION_SOUTH_WEST": 3,
		"DIRECTION_WEST":       4,
		"DIRECTION_NORTH_WEST": 5,
		"DIRECTION_NORTH":      6,
		"DIRECTION_NORTH_EAST": 7,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[20].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[20]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{20}
}

type ObjectError int32

const (
	ObjectError_INVENTORY_FULL                ObjectError = 0
	ObjectError_CANNOT_EQUIP_TWICE            ObjectError = 1
	ObjectError_NOT_TRADABLE                  ObjectError = 2
	ObjectError_CANNOT_DROP                   ObjectError = 3
	ObjectError_CANNOT_DROP_NO_PLACE          ObjectError = 4
	ObjectError_CANNOT_DESTROY                ObjectError = 5
	ObjectError_LEVEL_TOO_LOW                 ObjectError = 6
	ObjectError_LIVING_OBJECT_REFUSED_FOOD    ObjectError = 7
	ObjectError_CANNOT_UNEQUIP                ObjectError = 8
	ObjectError_CANNOT_EQUIP_HERE             ObjectError = 9
	ObjectError_CRITERIONS                    ObjectError = 10
	ObjectError_SYMBIOTIC_OBJECT_ERROR        ObjectError = 11
	ObjectError_EVOLUTIVE_OBJECT_REFUSED_FOOD ObjectError = 12
)

// Enum value maps for ObjectError.
var (
	ObjectError_name = map[int32]string{
		0:  "INVENTORY_FULL",
		1:  "CANNOT_EQUIP_TWICE",
		2:  "NOT_TRADABLE",
		3:  "CANNOT_DROP",
		4:  "CANNOT_DROP_NO_PLACE",
		5:  "CANNOT_DESTROY",
		6:  "LEVEL_TOO_LOW",
		7:  "LIVING_OBJECT_REFUSED_FOOD",
		8:  "CANNOT_UNEQUIP",
		9:  "CANNOT_EQUIP_HERE",
		10: "CRITERIONS",
		11: "SYMBIOTIC_OBJECT_ERROR",
		12: "EVOLUTIVE_OBJECT_REFUSED_FOOD",
	}
	ObjectError_value = map[string]int32{
		"INVENTORY_FULL":                0,
		"CANNOT_EQUIP_TWICE":            1,
		"NOT_TRADABLE":                  2,
		"CANNOT_DROP":                   3,
		"CANNOT_DROP_NO_PLACE":          4,
		"CANNOT_DESTROY":                5,
		"LEVEL_TOO_LOW":                 6,
		"LIVING_OBJECT_REFUSED_FOOD":    7,
		"CANNOT_UNEQUIP":                8,
		"CANNOT_EQUIP_HERE":             9,
		"CRITERIONS":                    10,
		"SYMBIOTIC_OBJECT_ERROR":        11,
		"EVOLUTIVE_OBJECT_REFUSED_FOOD": 12,
	}
)

func (x ObjectError) Enum() *ObjectError {
	p := new(ObjectError)
	*p = x
	return p
}

func (x ObjectError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[21].Descriptor()
}

func (ObjectError) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[21]
}

func (x ObjectError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectError.Descriptor instead.
func (ObjectError) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{21}
}

type ObjectOrigin int32

const (
	ObjectOrigin_ORIGIN_UNDEFINED ObjectOrigin = 0
	ObjectOrigin_ORIGIN_QUEST     ObjectOrigin = 1
)

// Enum value maps for ObjectOrigin.
var (
	ObjectOrigin_name = map[int32]string{
		0: "ORIGIN_UNDEFINED",
		1: "ORIGIN_QUEST",
	}
	ObjectOrigin_value = map[string]int32{
		"ORIGIN_UNDEFINED": 0,
		"ORIGIN_QUEST":     1,
	}
)

func (x ObjectOrigin) Enum() *ObjectOrigin {
	p := new(ObjectOrigin)
	*p = x
	return p
}

func (x ObjectOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[22].Descriptor()
}

func (ObjectOrigin) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[22]
}

func (x ObjectOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectOrigin.Descriptor instead.
func (ObjectOrigin) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{22}
}

type SocialRecruitmentType int32

const (
	SocialRecruitmentType_DISABLED  SocialRecruitmentType = 0
	SocialRecruitmentType_AUTOMATIC SocialRecruitmentType = 1
	SocialRecruitmentType_MANUAL    SocialRecruitmentType = 2
)

// Enum value maps for SocialRecruitmentType.
var (
	SocialRecruitmentType_name = map[int32]string{
		0: "DISABLED",
		1: "AUTOMATIC",
		2: "MANUAL",
	}
	SocialRecruitmentType_value = map[string]int32{
		"DISABLED":  0,
		"AUTOMATIC": 1,
		"MANUAL":    2,
	}
)

func (x SocialRecruitmentType) Enum() *SocialRecruitmentType {
	p := new(SocialRecruitmentType)
	*p = x
	return p
}

func (x SocialRecruitmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocialRecruitmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[23].Descriptor()
}

func (SocialRecruitmentType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[23]
}

func (x SocialRecruitmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocialRecruitmentType.Descriptor instead.
func (SocialRecruitmentType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{23}
}

type SocialApplicationState int32

const (
	SocialApplicationState_APPLICATION_ADDED   SocialApplicationState = 0
	SocialApplicationState_APPLICATION_DELETED SocialApplicationState = 1
	SocialApplicationState_APPLICATION_UPDATED SocialApplicationState = 2
)

// Enum value maps for SocialApplicationState.
var (
	SocialApplicationState_name = map[int32]string{
		0: "APPLICATION_ADDED",
		1: "APPLICATION_DELETED",
		2: "APPLICATION_UPDATED",
	}
	SocialApplicationState_value = map[string]int32{
		"APPLICATION_ADDED":   0,
		"APPLICATION_DELETED": 1,
		"APPLICATION_UPDATED": 2,
	}
)

func (x SocialApplicationState) Enum() *SocialApplicationState {
	p := new(SocialApplicationState)
	*p = x
	return p
}

func (x SocialApplicationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocialApplicationState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[24].Descriptor()
}

func (SocialApplicationState) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[24]
}

func (x SocialApplicationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocialApplicationState.Descriptor instead.
func (SocialApplicationState) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{24}
}

type ServerType int32

const (
	ServerType_UNDEFINED  ServerType = 0
	ServerType_CLASSICAL  ServerType = 1
	ServerType_KOLIZEUM   ServerType = 2
	ServerType_TOURNAMENT ServerType = 3
	ServerType_EPIC       ServerType = 4
	ServerType_TEMPORIS   ServerType = 5
)

// Enum value maps for ServerType.
var (
	ServerType_name = map[int32]string{
		0: "UNDEFINED",
		1: "CLASSICAL",
		2: "KOLIZEUM",
		3: "TOURNAMENT",
		4: "EPIC",
		5: "TEMPORIS",
	}
	ServerType_value = map[string]int32{
		"UNDEFINED":  0,
		"CLASSICAL":  1,
		"KOLIZEUM":   2,
		"TOURNAMENT": 3,
		"EPIC":       4,
		"TEMPORIS":   5,
	}
)

func (x ServerType) Enum() *ServerType {
	p := new(ServerType)
	*p = x
	return p
}

func (x ServerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[25].Descriptor()
}

func (ServerType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[25]
}

func (x ServerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerType.Descriptor instead.
func (ServerType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{25}
}

type SocialGroupOperationResult int32

const (
	SocialGroupOperationResult_SOCIAL_GROUP_OPERATION_OK              SocialGroupOperationResult = 0
	SocialGroupOperationResult_SOCIAL_GROUP_ERROR_NAME_INVALID        SocialGroupOperationResult = 1
	SocialGroupOperationResult_SOCIAL_GROUP_ERROR_ALREADY_IN_GROUP    SocialGroupOperationResult = 2
	SocialGroupOperationResult_SOCIAL_GROUP_ERROR_NAME_ALREADY_EXISTS SocialGroupOperationResult = 3
	SocialGroupOperationResult_SOCIAL_GROUP_ERROR_LEAVE               SocialGroupOperationResult = 4
	SocialGroupOperationResult_SOCIAL_GROUP_ERROR_CANCEL              SocialGroupOperationResult = 5
	SocialGroupOperationResult_SOCIAL_GROUP_ERROR_REQUIREMENT_UNMET   SocialGroupOperationResult = 6
	SocialGroupOperationResult_SOCIAL_GROUP_ERROR_EMBLEM_INVALID      SocialGroupOperationResult = 7
	SocialGroupOperationResult_SOCIAL_GROUP_ERROR_TAG_INVALID         SocialGroupOperationResult = 8
	SocialGroupOperationResult_SOCIAL_GROUP_ERROR_TAG_ALREADY_EXISTS  SocialGroupOperationResult = 9
	SocialGroupOperationResult_SOCIAL_GROUP_ERROR_UNKNOWN             SocialGroupOperationResult = 10
)

// Enum value maps for SocialGroupOperationResult.
var (
	SocialGroupOperationResult_name = map[int32]string{
		0:  "SOCIAL_GROUP_OPERATION_OK",
		1:  "SOCIAL_GROUP_ERROR_NAME_INVALID",
		2:  "SOCIAL_GROUP_ERROR_ALREADY_IN_GROUP",
		3:  "SOCIAL_GROUP_ERROR_NAME_ALREADY_EXISTS",
		4:  "SOCIAL_GROUP_ERROR_LEAVE",
		5:  "SOCIAL_GROUP_ERROR_CANCEL",
		6:  "SOCIAL_GROUP_ERROR_REQUIREMENT_UNMET",
		7:  "SOCIAL_GROUP_ERROR_EMBLEM_INVALID",
		8:  "SOCIAL_GROUP_ERROR_TAG_INVALID",
		9:  "SOCIAL_GROUP_ERROR_TAG_ALREADY_EXISTS",
		10: "SOCIAL_GROUP_ERROR_UNKNOWN",
	}
	SocialGroupOperationResult_value = map[string]int32{
		"SOCIAL_GROUP_OPERATION_OK":              0,
		"SOCIAL_GROUP_ERROR_NAME_INVALID":        1,
		"SOCIAL_GROUP_ERROR_ALREADY_IN_GROUP":    2,
		"SOCIAL_GROUP_ERROR_NAME_ALREADY_EXISTS": 3,
		"SOCIAL_GROUP_ERROR_LEAVE":               4,
		"SOCIAL_GROUP_ERROR_CANCEL":              5,
		"SOCIAL_GROUP_ERROR_REQUIREMENT_UNMET":   6,
		"SOCIAL_GROUP_ERROR_EMBLEM_INVALID":      7,
		"SOCIAL_GROUP_ERROR_TAG_INVALID":         8,
		"SOCIAL_GROUP_ERROR_TAG_ALREADY_EXISTS":  9,
		"SOCIAL_GROUP_ERROR_UNKNOWN":             10,
	}
)

func (x SocialGroupOperationResult) Enum() *SocialGroupOperationResult {
	p := new(SocialGroupOperationResult)
	*p = x
	return p
}

func (x SocialGroupOperationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocialGroupOperationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[26].Descriptor()
}

func (SocialGroupOperationResult) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[26]
}

func (x SocialGroupOperationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocialGroupOperationResult.Descriptor instead.
func (SocialGroupOperationResult) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{26}
}

type SocialNoticeError int32

const (
	SocialNoticeError_SOCIAL_NOTICE_UNKNOWN_ERROR  SocialNoticeError = 0
	SocialNoticeError_SOCIAL_NOTICE_INVALID_RIGHTS SocialNoticeError = 1
	SocialNoticeError_SOCIAL_NOTICE_COOLDOWN       SocialNoticeError = 2
)

// Enum value maps for SocialNoticeError.
var (
	SocialNoticeError_name = map[int32]string{
		0: "SOCIAL_NOTICE_UNKNOWN_ERROR",
		1: "SOCIAL_NOTICE_INVALID_RIGHTS",
		2: "SOCIAL_NOTICE_COOLDOWN",
	}
	SocialNoticeError_value = map[string]int32{
		"SOCIAL_NOTICE_UNKNOWN_ERROR":  0,
		"SOCIAL_NOTICE_INVALID_RIGHTS": 1,
		"SOCIAL_NOTICE_COOLDOWN":       2,
	}
)

func (x SocialNoticeError) Enum() *SocialNoticeError {
	p := new(SocialNoticeError)
	*p = x
	return p
}

func (x SocialNoticeError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocialNoticeError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[27].Descriptor()
}

func (SocialNoticeError) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[27]
}

func (x SocialNoticeError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocialNoticeError.Descriptor instead.
func (SocialNoticeError) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{27}
}

type SocialGroupInvitationState int32

const (
	SocialGroupInvitationState_SOCIAL_GROUP_INVITATION_FAILED   SocialGroupInvitationState = 0
	SocialGroupInvitationState_SOCIAL_GROUP_INVITATION_SENT     SocialGroupInvitationState = 1
	SocialGroupInvitationState_SOCIAL_GROUP_INVITATION_CANCELED SocialGroupInvitationState = 2
	SocialGroupInvitationState_SOCIAL_GROUP_INVITATION_OK       SocialGroupInvitationState = 3
)

// Enum value maps for SocialGroupInvitationState.
var (
	SocialGroupInvitationState_name = map[int32]string{
		0: "SOCIAL_GROUP_INVITATION_FAILED",
		1: "SOCIAL_GROUP_INVITATION_SENT",
		2: "SOCIAL_GROUP_INVITATION_CANCELED",
		3: "SOCIAL_GROUP_INVITATION_OK",
	}
	SocialGroupInvitationState_value = map[string]int32{
		"SOCIAL_GROUP_INVITATION_FAILED":   0,
		"SOCIAL_GROUP_INVITATION_SENT":     1,
		"SOCIAL_GROUP_INVITATION_CANCELED": 2,
		"SOCIAL_GROUP_INVITATION_OK":       3,
	}
)

func (x SocialGroupInvitationState) Enum() *SocialGroupInvitationState {
	p := new(SocialGroupInvitationState)
	*p = x
	return p
}

func (x SocialGroupInvitationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocialGroupInvitationState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[28].Descriptor()
}

func (SocialGroupInvitationState) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[28]
}

func (x SocialGroupInvitationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocialGroupInvitationState.Descriptor instead.
func (SocialGroupInvitationState) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{28}
}

type TaxCollectorState int32

const (
	TaxCollectorState_STATE_COLLECTING       TaxCollectorState = 0
	TaxCollectorState_STATE_WAITING_FOR_HELP TaxCollectorState = 1
	TaxCollectorState_STATE_FIGHTING         TaxCollectorState = 2
)

// Enum value maps for TaxCollectorState.
var (
	TaxCollectorState_name = map[int32]string{
		0: "STATE_COLLECTING",
		1: "STATE_WAITING_FOR_HELP",
		2: "STATE_FIGHTING",
	}
	TaxCollectorState_value = map[string]int32{
		"STATE_COLLECTING":       0,
		"STATE_WAITING_FOR_HELP": 1,
		"STATE_FIGHTING":         2,
	}
)

func (x TaxCollectorState) Enum() *TaxCollectorState {
	p := new(TaxCollectorState)
	*p = x
	return p
}

func (x TaxCollectorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaxCollectorState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[29].Descriptor()
}

func (TaxCollectorState) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[29]
}

func (x TaxCollectorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaxCollectorState.Descriptor instead.
func (TaxCollectorState) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{29}
}

type MountCharacteristic int32

const (
	MountCharacteristic_ENERGY    MountCharacteristic = 0
	MountCharacteristic_SERENITY  MountCharacteristic = 1
	MountCharacteristic_STAMINA   MountCharacteristic = 2
	MountCharacteristic_LOVE      MountCharacteristic = 3
	MountCharacteristic_MATURITY  MountCharacteristic = 4
	MountCharacteristic_TIREDNESS MountCharacteristic = 5
	MountCharacteristic_CARRIER   MountCharacteristic = 6
	MountCharacteristic_FERTILE   MountCharacteristic = 7
	MountCharacteristic_PREGNANT  MountCharacteristic = 8
)

// Enum value maps for MountCharacteristic.
var (
	MountCharacteristic_name = map[int32]string{
		0: "ENERGY",
		1: "SERENITY",
		2: "STAMINA",
		3: "LOVE",
		4: "MATURITY",
		5: "TIREDNESS",
		6: "CARRIER",
		7: "FERTILE",
		8: "PREGNANT",
	}
	MountCharacteristic_value = map[string]int32{
		"ENERGY":    0,
		"SERENITY":  1,
		"STAMINA":   2,
		"LOVE":      3,
		"MATURITY":  4,
		"TIREDNESS": 5,
		"CARRIER":   6,
		"FERTILE":   7,
		"PREGNANT":  8,
	}
)

func (x MountCharacteristic) Enum() *MountCharacteristic {
	p := new(MountCharacteristic)
	*p = x
	return p
}

func (x MountCharacteristic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MountCharacteristic) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[30].Descriptor()
}

func (MountCharacteristic) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[30]
}

func (x MountCharacteristic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MountCharacteristic.Descriptor instead.
func (MountCharacteristic) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{30}
}

type SpellModifierActionType int32

const (
	SpellModifierActionType_ACTION_INVALID      SpellModifierActionType = 0
	SpellModifierActionType_ACTION_BOOST        SpellModifierActionType = 1
	SpellModifierActionType_ACTION_REMOVE_BOOST SpellModifierActionType = 2
	SpellModifierActionType_ACTION_SET          SpellModifierActionType = 3
)

// Enum value maps for SpellModifierActionType.
var (
	SpellModifierActionType_name = map[int32]string{
		0: "ACTION_INVALID",
		1: "ACTION_BOOST",
		2: "ACTION_REMOVE_BOOST",
		3: "ACTION_SET",
	}
	SpellModifierActionType_value = map[string]int32{
		"ACTION_INVALID":      0,
		"ACTION_BOOST":        1,
		"ACTION_REMOVE_BOOST": 2,
		"ACTION_SET":          3,
	}
)

func (x SpellModifierActionType) Enum() *SpellModifierActionType {
	p := new(SpellModifierActionType)
	*p = x
	return p
}

func (x SpellModifierActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpellModifierActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[31].Descriptor()
}

func (SpellModifierActionType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[31]
}

func (x SpellModifierActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpellModifierActionType.Descriptor instead.
func (SpellModifierActionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{31}
}

type SpellModifierType int32

const (
	SpellModifierType_INVALID_MODIFICATION SpellModifierType = 0
	SpellModifierType_RANGE                SpellModifierType = 1
	SpellModifierType_DAMAGE               SpellModifierType = 2
	SpellModifierType_BASE_DAMAGE          SpellModifierType = 3
	SpellModifierType_HEAL_BONUS           SpellModifierType = 4
	SpellModifierType_AP_COST              SpellModifierType = 5
	SpellModifierType_CAST_INTERVAL        SpellModifierType = 6
	SpellModifierType_CRITICAL_HIT_BONUS   SpellModifierType = 7
	SpellModifierType_CAST_LINE            SpellModifierType = 8
	SpellModifierType_LOS                  SpellModifierType = 9
	SpellModifierType_MAX_CAST_PER_TURN    SpellModifierType = 10
	SpellModifierType_MAX_CAST_PER_TARGET  SpellModifierType = 11
	SpellModifierType_RANGE_MAX            SpellModifierType = 12
	SpellModifierType_RANGE_MIN            SpellModifierType = 13
	SpellModifierType_OCCUPIED_CELL        SpellModifierType = 14
	SpellModifierType_FREE_CELL            SpellModifierType = 15
	SpellModifierType_VISIBLE_TARGET       SpellModifierType = 16
	SpellModifierType_PORTAL_FREE_CELL     SpellModifierType = 17
	SpellModifierType_PORTAL_PROJECTION    SpellModifierType = 18
)

// Enum value maps for SpellModifierType.
var (
	SpellModifierType_name = map[int32]string{
		0:  "INVALID_MODIFICATION",
		1:  "RANGE",
		2:  "DAMAGE",
		3:  "BASE_DAMAGE",
		4:  "HEAL_BONUS",
		5:  "AP_COST",
		6:  "CAST_INTERVAL",
		7:  "CRITICAL_HIT_BONUS",
		8:  "CAST_LINE",
		9:  "LOS",
		10: "MAX_CAST_PER_TURN",
		11: "MAX_CAST_PER_TARGET",
		12: "RANGE_MAX",
		13: "RANGE_MIN",
		14: "OCCUPIED_CELL",
		15: "FREE_CELL",
		16: "VISIBLE_TARGET",
		17: "PORTAL_FREE_CELL",
		18: "PORTAL_PROJECTION",
	}
	SpellModifierType_value = map[string]int32{
		"INVALID_MODIFICATION": 0,
		"RANGE":                1,
		"DAMAGE":               2,
		"BASE_DAMAGE":          3,
		"HEAL_BONUS":           4,
		"AP_COST":              5,
		"CAST_INTERVAL":        6,
		"CRITICAL_HIT_BONUS":   7,
		"CAST_LINE":            8,
		"LOS":                  9,
		"MAX_CAST_PER_TURN":    10,
		"MAX_CAST_PER_TARGET":  11,
		"RANGE_MAX":            12,
		"RANGE_MIN":            13,
		"OCCUPIED_CELL":        14,
		"FREE_CELL":            15,
		"VISIBLE_TARGET":       16,
		"PORTAL_FREE_CELL":     17,
		"PORTAL_PROJECTION":    18,
	}
)

func (x SpellModifierType) Enum() *SpellModifierType {
	p := new(SpellModifierType)
	*p = x
	return p
}

func (x SpellModifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpellModifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[32].Descriptor()
}

func (SpellModifierType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[32]
}

func (x SpellModifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpellModifierType.Descriptor instead.
func (SpellModifierType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{32}
}

type RealEstateOrder int32

const (
	RealEstateOrder_PRICE_ASC RealEstateOrder = 0
	RealEstateOrder_PRICE_DSC RealEstateOrder = 1
)

// Enum value maps for RealEstateOrder.
var (
	RealEstateOrder_name = map[int32]string{
		0: "PRICE_ASC",
		1: "PRICE_DSC",
	}
	RealEstateOrder_value = map[string]int32{
		"PRICE_ASC": 0,
		"PRICE_DSC": 1,
	}
)

func (x RealEstateOrder) Enum() *RealEstateOrder {
	p := new(RealEstateOrder)
	*p = x
	return p
}

func (x RealEstateOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RealEstateOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[33].Descriptor()
}

func (RealEstateOrder) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[33]
}

func (x RealEstateOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RealEstateOrder.Descriptor instead.
func (RealEstateOrder) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{33}
}

type BreachReward_BreachRewardLock int32

const (
	BreachReward_BREACH_REWARD_LOCK_OWNER           BreachReward_BreachRewardLock = 0
	BreachReward_BREACH_REWARD_LOCK_FIGHTER         BreachReward_BreachRewardLock = 1
	BreachReward_BREACH_REWARD_LOCK_RESOURCES       BreachReward_BreachRewardLock = 2
	BreachReward_BREACH_REWARD_LOCK_CRITERION       BreachReward_BreachRewardLock = 3
	BreachReward_BREACH_REWARD_LOCK_USELESS         BreachReward_BreachRewardLock = 4
	BreachReward_BREACH_REWARD_MAX_PURCHASE_REACHED BreachReward_BreachRewardLock = 5
)

// Enum value maps for BreachReward_BreachRewardLock.
var (
	BreachReward_BreachRewardLock_name = map[int32]string{
		0: "BREACH_REWARD_LOCK_OWNER",
		1: "BREACH_REWARD_LOCK_FIGHTER",
		2: "BREACH_REWARD_LOCK_RESOURCES",
		3: "BREACH_REWARD_LOCK_CRITERION",
		4: "BREACH_REWARD_LOCK_USELESS",
		5: "BREACH_REWARD_MAX_PURCHASE_REACHED",
	}
	BreachReward_BreachRewardLock_value = map[string]int32{
		"BREACH_REWARD_LOCK_OWNER":           0,
		"BREACH_REWARD_LOCK_FIGHTER":         1,
		"BREACH_REWARD_LOCK_RESOURCES":       2,
		"BREACH_REWARD_LOCK_CRITERION":       3,
		"BREACH_REWARD_LOCK_USELESS":         4,
		"BREACH_REWARD_MAX_PURCHASE_REACHED": 5,
	}
)

func (x BreachReward_BreachRewardLock) Enum() *BreachReward_BreachRewardLock {
	p := new(BreachReward_BreachRewardLock)
	*p = x
	return p
}

func (x BreachReward_BreachRewardLock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BreachReward_BreachRewardLock) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[34].Descriptor()
}

func (BreachReward_BreachRewardLock) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[34]
}

func (x BreachReward_BreachRewardLock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BreachReward_BreachRewardLock.Descriptor instead.
func (BreachReward_BreachRewardLock) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{5, 0}
}

type Challenge_ChallengeState int32

const (
	Challenge_CHALLENGE_COMPLETED Challenge_ChallengeState = 0
	Challenge_CHALLENGE_FAILED    Challenge_ChallengeState = 1
	Challenge_CHALLENGE_RUNNING   Challenge_ChallengeState = 2
)

// Enum value maps for Challenge_ChallengeState.
var (
	Challenge_ChallengeState_name = map[int32]string{
		0: "CHALLENGE_COMPLETED",
		1: "CHALLENGE_FAILED",
		2: "CHALLENGE_RUNNING",
	}
	Challenge_ChallengeState_value = map[string]int32{
		"CHALLENGE_COMPLETED": 0,
		"CHALLENGE_FAILED":    1,
		"CHALLENGE_RUNNING":   2,
	}
)

func (x Challenge_ChallengeState) Enum() *Challenge_ChallengeState {
	p := new(Challenge_ChallengeState)
	*p = x
	return p
}

func (x Challenge_ChallengeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Challenge_ChallengeState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[35].Descriptor()
}

func (Challenge_ChallengeState) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[35]
}

func (x Challenge_ChallengeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Challenge_ChallengeState.Descriptor instead.
func (Challenge_ChallengeState) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{6, 0}
}

type Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState int32

const (
	Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_DEATH_STATE_ALIVE                Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState = 0
	Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_DEATH_STATE_DEAD                 Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState = 1
	Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_DEATH_STATE_WAITING_CONFIRMATION Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState = 2
)

// Enum value maps for Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState.
var (
	Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState_name = map[int32]string{
		0: "DEATH_STATE_ALIVE",
		1: "DEATH_STATE_DEAD",
		2: "DEATH_STATE_WAITING_CONFIRMATION",
	}
	Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState_value = map[string]int32{
		"DEATH_STATE_ALIVE":                0,
		"DEATH_STATE_DEAD":                 1,
		"DEATH_STATE_WAITING_CONFIRMATION": 2,
	}
)

func (x Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState) Enum() *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState {
	p := new(Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState)
	*p = x
	return p
}

func (x Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[36].Descriptor()
}

func (Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[36]
}

func (x Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState.Descriptor instead.
func (Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8, 0, 1, 0, 0, 0}
}

type CharacterStatus_Status int32

const (
	CharacterStatus_STATUS_OFFLINE   CharacterStatus_Status = 0
	CharacterStatus_STATUS_AVAILABLE CharacterStatus_Status = 1
	CharacterStatus_STATUS_IDLE      CharacterStatus_Status = 2
	CharacterStatus_STATUS_AFK       CharacterStatus_Status = 3
	CharacterStatus_STATUS_PRIVATE   CharacterStatus_Status = 4
	CharacterStatus_STATUS_SOLO      CharacterStatus_Status = 5
	CharacterStatus_STATUS_UNKNOWN   CharacterStatus_Status = 6
)

// Enum value maps for CharacterStatus_Status.
var (
	CharacterStatus_Status_name = map[int32]string{
		0: "STATUS_OFFLINE",
		1: "STATUS_AVAILABLE",
		2: "STATUS_IDLE",
		3: "STATUS_AFK",
		4: "STATUS_PRIVATE",
		5: "STATUS_SOLO",
		6: "STATUS_UNKNOWN",
	}
	CharacterStatus_Status_value = map[string]int32{
		"STATUS_OFFLINE":   0,
		"STATUS_AVAILABLE": 1,
		"STATUS_IDLE":      2,
		"STATUS_AFK":       3,
		"STATUS_PRIVATE":   4,
		"STATUS_SOLO":      5,
		"STATUS_UNKNOWN":   6,
	}
)

func (x CharacterStatus_Status) Enum() *CharacterStatus_Status {
	p := new(CharacterStatus_Status)
	*p = x
	return p
}

func (x CharacterStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[37].Descriptor()
}

func (CharacterStatus_Status) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[37]
}

func (x CharacterStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterStatus_Status.Descriptor instead.
func (CharacterStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{17, 0}
}

type SubEntityInformation_BindingPointCategoryEnum int32

const (
	SubEntityInformation_HOOK_POINT_CATEGORY_UNUSED             SubEntityInformation_BindingPointCategoryEnum = 0
	SubEntityInformation_HOOK_POINT_CATEGORY_PET                SubEntityInformation_BindingPointCategoryEnum = 1
	SubEntityInformation_HOOK_POINT_CATEGORY_MOUNT_DRIVER       SubEntityInformation_BindingPointCategoryEnum = 2
	SubEntityInformation_HOOK_POINT_CATEGORY_LIFTED_ENTITY      SubEntityInformation_BindingPointCategoryEnum = 3
	SubEntityInformation_HOOK_POINT_CATEGORY_BASE_BACKGROUND    SubEntityInformation_BindingPointCategoryEnum = 4
	SubEntityInformation_HOOK_POINT_CATEGORY_BASE_FOREGROUND    SubEntityInformation_BindingPointCategoryEnum = 6
	SubEntityInformation_HOOK_POINT_CATEGORY_UNDERWATER_BUBBLES SubEntityInformation_BindingPointCategoryEnum = 7
)

// Enum value maps for SubEntityInformation_BindingPointCategoryEnum.
var (
	SubEntityInformation_BindingPointCategoryEnum_name = map[int32]string{
		0: "HOOK_POINT_CATEGORY_UNUSED",
		1: "HOOK_POINT_CATEGORY_PET",
		2: "HOOK_POINT_CATEGORY_MOUNT_DRIVER",
		3: "HOOK_POINT_CATEGORY_LIFTED_ENTITY",
		4: "HOOK_POINT_CATEGORY_BASE_BACKGROUND",
		6: "HOOK_POINT_CATEGORY_BASE_FOREGROUND",
		7: "HOOK_POINT_CATEGORY_UNDERWATER_BUBBLES",
	}
	SubEntityInformation_BindingPointCategoryEnum_value = map[string]int32{
		"HOOK_POINT_CATEGORY_UNUSED":             0,
		"HOOK_POINT_CATEGORY_PET":                1,
		"HOOK_POINT_CATEGORY_MOUNT_DRIVER":       2,
		"HOOK_POINT_CATEGORY_LIFTED_ENTITY":      3,
		"HOOK_POINT_CATEGORY_BASE_BACKGROUND":    4,
		"HOOK_POINT_CATEGORY_BASE_FOREGROUND":    6,
		"HOOK_POINT_CATEGORY_UNDERWATER_BUBBLES": 7,
	}
)

func (x SubEntityInformation_BindingPointCategoryEnum) Enum() *SubEntityInformation_BindingPointCategoryEnum {
	p := new(SubEntityInformation_BindingPointCategoryEnum)
	*p = x
	return p
}

func (x SubEntityInformation_BindingPointCategoryEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubEntityInformation_BindingPointCategoryEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[38].Descriptor()
}

func (SubEntityInformation_BindingPointCategoryEnum) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[38]
}

func (x SubEntityInformation_BindingPointCategoryEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubEntityInformation_BindingPointCategoryEnum.Descriptor instead.
func (SubEntityInformation_BindingPointCategoryEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{26, 0}
}

type SocialFightInformation_Type int32

const (
	SocialFightInformation_TAX_COLLECTOR SocialFightInformation_Type = 0
	SocialFightInformation_PRISM         SocialFightInformation_Type = 1
)

// Enum value maps for SocialFightInformation_Type.
var (
	SocialFightInformation_Type_name = map[int32]string{
		0: "TAX_COLLECTOR",
		1: "PRISM",
	}
	SocialFightInformation_Type_value = map[string]int32{
		"TAX_COLLECTOR": 0,
		"PRISM":         1,
	}
)

func (x SocialFightInformation_Type) Enum() *SocialFightInformation_Type {
	p := new(SocialFightInformation_Type)
	*p = x
	return p
}

func (x SocialFightInformation_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocialFightInformation_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[39].Descriptor()
}

func (SocialFightInformation_Type) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[39]
}

func (x SocialFightInformation_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocialFightInformation_Type.Descriptor instead.
func (SocialFightInformation_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{29, 0}
}

type FightPhaseInfo_FightPhase int32

const (
	FightPhaseInfo_STARTED           FightPhaseInfo_FightPhase = 0
	FightPhaseInfo_JOINING_PHASE     FightPhaseInfo_FightPhase = 1
	FightPhaseInfo_POSITIONING_PHASE FightPhaseInfo_FightPhase = 2
)

// Enum value maps for FightPhaseInfo_FightPhase.
var (
	FightPhaseInfo_FightPhase_name = map[int32]string{
		0: "STARTED",
		1: "JOINING_PHASE",
		2: "POSITIONING_PHASE",
	}
	FightPhaseInfo_FightPhase_value = map[string]int32{
		"STARTED":           0,
		"JOINING_PHASE":     1,
		"POSITIONING_PHASE": 2,
	}
)

func (x FightPhaseInfo_FightPhase) Enum() *FightPhaseInfo_FightPhase {
	p := new(FightPhaseInfo_FightPhase)
	*p = x
	return p
}

func (x FightPhaseInfo_FightPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FightPhaseInfo_FightPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[40].Descriptor()
}

func (FightPhaseInfo_FightPhase) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[40]
}

func (x FightPhaseInfo_FightPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FightPhaseInfo_FightPhase.Descriptor instead.
func (FightPhaseInfo_FightPhase) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{31, 0}
}

type FightRemovableEffect_EffectDissipationState int32

const (
	FightRemovableEffect_DISSIPATED                  FightRemovableEffect_EffectDissipationState = 0
	FightRemovableEffect_DISSIPATED_BY_DEATH         FightRemovableEffect_EffectDissipationState = 1
	FightRemovableEffect_DISSIPATED_BY_STRONG_DISPEL FightRemovableEffect_EffectDissipationState = 2
	FightRemovableEffect_REALLY_NOT_DISSIPATED       FightRemovableEffect_EffectDissipationState = 3
)

// Enum value maps for FightRemovableEffect_EffectDissipationState.
var (
	FightRemovableEffect_EffectDissipationState_name = map[int32]string{
		0: "DISSIPATED",
		1: "DISSIPATED_BY_DEATH",
		2: "DISSIPATED_BY_STRONG_DISPEL",
		3: "REALLY_NOT_DISSIPATED",
	}
	FightRemovableEffect_EffectDissipationState_value = map[string]int32{
		"DISSIPATED":                  0,
		"DISSIPATED_BY_DEATH":         1,
		"DISSIPATED_BY_STRONG_DISPEL": 2,
		"REALLY_NOT_DISSIPATED":       3,
	}
)

func (x FightRemovableEffect_EffectDissipationState) Enum() *FightRemovableEffect_EffectDissipationState {
	p := new(FightRemovableEffect_EffectDissipationState)
	*p = x
	return p
}

func (x FightRemovableEffect_EffectDissipationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FightRemovableEffect_EffectDissipationState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[41].Descriptor()
}

func (FightRemovableEffect_EffectDissipationState) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[41]
}

func (x FightRemovableEffect_EffectDissipationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FightRemovableEffect_EffectDissipationState.Descriptor instead.
func (FightRemovableEffect_EffectDissipationState) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{50, 0}
}

type FightMark_MarkType int32

const (
	FightMark_GLYPH  FightMark_MarkType = 0
	FightMark_TRAP   FightMark_MarkType = 1
	FightMark_WALL   FightMark_MarkType = 2
	FightMark_PORTAL FightMark_MarkType = 3
	FightMark_RUNE   FightMark_MarkType = 4
)

// Enum value maps for FightMark_MarkType.
var (
	FightMark_MarkType_name = map[int32]string{
		0: "GLYPH",
		1: "TRAP",
		2: "WALL",
		3: "PORTAL",
		4: "RUNE",
	}
	FightMark_MarkType_value = map[string]int32{
		"GLYPH":  0,
		"TRAP":   1,
		"WALL":   2,
		"PORTAL": 3,
		"RUNE":   4,
	}
)

func (x FightMark_MarkType) Enum() *FightMark_MarkType {
	p := new(FightMark_MarkType)
	*p = x
	return p
}

func (x FightMark_MarkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FightMark_MarkType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[42].Descriptor()
}

func (FightMark_MarkType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[42]
}

func (x FightMark_MarkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FightMark_MarkType.Descriptor instead.
func (FightMark_MarkType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{54, 0}
}

type FightMark_MarkedCell_MarkCellsType int32

const (
	FightMark_MarkedCell_CELLS_CIRCLE FightMark_MarkedCell_MarkCellsType = 0
	FightMark_MarkedCell_CELLS_CROSS  FightMark_MarkedCell_MarkCellsType = 1
	FightMark_MarkedCell_CELLS_SQUARE FightMark_MarkedCell_MarkCellsType = 2
)

// Enum value maps for FightMark_MarkedCell_MarkCellsType.
var (
	FightMark_MarkedCell_MarkCellsType_name = map[int32]string{
		0: "CELLS_CIRCLE",
		1: "CELLS_CROSS",
		2: "CELLS_SQUARE",
	}
	FightMark_MarkedCell_MarkCellsType_value = map[string]int32{
		"CELLS_CIRCLE": 0,
		"CELLS_CROSS":  1,
		"CELLS_SQUARE": 2,
	}
)

func (x FightMark_MarkedCell_MarkCellsType) Enum() *FightMark_MarkedCell_MarkCellsType {
	p := new(FightMark_MarkedCell_MarkCellsType)
	*p = x
	return p
}

func (x FightMark_MarkedCell_MarkCellsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FightMark_MarkedCell_MarkCellsType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[43].Descriptor()
}

func (FightMark_MarkedCell_MarkCellsType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[43]
}

func (x FightMark_MarkedCell_MarkCellsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FightMark_MarkedCell_MarkCellsType.Descriptor instead.
func (FightMark_MarkedCell_MarkCellsType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{54, 0, 0}
}

type GuildLogbookEntry_ChestActivity_ChestEventType int32

const (
	GuildLogbookEntry_ChestActivity_DEPOSIT  GuildLogbookEntry_ChestActivity_ChestEventType = 0
	GuildLogbookEntry_ChestActivity_WITHDRAW GuildLogbookEntry_ChestActivity_ChestEventType = 1
	GuildLogbookEntry_ChestActivity_TRANSFER GuildLogbookEntry_ChestActivity_ChestEventType = 2
)

// Enum value maps for GuildLogbookEntry_ChestActivity_ChestEventType.
var (
	GuildLogbookEntry_ChestActivity_ChestEventType_name = map[int32]string{
		0: "DEPOSIT",
		1: "WITHDRAW",
		2: "TRANSFER",
	}
	GuildLogbookEntry_ChestActivity_ChestEventType_value = map[string]int32{
		"DEPOSIT":  0,
		"WITHDRAW": 1,
		"TRANSFER": 2,
	}
)

func (x GuildLogbookEntry_ChestActivity_ChestEventType) Enum() *GuildLogbookEntry_ChestActivity_ChestEventType {
	p := new(GuildLogbookEntry_ChestActivity_ChestEventType)
	*p = x
	return p
}

func (x GuildLogbookEntry_ChestActivity_ChestEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildLogbookEntry_ChestActivity_ChestEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[44].Descriptor()
}

func (GuildLogbookEntry_ChestActivity_ChestEventType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[44]
}

func (x GuildLogbookEntry_ChestActivity_ChestEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuildLogbookEntry_ChestActivity_ChestEventType.Descriptor instead.
func (GuildLogbookEntry_ChestActivity_ChestEventType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63, 0, 0}
}

type GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType int32

const (
	GuildLogbookEntry_PaddockActivity_BUY         GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType = 0
	GuildLogbookEntry_PaddockActivity_PUT_ON_SELL GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType = 1
	GuildLogbookEntry_PaddockActivity_SOLD        GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType = 2
)

// Enum value maps for GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType.
var (
	GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType_name = map[int32]string{
		0: "BUY",
		1: "PUT_ON_SELL",
		2: "SOLD",
	}
	GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType_value = map[string]int32{
		"BUY":         0,
		"PUT_ON_SELL": 1,
		"SOLD":        2,
	}
)

func (x GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType) Enum() *GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType {
	p := new(GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType)
	*p = x
	return p
}

func (x GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[45].Descriptor()
}

func (GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[45]
}

func (x GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType.Descriptor instead.
func (GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63, 1, 0}
}

type GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType int32

const (
	GuildLogbookEntry_PlayerFlowActivity_JOIN          GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType = 0
	GuildLogbookEntry_PlayerFlowActivity_LEAVE         GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType = 1
	GuildLogbookEntry_PlayerFlowActivity_APPLY_REFUSED GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType = 2
)

// Enum value maps for GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType.
var (
	GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType_name = map[int32]string{
		0: "JOIN",
		1: "LEAVE",
		2: "APPLY_REFUSED",
	}
	GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType_value = map[string]int32{
		"JOIN":          0,
		"LEAVE":         1,
		"APPLY_REFUSED": 2,
	}
)

func (x GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType) Enum() *GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType {
	p := new(GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType)
	*p = x
	return p
}

func (x GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[46].Descriptor()
}

func (GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[46]
}

func (x GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType.Descriptor instead.
func (GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63, 2, 0}
}

type GuildLogbookEntry_RankActivity_RankActivityType int32

const (
	GuildLogbookEntry_RankActivity_CREATION GuildLogbookEntry_RankActivity_RankActivityType = 0
	GuildLogbookEntry_RankActivity_UPDATE   GuildLogbookEntry_RankActivity_RankActivityType = 1
	GuildLogbookEntry_RankActivity_DELETE   GuildLogbookEntry_RankActivity_RankActivityType = 2
)

// Enum value maps for GuildLogbookEntry_RankActivity_RankActivityType.
var (
	GuildLogbookEntry_RankActivity_RankActivityType_name = map[int32]string{
		0: "CREATION",
		1: "UPDATE",
		2: "DELETE",
	}
	GuildLogbookEntry_RankActivity_RankActivityType_value = map[string]int32{
		"CREATION": 0,
		"UPDATE":   1,
		"DELETE":   2,
	}
)

func (x GuildLogbookEntry_RankActivity_RankActivityType) Enum() *GuildLogbookEntry_RankActivity_RankActivityType {
	p := new(GuildLogbookEntry_RankActivity_RankActivityType)
	*p = x
	return p
}

func (x GuildLogbookEntry_RankActivity_RankActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildLogbookEntry_RankActivity_RankActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[47].Descriptor()
}

func (GuildLogbookEntry_RankActivity_RankActivityType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[47]
}

func (x GuildLogbookEntry_RankActivity_RankActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuildLogbookEntry_RankActivity_RankActivityType.Descriptor instead.
func (GuildLogbookEntry_RankActivity_RankActivityType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63, 5, 0}
}

type PrismInformation_PrismState int32

const (
	PrismInformation_NORMAL     PrismInformation_PrismState = 0
	PrismInformation_WEAKENED   PrismInformation_PrismState = 1
	PrismInformation_VULNERABLE PrismInformation_PrismState = 2
	PrismInformation_PROTECTED  PrismInformation_PrismState = 3
	PrismInformation_INHIBITED  PrismInformation_PrismState = 4
)

// Enum value maps for PrismInformation_PrismState.
var (
	PrismInformation_PrismState_name = map[int32]string{
		0: "NORMAL",
		1: "WEAKENED",
		2: "VULNERABLE",
		3: "PROTECTED",
		4: "INHIBITED",
	}
	PrismInformation_PrismState_value = map[string]int32{
		"NORMAL":     0,
		"WEAKENED":   1,
		"VULNERABLE": 2,
		"PROTECTED":  3,
		"INHIBITED":  4,
	}
)

func (x PrismInformation_PrismState) Enum() *PrismInformation_PrismState {
	p := new(PrismInformation_PrismState)
	*p = x
	return p
}

func (x PrismInformation_PrismState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrismInformation_PrismState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[48].Descriptor()
}

func (PrismInformation_PrismState) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[48]
}

func (x PrismInformation_PrismState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrismInformation_PrismState.Descriptor instead.
func (PrismInformation_PrismState) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{88, 0}
}

type PrismModule_PrismModuleType int32

const (
	PrismModule_NO_MODULE  PrismModule_PrismModuleType = 0
	PrismModule_TELEPORTER PrismModule_PrismModuleType = 1
	PrismModule_RECYCLER   PrismModule_PrismModuleType = 2
)

// Enum value maps for PrismModule_PrismModuleType.
var (
	PrismModule_PrismModuleType_name = map[int32]string{
		0: "NO_MODULE",
		1: "TELEPORTER",
		2: "RECYCLER",
	}
	PrismModule_PrismModuleType_value = map[string]int32{
		"NO_MODULE":  0,
		"TELEPORTER": 1,
		"RECYCLER":   2,
	}
)

func (x PrismModule_PrismModuleType) Enum() *PrismModule_PrismModuleType {
	p := new(PrismModule_PrismModuleType)
	*p = x
	return p
}

func (x PrismModule_PrismModuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrismModule_PrismModuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[49].Descriptor()
}

func (PrismModule_PrismModuleType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[49]
}

func (x PrismModule_PrismModuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrismModule_PrismModuleType.Descriptor instead.
func (PrismModule_PrismModuleType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{90, 0}
}

type PrismCristal_PrismCristalType int32

const (
	PrismCristal_NO_CRISTAL PrismCristal_PrismCristalType = 0
	PrismCristal_PROTECTIVE PrismCristal_PrismCristalType = 1
	PrismCristal_INHIBITOR  PrismCristal_PrismCristalType = 2
)

// Enum value maps for PrismCristal_PrismCristalType.
var (
	PrismCristal_PrismCristalType_name = map[int32]string{
		0: "NO_CRISTAL",
		1: "PROTECTIVE",
		2: "INHIBITOR",
	}
	PrismCristal_PrismCristalType_value = map[string]int32{
		"NO_CRISTAL": 0,
		"PROTECTIVE": 1,
		"INHIBITOR":  2,
	}
)

func (x PrismCristal_PrismCristalType) Enum() *PrismCristal_PrismCristalType {
	p := new(PrismCristal_PrismCristalType)
	*p = x
	return p
}

func (x PrismCristal_PrismCristalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrismCristal_PrismCristalType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_common_proto_enumTypes[50].Descriptor()
}

func (PrismCristal_PrismCristalType) Type() protoreflect.EnumType {
	return &file_proto_game_common_proto_enumTypes[50]
}

func (x PrismCristal_PrismCristalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrismCristal_PrismCristalType.Descriptor instead.
func (PrismCristal_PrismCristalType) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{91, 0}
}

type AccountTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Tag      string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *AccountTag) Reset() {
	*x = AccountTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTag) ProtoMessage() {}

func (x *AccountTag) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTag.ProtoReflect.Descriptor instead.
func (*AccountTag) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{0}
}

func (x *AccountTag) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *AccountTag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type ActorPositionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId          int64                                      `protobuf:"varint,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	Disposition      *EntityDisposition                         `protobuf:"bytes,2,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ActorInformation *ActorPositionInformation_ActorInformation `protobuf:"bytes,3,opt,name=actor_information,json=actorInformation,proto3,oneof" json:"actor_information,omitempty"`
}

func (x *ActorPositionInformation) Reset() {
	*x = ActorPositionInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation) ProtoMessage() {}

func (x *ActorPositionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1}
}

func (x *ActorPositionInformation) GetActorId() int64 {
	if x != nil {
		return x.ActorId
	}
	return 0
}

func (x *ActorPositionInformation) GetDisposition() *EntityDisposition {
	if x != nil {
		return x.Disposition
	}
	return nil
}

func (x *ActorPositionInformation) GetActorInformation() *ActorPositionInformation_ActorInformation {
	if x != nil {
		return x.ActorInformation
	}
	return nil
}

type SpawnInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team     Team                      `protobuf:"varint,1,opt,name=team,proto3,enum=com.ankama.dofus.server.game.protocol.common.Team" json:"team,omitempty"`
	Alive    bool                      `protobuf:"varint,2,opt,name=alive,proto3" json:"alive,omitempty"`
	Position *ActorPositionInformation `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *SpawnInformation) Reset() {
	*x = SpawnInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpawnInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnInformation) ProtoMessage() {}

func (x *SpawnInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnInformation.ProtoReflect.Descriptor instead.
func (*SpawnInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{2}
}

func (x *SpawnInformation) GetTeam() Team {
	if x != nil {
		return x.Team
	}
	return Team_TEAM_CHALLENGER
}

func (x *SpawnInformation) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *SpawnInformation) GetPosition() *ActorPositionInformation {
	if x != nil {
		return x.Position
	}
	return nil
}

type AllianceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid             string                                       `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Tag             string                                       `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Name            *string                                      `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Emblem          *SocialEmblem                                `protobuf:"bytes,4,opt,name=emblem,proto3,oneof" json:"emblem,omitempty"`
	CardInformation *AllianceInformation_AllianceCardInformation `protobuf:"bytes,5,opt,name=card_information,json=cardInformation,proto3,oneof" json:"card_information,omitempty"`
}

func (x *AllianceInformation) Reset() {
	*x = AllianceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllianceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllianceInformation) ProtoMessage() {}

func (x *AllianceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllianceInformation.ProtoReflect.Descriptor instead.
func (*AllianceInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{3}
}

func (x *AllianceInformation) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AllianceInformation) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *AllianceInformation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AllianceInformation) GetEmblem() *SocialEmblem {
	if x != nil {
		return x.Emblem
	}
	return nil
}

func (x *AllianceInformation) GetCardInformation() *AllianceInformation_AllianceCardInformation {
	if x != nil {
		return x.CardInformation
	}
	return nil
}

type BreachBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room                int32                              `protobuf:"varint,1,opt,name=room,proto3" json:"room,omitempty"`
	Element             int32                              `protobuf:"varint,2,opt,name=element,proto3" json:"element,omitempty"`
	Bosses              []*MonsterInGroupInformation       `protobuf:"bytes,3,rep,name=bosses,proto3" json:"bosses,omitempty"`
	MapId               int64                              `protobuf:"varint,4,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Score               int32                              `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	RelativeScore       int32                              `protobuf:"varint,6,opt,name=relative_score,json=relativeScore,proto3" json:"relative_score,omitempty"`
	Monsters            []*MonsterInGroupInformation       `protobuf:"bytes,7,rep,name=monsters,proto3" json:"monsters,omitempty"`
	ExtendedInformation *BreachBranch_ExtendedBreachBranch `protobuf:"bytes,8,opt,name=extended_information,json=extendedInformation,proto3,oneof" json:"extended_information,omitempty"`
}

func (x *BreachBranch) Reset() {
	*x = BreachBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreachBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreachBranch) ProtoMessage() {}

func (x *BreachBranch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreachBranch.ProtoReflect.Descriptor instead.
func (*BreachBranch) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{4}
}

func (x *BreachBranch) GetRoom() int32 {
	if x != nil {
		return x.Room
	}
	return 0
}

func (x *BreachBranch) GetElement() int32 {
	if x != nil {
		return x.Element
	}
	return 0
}

func (x *BreachBranch) GetBosses() []*MonsterInGroupInformation {
	if x != nil {
		return x.Bosses
	}
	return nil
}

func (x *BreachBranch) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *BreachBranch) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BreachBranch) GetRelativeScore() int32 {
	if x != nil {
		return x.RelativeScore
	}
	return 0
}

func (x *BreachBranch) GetMonsters() []*MonsterInGroupInformation {
	if x != nil {
		return x.Monsters
	}
	return nil
}

func (x *BreachBranch) GetExtendedInformation() *BreachBranch_ExtendedBreachBranch {
	if x != nil {
		return x.ExtendedInformation
	}
	return nil
}

type BreachReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BuyLocks          []BreachReward_BreachRewardLock `protobuf:"varint,2,rep,packed,name=buy_locks,json=buyLocks,proto3,enum=com.ankama.dofus.server.game.protocol.common.BreachReward_BreachRewardLock" json:"buy_locks,omitempty"`
	BuyCriterion      string                          `protobuf:"bytes,3,opt,name=buy_criterion,json=buyCriterion,proto3" json:"buy_criterion,omitempty"`
	RemainingQuantity int32                           `protobuf:"varint,4,opt,name=remaining_quantity,json=remainingQuantity,proto3" json:"remaining_quantity,omitempty"`
	Price             int32                           `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *BreachReward) Reset() {
	*x = BreachReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreachReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreachReward) ProtoMessage() {}

func (x *BreachReward) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreachReward.ProtoReflect.Descriptor instead.
func (*BreachReward) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{5}
}

func (x *BreachReward) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BreachReward) GetBuyLocks() []BreachReward_BreachRewardLock {
	if x != nil {
		return x.BuyLocks
	}
	return nil
}

func (x *BreachReward) GetBuyCriterion() string {
	if x != nil {
		return x.BuyCriterion
	}
	return ""
}

func (x *BreachReward) GetRemainingQuantity() int32 {
	if x != nil {
		return x.RemainingQuantity
	}
	return 0
}

func (x *BreachReward) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId int32                    `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Targets     []*ChallengeTarget       `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	DropBonus   int32                    `protobuf:"varint,3,opt,name=drop_bonus,json=dropBonus,proto3" json:"drop_bonus,omitempty"`
	XpBonus     int32                    `protobuf:"varint,4,opt,name=xp_bonus,json=xpBonus,proto3" json:"xp_bonus,omitempty"`
	State       Challenge_ChallengeState `protobuf:"varint,5,opt,name=state,proto3,enum=com.ankama.dofus.server.game.protocol.common.Challenge_ChallengeState" json:"state,omitempty"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{6}
}

func (x *Challenge) GetChallengeId() int32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *Challenge) GetTargets() []*ChallengeTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Challenge) GetDropBonus() int32 {
	if x != nil {
		return x.DropBonus
	}
	return 0
}

func (x *Challenge) GetXpBonus() int32 {
	if x != nil {
		return x.XpBonus
	}
	return 0
}

func (x *Challenge) GetState() Challenge_ChallengeState {
	if x != nil {
		return x.State
	}
	return Challenge_CHALLENGE_COMPLETED
}

type ChallengeTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId    int64   `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetCell  int32   `protobuf:"varint,2,opt,name=target_cell,json=targetCell,proto3" json:"target_cell,omitempty"`
	AttackersId []int64 `protobuf:"varint,3,rep,packed,name=attackers_id,json=attackersId,proto3" json:"attackers_id,omitempty"`
}

func (x *ChallengeTarget) Reset() {
	*x = ChallengeTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeTarget) ProtoMessage() {}

func (x *ChallengeTarget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeTarget.ProtoReflect.Descriptor instead.
func (*ChallengeTarget) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{7}
}

func (x *ChallengeTarget) GetTargetId() int64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *ChallengeTarget) GetTargetCell() int32 {
	if x != nil {
		return x.TargetCell
	}
	return 0
}

func (x *ChallengeTarget) GetAttackersId() []int64 {
	if x != nil {
		return x.AttackersId
	}
	return nil
}

type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Complement:
	//
	//	*Character_CharacterBasicInformation_
	//	*Character_CharacterRemodelingInformation
	Complement isCharacter_Complement `protobuf_oneof:"complement"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8}
}

func (x *Character) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *Character) GetComplement() isCharacter_Complement {
	if m != nil {
		return m.Complement
	}
	return nil
}

func (x *Character) GetCharacterBasicInformation() *Character_CharacterBasicInformation {
	if x, ok := x.GetComplement().(*Character_CharacterBasicInformation_); ok {
		return x.CharacterBasicInformation
	}
	return nil
}

func (x *Character) GetCharacterRemodelingInformation() *CharacterRemodelingInformation {
	if x, ok := x.GetComplement().(*Character_CharacterRemodelingInformation); ok {
		return x.CharacterRemodelingInformation
	}
	return nil
}

type isCharacter_Complement interface {
	isCharacter_Complement()
}

type Character_CharacterBasicInformation_ struct {
	CharacterBasicInformation *Character_CharacterBasicInformation `protobuf:"bytes,2,opt,name=character_basic_information,json=characterBasicInformation,proto3,oneof"`
}

type Character_CharacterRemodelingInformation struct {
	CharacterRemodelingInformation *CharacterRemodelingInformation `protobuf:"bytes,3,opt,name=character_remodeling_information,json=characterRemodelingInformation,proto3,oneof"`
}

func (*Character_CharacterBasicInformation_) isCharacter_Complement() {}

func (*Character_CharacterRemodelingInformation) isCharacter_Complement() {}

type CharacterRemodelingInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                          string                                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BreedId                       int32                                                         `protobuf:"varint,2,opt,name=breed_id,json=breedId,proto3" json:"breed_id,omitempty"`
	Gender                        Gender                                                        `protobuf:"varint,3,opt,name=gender,proto3,enum=com.ankama.dofus.server.game.protocol.common.Gender" json:"gender,omitempty"`
	Colors                        []int32                                                       `protobuf:"varint,4,rep,packed,name=colors,proto3" json:"colors,omitempty"`
	CosmeticId                    int32                                                         `protobuf:"varint,5,opt,name=cosmeticId,proto3" json:"cosmeticId,omitempty"`
	CharacterToRemodelInformation *CharacterRemodelingInformation_CharacterToRemodelInformation `protobuf:"bytes,6,opt,name=character_to_remodel_information,json=characterToRemodelInformation,proto3,oneof" json:"character_to_remodel_information,omitempty"`
}

func (x *CharacterRemodelingInformation) Reset() {
	*x = CharacterRemodelingInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterRemodelingInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterRemodelingInformation) ProtoMessage() {}

func (x *CharacterRemodelingInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterRemodelingInformation.ProtoReflect.Descriptor instead.
func (*CharacterRemodelingInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{9}
}

func (x *CharacterRemodelingInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharacterRemodelingInformation) GetBreedId() int32 {
	if x != nil {
		return x.BreedId
	}
	return 0
}

func (x *CharacterRemodelingInformation) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_MALE
}

func (x *CharacterRemodelingInformation) GetColors() []int32 {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *CharacterRemodelingInformation) GetCosmeticId() int32 {
	if x != nil {
		return x.CosmeticId
	}
	return 0
}

func (x *CharacterRemodelingInformation) GetCharacterToRemodelInformation() *CharacterRemodelingInformation_CharacterToRemodelInformation {
	if x != nil {
		return x.CharacterToRemodelInformation
	}
	return nil
}

type PartyEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId       int32                     `protobuf:"varint,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	EntityModelId int32                     `protobuf:"varint,2,opt,name=entity_model_id,json=entityModelId,proto3" json:"entity_model_id,omitempty"`
	Look          *EntityLook               `protobuf:"bytes,3,opt,name=look,proto3" json:"look,omitempty"`
	EntityMember  *PartyEntity_EntityMember `protobuf:"bytes,4,opt,name=entity_member,json=entityMember,proto3,oneof" json:"entity_member,omitempty"`
}

func (x *PartyEntity) Reset() {
	*x = PartyEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyEntity) ProtoMessage() {}

func (x *PartyEntity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyEntity.ProtoReflect.Descriptor instead.
func (*PartyEntity) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{10}
}

func (x *PartyEntity) GetIndexId() int32 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *PartyEntity) GetEntityModelId() int32 {
	if x != nil {
		return x.EntityModelId
	}
	return 0
}

func (x *PartyEntity) GetLook() *EntityLook {
	if x != nil {
		return x.Look
	}
	return nil
}

func (x *PartyEntity) GetEntityMember() *PartyEntity_EntityMember {
	if x != nil {
		return x.EntityMember
	}
	return nil
}

type PartyUpdateCommonsInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifePoint     int32 `protobuf:"varint,1,opt,name=life_point,json=lifePoint,proto3" json:"life_point,omitempty"`
	MaxLifePoints int32 `protobuf:"varint,2,opt,name=max_life_points,json=maxLifePoints,proto3" json:"max_life_points,omitempty"`
	Prospecting   int32 `protobuf:"varint,3,opt,name=prospecting,proto3" json:"prospecting,omitempty"`
	RegenRate     int32 `protobuf:"varint,4,opt,name=regen_rate,json=regenRate,proto3" json:"regen_rate,omitempty"`
}

func (x *PartyUpdateCommonsInformation) Reset() {
	*x = PartyUpdateCommonsInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyUpdateCommonsInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyUpdateCommonsInformation) ProtoMessage() {}

func (x *PartyUpdateCommonsInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyUpdateCommonsInformation.ProtoReflect.Descriptor instead.
func (*PartyUpdateCommonsInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{11}
}

func (x *PartyUpdateCommonsInformation) GetLifePoint() int32 {
	if x != nil {
		return x.LifePoint
	}
	return 0
}

func (x *PartyUpdateCommonsInformation) GetMaxLifePoints() int32 {
	if x != nil {
		return x.MaxLifePoints
	}
	return 0
}

func (x *PartyUpdateCommonsInformation) GetProspecting() int32 {
	if x != nil {
		return x.Prospecting
	}
	return 0
}

func (x *PartyUpdateCommonsInformation) GetRegenRate() int32 {
	if x != nil {
		return x.RegenRate
	}
	return 0
}

type CharacterCharacteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacteristicId int32 `protobuf:"varint,1,opt,name=characteristic_id,json=characteristicId,proto3" json:"characteristic_id,omitempty"`
	// Types that are assignable to CharacterCharacteristic:
	//
	//	*CharacterCharacteristic_Value
	//	*CharacterCharacteristic_Detailed
	//	*CharacterCharacteristic_Usable
	CharacterCharacteristic isCharacterCharacteristic_CharacterCharacteristic `protobuf_oneof:"character_characteristic"`
}

func (x *CharacterCharacteristic) Reset() {
	*x = CharacterCharacteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterCharacteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterCharacteristic) ProtoMessage() {}

func (x *CharacterCharacteristic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterCharacteristic.ProtoReflect.Descriptor instead.
func (*CharacterCharacteristic) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{12}
}

func (x *CharacterCharacteristic) GetCharacteristicId() int32 {
	if x != nil {
		return x.CharacteristicId
	}
	return 0
}

func (m *CharacterCharacteristic) GetCharacterCharacteristic() isCharacterCharacteristic_CharacterCharacteristic {
	if m != nil {
		return m.CharacterCharacteristic
	}
	return nil
}

func (x *CharacterCharacteristic) GetValue() *CharacterCharacteristicValue {
	if x, ok := x.GetCharacterCharacteristic().(*CharacterCharacteristic_Value); ok {
		return x.Value
	}
	return nil
}

func (x *CharacterCharacteristic) GetDetailed() *CharacterCharacteristicDetailed {
	if x, ok := x.GetCharacterCharacteristic().(*CharacterCharacteristic_Detailed); ok {
		return x.Detailed
	}
	return nil
}

func (x *CharacterCharacteristic) GetUsable() *CharacterCharacteristicDetailedUsable {
	if x, ok := x.GetCharacterCharacteristic().(*CharacterCharacteristic_Usable); ok {
		return x.Usable
	}
	return nil
}

type isCharacterCharacteristic_CharacterCharacteristic interface {
	isCharacterCharacteristic_CharacterCharacteristic()
}

type CharacterCharacteristic_Value struct {
	Value *CharacterCharacteristicValue `protobuf:"bytes,2,opt,name=value,proto3,oneof"`
}

type CharacterCharacteristic_Detailed struct {
	Detailed *CharacterCharacteristicDetailed `protobuf:"bytes,3,opt,name=detailed,proto3,oneof"`
}

type CharacterCharacteristic_Usable struct {
	Usable *CharacterCharacteristicDetailedUsable `protobuf:"bytes,4,opt,name=usable,proto3,oneof"`
}

func (*CharacterCharacteristic_Value) isCharacterCharacteristic_CharacterCharacteristic() {}

func (*CharacterCharacteristic_Detailed) isCharacterCharacteristic_CharacterCharacteristic() {}

func (*CharacterCharacteristic_Usable) isCharacterCharacteristic_CharacterCharacteristic() {}

type CharacterCharacteristicValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CharacterCharacteristicValue) Reset() {
	*x = CharacterCharacteristicValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterCharacteristicValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterCharacteristicValue) ProtoMessage() {}

func (x *CharacterCharacteristicValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterCharacteristicValue.ProtoReflect.Descriptor instead.
func (*CharacterCharacteristicValue) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{13}
}

func (x *CharacterCharacteristicValue) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CharacterCharacteristicDetailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base                 int32 `protobuf:"varint,1,opt,name=base,proto3" json:"base,omitempty"`
	Additional           int32 `protobuf:"varint,2,opt,name=additional,proto3" json:"additional,omitempty"`
	ObjectsAndMountBonus int32 `protobuf:"varint,3,opt,name=objects_and_mount_bonus,json=objectsAndMountBonus,proto3" json:"objects_and_mount_bonus,omitempty"`
	AlignmentGiftBonus   int32 `protobuf:"varint,4,opt,name=alignment_gift_bonus,json=alignmentGiftBonus,proto3" json:"alignment_gift_bonus,omitempty"`
	ContextModification  int32 `protobuf:"varint,5,opt,name=context_modification,json=contextModification,proto3" json:"context_modification,omitempty"`
	Temporary            int32 `protobuf:"varint,6,opt,name=temporary,proto3" json:"temporary,omitempty"`
}

func (x *CharacterCharacteristicDetailed) Reset() {
	*x = CharacterCharacteristicDetailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterCharacteristicDetailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterCharacteristicDetailed) ProtoMessage() {}

func (x *CharacterCharacteristicDetailed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterCharacteristicDetailed.ProtoReflect.Descriptor instead.
func (*CharacterCharacteristicDetailed) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{14}
}

func (x *CharacterCharacteristicDetailed) GetBase() int32 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *CharacterCharacteristicDetailed) GetAdditional() int32 {
	if x != nil {
		return x.Additional
	}
	return 0
}

func (x *CharacterCharacteristicDetailed) GetObjectsAndMountBonus() int32 {
	if x != nil {
		return x.ObjectsAndMountBonus
	}
	return 0
}

func (x *CharacterCharacteristicDetailed) GetAlignmentGiftBonus() int32 {
	if x != nil {
		return x.AlignmentGiftBonus
	}
	return 0
}

func (x *CharacterCharacteristicDetailed) GetContextModification() int32 {
	if x != nil {
		return x.ContextModification
	}
	return 0
}

func (x *CharacterCharacteristicDetailed) GetTemporary() int32 {
	if x != nil {
		return x.Temporary
	}
	return 0
}

type CharacterCharacteristicDetailedUsable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base                 int32 `protobuf:"varint,1,opt,name=base,proto3" json:"base,omitempty"`
	Additional           int32 `protobuf:"varint,2,opt,name=additional,proto3" json:"additional,omitempty"`
	ObjectsAndMountBonus int32 `protobuf:"varint,3,opt,name=objects_and_mount_bonus,json=objectsAndMountBonus,proto3" json:"objects_and_mount_bonus,omitempty"`
	AlignmentGiftBonus   int32 `protobuf:"varint,4,opt,name=alignment_gift_bonus,json=alignmentGiftBonus,proto3" json:"alignment_gift_bonus,omitempty"`
	ContextModification  int32 `protobuf:"varint,5,opt,name=context_modification,json=contextModification,proto3" json:"context_modification,omitempty"`
	Used                 int32 `protobuf:"varint,6,opt,name=used,proto3" json:"used,omitempty"`
	Temporary            int32 `protobuf:"varint,7,opt,name=temporary,proto3" json:"temporary,omitempty"`
}

func (x *CharacterCharacteristicDetailedUsable) Reset() {
	*x = CharacterCharacteristicDetailedUsable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterCharacteristicDetailedUsable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterCharacteristicDetailedUsable) ProtoMessage() {}

func (x *CharacterCharacteristicDetailedUsable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterCharacteristicDetailedUsable.ProtoReflect.Descriptor instead.
func (*CharacterCharacteristicDetailedUsable) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{15}
}

func (x *CharacterCharacteristicDetailedUsable) GetBase() int32 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *CharacterCharacteristicDetailedUsable) GetAdditional() int32 {
	if x != nil {
		return x.Additional
	}
	return 0
}

func (x *CharacterCharacteristicDetailedUsable) GetObjectsAndMountBonus() int32 {
	if x != nil {
		return x.ObjectsAndMountBonus
	}
	return 0
}

func (x *CharacterCharacteristicDetailedUsable) GetAlignmentGiftBonus() int32 {
	if x != nil {
		return x.AlignmentGiftBonus
	}
	return 0
}

func (x *CharacterCharacteristicDetailedUsable) GetContextModification() int32 {
	if x != nil {
		return x.ContextModification
	}
	return 0
}

func (x *CharacterCharacteristicDetailedUsable) GetUsed() int32 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *CharacterCharacteristicDetailedUsable) GetTemporary() int32 {
	if x != nil {
		return x.Temporary
	}
	return 0
}

type CharacterInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId     int64            `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	Name            string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BreedId         int32            `protobuf:"varint,3,opt,name=breed_id,json=breedId,proto3" json:"breed_id,omitempty"`
	Gender          Gender           `protobuf:"varint,4,opt,name=gender,proto3,enum=com.ankama.dofus.server.game.protocol.common.Gender" json:"gender,omitempty"`
	Level           int32            `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	AccountId       int64            `protobuf:"varint,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountTag      string           `protobuf:"bytes,7,opt,name=account_tag,json=accountTag,proto3" json:"account_tag,omitempty"`
	AccountNickname string           `protobuf:"bytes,8,opt,name=account_nickname,json=accountNickname,proto3" json:"account_nickname,omitempty"`
	Status          *CharacterStatus `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CharacterInformation) Reset() {
	*x = CharacterInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterInformation) ProtoMessage() {}

func (x *CharacterInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterInformation.ProtoReflect.Descriptor instead.
func (*CharacterInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{16}
}

func (x *CharacterInformation) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *CharacterInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharacterInformation) GetBreedId() int32 {
	if x != nil {
		return x.BreedId
	}
	return 0
}

func (x *CharacterInformation) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_MALE
}

func (x *CharacterInformation) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharacterInformation) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *CharacterInformation) GetAccountTag() string {
	if x != nil {
		return x.AccountTag
	}
	return ""
}

func (x *CharacterInformation) GetAccountNickname() string {
	if x != nil {
		return x.AccountNickname
	}
	return ""
}

func (x *CharacterInformation) GetStatus() *CharacterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CharacterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  CharacterStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=com.ankama.dofus.server.game.protocol.common.CharacterStatus_Status" json:"status,omitempty"`
	Message *string                `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *CharacterStatus) Reset() {
	*x = CharacterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterStatus) ProtoMessage() {}

func (x *CharacterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterStatus.ProtoReflect.Descriptor instead.
func (*CharacterStatus) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{17}
}

func (x *CharacterStatus) GetStatus() CharacterStatus_Status {
	if x != nil {
		return x.Status
	}
	return CharacterStatus_STATUS_OFFLINE
}

func (x *CharacterStatus) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type PlayerSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PlayerSearch:
	//
	//	*PlayerSearch_SearchByCharacterName_
	//	*PlayerSearch_SearchByAccount_
	PlayerSearch isPlayerSearch_PlayerSearch `protobuf_oneof:"player_search"`
}

func (x *PlayerSearch) Reset() {
	*x = PlayerSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSearch) ProtoMessage() {}

func (x *PlayerSearch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSearch.ProtoReflect.Descriptor instead.
func (*PlayerSearch) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{18}
}

func (m *PlayerSearch) GetPlayerSearch() isPlayerSearch_PlayerSearch {
	if m != nil {
		return m.PlayerSearch
	}
	return nil
}

func (x *PlayerSearch) GetSearchByCharacterName() *PlayerSearch_SearchByCharacterName {
	if x, ok := x.GetPlayerSearch().(*PlayerSearch_SearchByCharacterName_); ok {
		return x.SearchByCharacterName
	}
	return nil
}

func (x *PlayerSearch) GetSearchByAccount() *PlayerSearch_SearchByAccount {
	if x, ok := x.GetPlayerSearch().(*PlayerSearch_SearchByAccount_); ok {
		return x.SearchByAccount
	}
	return nil
}

type isPlayerSearch_PlayerSearch interface {
	isPlayerSearch_PlayerSearch()
}

type PlayerSearch_SearchByCharacterName_ struct {
	SearchByCharacterName *PlayerSearch_SearchByCharacterName `protobuf:"bytes,1,opt,name=search_by_character_name,json=searchByCharacterName,proto3,oneof"`
}

type PlayerSearch_SearchByAccount_ struct {
	SearchByAccount *PlayerSearch_SearchByAccount `protobuf:"bytes,2,opt,name=search_by_account,json=searchByAccount,proto3,oneof"`
}

func (*PlayerSearch_SearchByCharacterName_) isPlayerSearch_PlayerSearch() {}

func (*PlayerSearch_SearchByAccount_) isPlayerSearch_PlayerSearch() {}

type AllianceMemberInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Information *Character `protobuf:"bytes,1,opt,name=information,proto3" json:"information,omitempty"`
	AvaRoleId   int32      `protobuf:"varint,2,opt,name=ava_role_id,json=avaRoleId,proto3" json:"ava_role_id,omitempty"`
}

func (x *AllianceMemberInformation) Reset() {
	*x = AllianceMemberInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllianceMemberInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllianceMemberInformation) ProtoMessage() {}

func (x *AllianceMemberInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllianceMemberInformation.ProtoReflect.Descriptor instead.
func (*AllianceMemberInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{19}
}

func (x *AllianceMemberInformation) GetInformation() *Character {
	if x != nil {
		return x.Information
	}
	return nil
}

func (x *AllianceMemberInformation) GetAvaRoleId() int32 {
	if x != nil {
		return x.AvaRoleId
	}
	return 0
}

type SocialApplicationInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInformation *CharacterInformation `protobuf:"bytes,1,opt,name=player_information,json=playerInformation,proto3" json:"player_information,omitempty"`
	ApplyText         string                `protobuf:"bytes,2,opt,name=apply_text,json=applyText,proto3" json:"apply_text,omitempty"`
	CreationDate      int64                 `protobuf:"varint,3,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (x *SocialApplicationInformation) Reset() {
	*x = SocialApplicationInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialApplicationInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialApplicationInformation) ProtoMessage() {}

func (x *SocialApplicationInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialApplicationInformation.ProtoReflect.Descriptor instead.
func (*SocialApplicationInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{20}
}

func (x *SocialApplicationInformation) GetPlayerInformation() *CharacterInformation {
	if x != nil {
		return x.PlayerInformation
	}
	return nil
}

func (x *SocialApplicationInformation) GetApplyText() string {
	if x != nil {
		return x.ApplyText
	}
	return ""
}

func (x *SocialApplicationInformation) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

type CharacterCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experience               int64                      `protobuf:"varint,1,opt,name=experience,proto3" json:"experience,omitempty"`
	ExperienceLevelFloor     int64                      `protobuf:"varint,2,opt,name=experience_level_floor,json=experienceLevelFloor,proto3" json:"experience_level_floor,omitempty"`
	ExperienceNextLevelFloor int64                      `protobuf:"varint,3,opt,name=experience_next_level_floor,json=experienceNextLevelFloor,proto3" json:"experience_next_level_floor,omitempty"`
	ExperienceBonusLimit     int64                      `protobuf:"varint,4,opt,name=experience_bonus_limit,json=experienceBonusLimit,proto3" json:"experience_bonus_limit,omitempty"`
	Kamas                    int64                      `protobuf:"varint,5,opt,name=kamas,proto3" json:"kamas,omitempty"`
	AlignmentInformation     *AlignmentInformation      `protobuf:"bytes,6,opt,name=alignment_information,json=alignmentInformation,proto3" json:"alignment_information,omitempty"`
	CriticalHitWeapon        int32                      `protobuf:"varint,7,opt,name=critical_hit_weapon,json=criticalHitWeapon,proto3" json:"critical_hit_weapon,omitempty"`
	Characteristics          []*CharacterCharacteristic `protobuf:"bytes,8,rep,name=characteristics,proto3" json:"characteristics,omitempty"`
	SpellModifiers           []*SpellModifier           `protobuf:"bytes,9,rep,name=spell_modifiers,json=spellModifiers,proto3" json:"spell_modifiers,omitempty"`
	ProbationTime            int64                      `protobuf:"varint,10,opt,name=probation_time,json=probationTime,proto3" json:"probation_time,omitempty"`
}

func (x *CharacterCharacteristics) Reset() {
	*x = CharacterCharacteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterCharacteristics) ProtoMessage() {}

func (x *CharacterCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterCharacteristics.ProtoReflect.Descriptor instead.
func (*CharacterCharacteristics) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{21}
}

func (x *CharacterCharacteristics) GetExperience() int64 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *CharacterCharacteristics) GetExperienceLevelFloor() int64 {
	if x != nil {
		return x.ExperienceLevelFloor
	}
	return 0
}

func (x *CharacterCharacteristics) GetExperienceNextLevelFloor() int64 {
	if x != nil {
		return x.ExperienceNextLevelFloor
	}
	return 0
}

func (x *CharacterCharacteristics) GetExperienceBonusLimit() int64 {
	if x != nil {
		return x.ExperienceBonusLimit
	}
	return 0
}

func (x *CharacterCharacteristics) GetKamas() int64 {
	if x != nil {
		return x.Kamas
	}
	return 0
}

func (x *CharacterCharacteristics) GetAlignmentInformation() *AlignmentInformation {
	if x != nil {
		return x.AlignmentInformation
	}
	return nil
}

func (x *CharacterCharacteristics) GetCriticalHitWeapon() int32 {
	if x != nil {
		return x.CriticalHitWeapon
	}
	return 0
}

func (x *CharacterCharacteristics) GetCharacteristics() []*CharacterCharacteristic {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

func (x *CharacterCharacteristics) GetSpellModifiers() []*SpellModifier {
	if x != nil {
		return x.SpellModifiers
	}
	return nil
}

func (x *CharacterCharacteristics) GetProbationTime() int64 {
	if x != nil {
		return x.ProbationTime
	}
	return 0
}

type AlignmentInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alignment            Alignment                                          `protobuf:"varint,1,opt,name=alignment,proto3,enum=com.ankama.dofus.server.game.protocol.common.Alignment" json:"alignment,omitempty"`
	AlignmentQuestNumber int32                                              `protobuf:"varint,2,opt,name=alignment_quest_number,json=alignmentQuestNumber,proto3" json:"alignment_quest_number,omitempty"`
	AlignmentGrade       int32                                              `protobuf:"varint,3,opt,name=alignment_grade,json=alignmentGrade,proto3" json:"alignment_grade,omitempty"`
	CharacterId          int64                                              `protobuf:"varint,4,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	CharacterLevel       int64                                              `protobuf:"varint,5,opt,name=character_level,json=characterLevel,proto3" json:"character_level,omitempty"`
	ExtendedInformation  *AlignmentInformation_AlignmentExtendedInformation `protobuf:"bytes,6,opt,name=extended_information,json=extendedInformation,proto3,oneof" json:"extended_information,omitempty"`
}

func (x *AlignmentInformation) Reset() {
	*x = AlignmentInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignmentInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignmentInformation) ProtoMessage() {}

func (x *AlignmentInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignmentInformation.ProtoReflect.Descriptor instead.
func (*AlignmentInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{22}
}

func (x *AlignmentInformation) GetAlignment() Alignment {
	if x != nil {
		return x.Alignment
	}
	return Alignment_UNKNOWN
}

func (x *AlignmentInformation) GetAlignmentQuestNumber() int32 {
	if x != nil {
		return x.AlignmentQuestNumber
	}
	return 0
}

func (x *AlignmentInformation) GetAlignmentGrade() int32 {
	if x != nil {
		return x.AlignmentGrade
	}
	return 0
}

func (x *AlignmentInformation) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *AlignmentInformation) GetCharacterLevel() int64 {
	if x != nil {
		return x.CharacterLevel
	}
	return 0
}

func (x *AlignmentInformation) GetExtendedInformation() *AlignmentInformation_AlignmentExtendedInformation {
	if x != nil {
		return x.ExtendedInformation
	}
	return nil
}

type InteractiveElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId      int32                                         `protobuf:"varint,1,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	ElementTypeId  int32                                         `protobuf:"varint,2,opt,name=element_type_id,json=elementTypeId,proto3" json:"element_type_id,omitempty"`
	EnabledSkills  []*InteractiveElement_InteractiveElementSkill `protobuf:"bytes,3,rep,name=enabled_skills,json=enabledSkills,proto3" json:"enabled_skills,omitempty"`
	DisabledSkills []*InteractiveElement_InteractiveElementSkill `protobuf:"bytes,4,rep,name=disabled_skills,json=disabledSkills,proto3" json:"disabled_skills,omitempty"`
	OnCurrentMap   bool                                          `protobuf:"varint,5,opt,name=on_current_map,json=onCurrentMap,proto3" json:"on_current_map,omitempty"`
	AgeBonus       *int32                                        `protobuf:"varint,6,opt,name=age_bonus,json=ageBonus,proto3,oneof" json:"age_bonus,omitempty"`
}

func (x *InteractiveElement) Reset() {
	*x = InteractiveElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractiveElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractiveElement) ProtoMessage() {}

func (x *InteractiveElement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractiveElement.ProtoReflect.Descriptor instead.
func (*InteractiveElement) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{23}
}

func (x *InteractiveElement) GetElementId() int32 {
	if x != nil {
		return x.ElementId
	}
	return 0
}

func (x *InteractiveElement) GetElementTypeId() int32 {
	if x != nil {
		return x.ElementTypeId
	}
	return 0
}

func (x *InteractiveElement) GetEnabledSkills() []*InteractiveElement_InteractiveElementSkill {
	if x != nil {
		return x.EnabledSkills
	}
	return nil
}

func (x *InteractiveElement) GetDisabledSkills() []*InteractiveElement_InteractiveElementSkill {
	if x != nil {
		return x.DisabledSkills
	}
	return nil
}

func (x *InteractiveElement) GetOnCurrentMap() bool {
	if x != nil {
		return x.OnCurrentMap
	}
	return false
}

func (x *InteractiveElement) GetAgeBonus() int32 {
	if x != nil && x.AgeBonus != nil {
		return *x.AgeBonus
	}
	return 0
}

type StatedElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId    int32 `protobuf:"varint,1,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	CellId       int32 `protobuf:"varint,2,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	State        int32 `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	OnCurrentMap bool  `protobuf:"varint,4,opt,name=on_current_map,json=onCurrentMap,proto3" json:"on_current_map,omitempty"`
}

func (x *StatedElement) Reset() {
	*x = StatedElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatedElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatedElement) ProtoMessage() {}

func (x *StatedElement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatedElement.ProtoReflect.Descriptor instead.
func (*StatedElement) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{24}
}

func (x *StatedElement) GetElementId() int32 {
	if x != nil {
		return x.ElementId
	}
	return 0
}

func (x *StatedElement) GetCellId() int32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *StatedElement) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *StatedElement) GetOnCurrentMap() bool {
	if x != nil {
		return x.OnCurrentMap
	}
	return false
}

type EntityLook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonesId       int32                   `protobuf:"varint,1,opt,name=bones_id,json=bonesId,proto3" json:"bones_id,omitempty"`
	Skins         []int32                 `protobuf:"varint,2,rep,packed,name=skins,proto3" json:"skins,omitempty"`
	IndexedColors []int32                 `protobuf:"varint,3,rep,packed,name=indexed_colors,json=indexedColors,proto3" json:"indexed_colors,omitempty"`
	Scales        []int32                 `protobuf:"varint,4,rep,packed,name=scales,proto3" json:"scales,omitempty"`
	SubEntities   []*SubEntityInformation `protobuf:"bytes,5,rep,name=sub_entities,json=subEntities,proto3" json:"sub_entities,omitempty"`
}

func (x *EntityLook) Reset() {
	*x = EntityLook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityLook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLook) ProtoMessage() {}

func (x *EntityLook) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLook.ProtoReflect.Descriptor instead.
func (*EntityLook) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{25}
}

func (x *EntityLook) GetBonesId() int32 {
	if x != nil {
		return x.BonesId
	}
	return 0
}

func (x *EntityLook) GetSkins() []int32 {
	if x != nil {
		return x.Skins
	}
	return nil
}

func (x *EntityLook) GetIndexedColors() []int32 {
	if x != nil {
		return x.IndexedColors
	}
	return nil
}

func (x *EntityLook) GetScales() []int32 {
	if x != nil {
		return x.Scales
	}
	return nil
}

func (x *EntityLook) GetSubEntities() []*SubEntityInformation {
	if x != nil {
		return x.SubEntities
	}
	return nil
}

type SubEntityInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindingPointCategory SubEntityInformation_BindingPointCategoryEnum `protobuf:"varint,1,opt,name=binding_point_category,json=bindingPointCategory,proto3,enum=com.ankama.dofus.server.game.protocol.common.SubEntityInformation_BindingPointCategoryEnum" json:"binding_point_category,omitempty"`
	BindingPointIndex    int32                                         `protobuf:"varint,2,opt,name=binding_point_index,json=bindingPointIndex,proto3" json:"binding_point_index,omitempty"`
	SubEntityLook        *EntityLook                                   `protobuf:"bytes,3,opt,name=sub_entity_look,json=subEntityLook,proto3" json:"sub_entity_look,omitempty"`
}

func (x *SubEntityInformation) Reset() {
	*x = SubEntityInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubEntityInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubEntityInformation) ProtoMessage() {}

func (x *SubEntityInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubEntityInformation.ProtoReflect.Descriptor instead.
func (*SubEntityInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{26}
}

func (x *SubEntityInformation) GetBindingPointCategory() SubEntityInformation_BindingPointCategoryEnum {
	if x != nil {
		return x.BindingPointCategory
	}
	return SubEntityInformation_HOOK_POINT_CATEGORY_UNUSED
}

func (x *SubEntityInformation) GetBindingPointIndex() int32 {
	if x != nil {
		return x.BindingPointIndex
	}
	return 0
}

func (x *SubEntityInformation) GetSubEntityLook() *EntityLook {
	if x != nil {
		return x.SubEntityLook
	}
	return nil
}

type EntityDisposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction           Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=com.ankama.dofus.server.game.protocol.common.Direction" json:"direction,omitempty"`
	EntityId            *int64    `protobuf:"varint,1,opt,name=entity_id,json=entityId,proto3,oneof" json:"entity_id,omitempty"`
	CellId              *int32    `protobuf:"varint,2,opt,name=cell_id,json=cellId,proto3,oneof" json:"cell_id,omitempty"`
	CarryingCharacterId *int64    `protobuf:"varint,4,opt,name=carrying_character_id,json=carryingCharacterId,proto3,oneof" json:"carrying_character_id,omitempty"`
}

func (x *EntityDisposition) Reset() {
	*x = EntityDisposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityDisposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDisposition) ProtoMessage() {}

func (x *EntityDisposition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDisposition.ProtoReflect.Descriptor instead.
func (*EntityDisposition) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{27}
}

func (x *EntityDisposition) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_DIRECTION_EAST
}

func (x *EntityDisposition) GetEntityId() int64 {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return 0
}

func (x *EntityDisposition) GetCellId() int32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *EntityDisposition) GetCarryingCharacterId() int64 {
	if x != nil && x.CarryingCharacterId != nil {
		return *x.CarryingCharacterId
	}
	return 0
}

type NamedPartyTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team      Team   `protobuf:"varint,1,opt,name=team,proto3,enum=com.ankama.dofus.server.game.protocol.common.Team" json:"team,omitempty"`
	PartyName string `protobuf:"bytes,2,opt,name=party_name,json=partyName,proto3" json:"party_name,omitempty"`
}

func (x *NamedPartyTeam) Reset() {
	*x = NamedPartyTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedPartyTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedPartyTeam) ProtoMessage() {}

func (x *NamedPartyTeam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedPartyTeam.ProtoReflect.Descriptor instead.
func (*NamedPartyTeam) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{28}
}

func (x *NamedPartyTeam) GetTeam() Team {
	if x != nil {
		return x.Team
	}
	return Team_TEAM_CHALLENGER
}

func (x *NamedPartyTeam) GetPartyName() string {
	if x != nil {
		return x.PartyName
	}
	return ""
}

type SocialFightInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId   int32                       `protobuf:"varint,1,opt,name=fight_id,json=fightId,proto3" json:"fight_id,omitempty"`
	FightType SocialFightInformation_Type `protobuf:"varint,2,opt,name=fight_type,json=fightType,proto3,enum=com.ankama.dofus.server.game.protocol.common.SocialFightInformation_Type" json:"fight_type,omitempty"`
	MapId     int64                       `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (x *SocialFightInformation) Reset() {
	*x = SocialFightInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialFightInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialFightInformation) ProtoMessage() {}

func (x *SocialFightInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialFightInformation.ProtoReflect.Descriptor instead.
func (*SocialFightInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{29}
}

func (x *SocialFightInformation) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *SocialFightInformation) GetFightType() SocialFightInformation_Type {
	if x != nil {
		return x.FightType
	}
	return SocialFightInformation_TAX_COLLECTOR
}

func (x *SocialFightInformation) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

type SocialFight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocialFightInfo *SocialFightInformation `protobuf:"bytes,1,opt,name=social_fight_info,json=socialFightInfo,proto3" json:"social_fight_info,omitempty"`
	Attackers       []*Character            `protobuf:"bytes,2,rep,name=attackers,proto3" json:"attackers,omitempty"`
	Defenders       []*Character            `protobuf:"bytes,3,rep,name=defenders,proto3" json:"defenders,omitempty"`
	Phase           *FightPhaseInfo         `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (x *SocialFight) Reset() {
	*x = SocialFight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialFight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialFight) ProtoMessage() {}

func (x *SocialFight) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialFight.ProtoReflect.Descriptor instead.
func (*SocialFight) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{30}
}

func (x *SocialFight) GetSocialFightInfo() *SocialFightInformation {
	if x != nil {
		return x.SocialFightInfo
	}
	return nil
}

func (x *SocialFight) GetAttackers() []*Character {
	if x != nil {
		return x.Attackers
	}
	return nil
}

func (x *SocialFight) GetDefenders() []*Character {
	if x != nil {
		return x.Defenders
	}
	return nil
}

func (x *SocialFight) GetPhase() *FightPhaseInfo {
	if x != nil {
		return x.Phase
	}
	return nil
}

type FightPhaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase             FightPhaseInfo_FightPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightPhaseInfo_FightPhase" json:"phase,omitempty"`
	PhaseEndTimestamp int64                     `protobuf:"varint,2,opt,name=phase_end_timestamp,json=phaseEndTimestamp,proto3" json:"phase_end_timestamp,omitempty"`
}

func (x *FightPhaseInfo) Reset() {
	*x = FightPhaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPhaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPhaseInfo) ProtoMessage() {}

func (x *FightPhaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPhaseInfo.ProtoReflect.Descriptor instead.
func (*FightPhaseInfo) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{31}
}

func (x *FightPhaseInfo) GetPhase() FightPhaseInfo_FightPhase {
	if x != nil {
		return x.Phase
	}
	return FightPhaseInfo_STARTED
}

func (x *FightPhaseInfo) GetPhaseEndTimestamp() int64 {
	if x != nil {
		return x.PhaseEndTimestamp
	}
	return 0
}

type FightOptionsInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSecret            bool `protobuf:"varint,1,opt,name=is_secret,json=isSecret,proto3" json:"is_secret,omitempty"`
	IsRestrictedToParty bool `protobuf:"varint,2,opt,name=is_restricted_to_party,json=isRestrictedToParty,proto3" json:"is_restricted_to_party,omitempty"`
	IsClosed            bool `protobuf:"varint,3,opt,name=is_closed,json=isClosed,proto3" json:"is_closed,omitempty"`
	IsAskingForHelp     bool `protobuf:"varint,4,opt,name=is_asking_for_help,json=isAskingForHelp,proto3" json:"is_asking_for_help,omitempty"`
}

func (x *FightOptionsInformation) Reset() {
	*x = FightOptionsInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightOptionsInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightOptionsInformation) ProtoMessage() {}

func (x *FightOptionsInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightOptionsInformation.ProtoReflect.Descriptor instead.
func (*FightOptionsInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{32}
}

func (x *FightOptionsInformation) GetIsSecret() bool {
	if x != nil {
		return x.IsSecret
	}
	return false
}

func (x *FightOptionsInformation) GetIsRestrictedToParty() bool {
	if x != nil {
		return x.IsRestrictedToParty
	}
	return false
}

func (x *FightOptionsInformation) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *FightOptionsInformation) GetIsAskingForHelp() bool {
	if x != nil {
		return x.IsAskingForHelp
	}
	return false
}

type FighterLightInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Wave    int32  `protobuf:"varint,2,opt,name=wave,proto3" json:"wave,omitempty"`
	Level   int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	BreedId int32  `protobuf:"varint,4,opt,name=breed_id,json=breedId,proto3" json:"breed_id,omitempty"`
	Gender  Gender `protobuf:"varint,5,opt,name=gender,proto3,enum=com.ankama.dofus.server.game.protocol.common.Gender" json:"gender,omitempty"`
	Alive   bool   `protobuf:"varint,6,opt,name=alive,proto3" json:"alive,omitempty"`
	// Types that are assignable to FighterInfo:
	//
	//	*FighterLightInformation_MonsterInformation
	//	*FighterLightInformation_EntityInformation
	//	*FighterLightInformation_TaxCollectorInformation
	//	*FighterLightInformation_NamedInformation
	FighterInfo isFighterLightInformation_FighterInfo `protobuf_oneof:"fighter_info"`
}

func (x *FighterLightInformation) Reset() {
	*x = FighterLightInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FighterLightInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FighterLightInformation) ProtoMessage() {}

func (x *FighterLightInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FighterLightInformation.ProtoReflect.Descriptor instead.
func (*FighterLightInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{33}
}

func (x *FighterLightInformation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FighterLightInformation) GetWave() int32 {
	if x != nil {
		return x.Wave
	}
	return 0
}

func (x *FighterLightInformation) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FighterLightInformation) GetBreedId() int32 {
	if x != nil {
		return x.BreedId
	}
	return 0
}

func (x *FighterLightInformation) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_MALE
}

func (x *FighterLightInformation) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (m *FighterLightInformation) GetFighterInfo() isFighterLightInformation_FighterInfo {
	if m != nil {
		return m.FighterInfo
	}
	return nil
}

func (x *FighterLightInformation) GetMonsterInformation() *FighterMonsterLightInformation {
	if x, ok := x.GetFighterInfo().(*FighterLightInformation_MonsterInformation); ok {
		return x.MonsterInformation
	}
	return nil
}

func (x *FighterLightInformation) GetEntityInformation() *FighterEntityLightInformation {
	if x, ok := x.GetFighterInfo().(*FighterLightInformation_EntityInformation); ok {
		return x.EntityInformation
	}
	return nil
}

func (x *FighterLightInformation) GetTaxCollectorInformation() *FighterTaxCollectorLightInformation {
	if x, ok := x.GetFighterInfo().(*FighterLightInformation_TaxCollectorInformation); ok {
		return x.TaxCollectorInformation
	}
	return nil
}

func (x *FighterLightInformation) GetNamedInformation() *FighterNamedLightInformation {
	if x, ok := x.GetFighterInfo().(*FighterLightInformation_NamedInformation); ok {
		return x.NamedInformation
	}
	return nil
}

type isFighterLightInformation_FighterInfo interface {
	isFighterLightInformation_FighterInfo()
}

type FighterLightInformation_MonsterInformation struct {
	MonsterInformation *FighterMonsterLightInformation `protobuf:"bytes,7,opt,name=monster_information,json=monsterInformation,proto3,oneof"`
}

type FighterLightInformation_EntityInformation struct {
	EntityInformation *FighterEntityLightInformation `protobuf:"bytes,8,opt,name=entity_information,json=entityInformation,proto3,oneof"`
}

type FighterLightInformation_TaxCollectorInformation struct {
	TaxCollectorInformation *FighterTaxCollectorLightInformation `protobuf:"bytes,9,opt,name=tax_collector_information,json=taxCollectorInformation,proto3,oneof"`
}

type FighterLightInformation_NamedInformation struct {
	NamedInformation *FighterNamedLightInformation `protobuf:"bytes,10,opt,name=named_information,json=namedInformation,proto3,oneof"`
}

func (*FighterLightInformation_MonsterInformation) isFighterLightInformation_FighterInfo() {}

func (*FighterLightInformation_EntityInformation) isFighterLightInformation_FighterInfo() {}

func (*FighterLightInformation_TaxCollectorInformation) isFighterLightInformation_FighterInfo() {}

func (*FighterLightInformation_NamedInformation) isFighterLightInformation_FighterInfo() {}

type FighterMonsterLightInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterGid int32 `protobuf:"varint,1,opt,name=monster_gid,json=monsterGid,proto3" json:"monster_gid,omitempty"`
}

func (x *FighterMonsterLightInformation) Reset() {
	*x = FighterMonsterLightInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FighterMonsterLightInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FighterMonsterLightInformation) ProtoMessage() {}

func (x *FighterMonsterLightInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FighterMonsterLightInformation.ProtoReflect.Descriptor instead.
func (*FighterMonsterLightInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{34}
}

func (x *FighterMonsterLightInformation) GetMonsterGid() int32 {
	if x != nil {
		return x.MonsterGid
	}
	return 0
}

type FighterEntityLightInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityModelId int32 `protobuf:"varint,1,opt,name=entity_model_id,json=entityModelId,proto3" json:"entity_model_id,omitempty"`
	MasterId      int64 `protobuf:"varint,2,opt,name=master_id,json=masterId,proto3" json:"master_id,omitempty"`
}

func (x *FighterEntityLightInformation) Reset() {
	*x = FighterEntityLightInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FighterEntityLightInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FighterEntityLightInformation) ProtoMessage() {}

func (x *FighterEntityLightInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FighterEntityLightInformation.ProtoReflect.Descriptor instead.
func (*FighterEntityLightInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{35}
}

func (x *FighterEntityLightInformation) GetEntityModelId() int32 {
	if x != nil {
		return x.EntityModelId
	}
	return 0
}

func (x *FighterEntityLightInformation) GetMasterId() int64 {
	if x != nil {
		return x.MasterId
	}
	return 0
}

type FighterTaxCollectorLightInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstNameId int32 `protobuf:"varint,1,opt,name=first_name_id,json=firstNameId,proto3" json:"first_name_id,omitempty"`
	LastNameId  int32 `protobuf:"varint,2,opt,name=last_name_id,json=lastNameId,proto3" json:"last_name_id,omitempty"`
}

func (x *FighterTaxCollectorLightInformation) Reset() {
	*x = FighterTaxCollectorLightInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FighterTaxCollectorLightInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FighterTaxCollectorLightInformation) ProtoMessage() {}

func (x *FighterTaxCollectorLightInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FighterTaxCollectorLightInformation.ProtoReflect.Descriptor instead.
func (*FighterTaxCollectorLightInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{36}
}

func (x *FighterTaxCollectorLightInformation) GetFirstNameId() int32 {
	if x != nil {
		return x.FirstNameId
	}
	return 0
}

func (x *FighterTaxCollectorLightInformation) GetLastNameId() int32 {
	if x != nil {
		return x.LastNameId
	}
	return 0
}

type FighterNamedLightInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FighterNamedLightInformation) Reset() {
	*x = FighterNamedLightInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FighterNamedLightInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FighterNamedLightInformation) ProtoMessage() {}

func (x *FighterNamedLightInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FighterNamedLightInformation.ProtoReflect.Descriptor instead.
func (*FighterNamedLightInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{37}
}

func (x *FighterNamedLightInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FightCommonInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId          int32                      `protobuf:"varint,1,opt,name=fight_id,json=fightId,proto3" json:"fight_id,omitempty"`
	Type             FightType                  `protobuf:"varint,2,opt,name=type,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightType" json:"type,omitempty"`
	TeamsInformation []*FightTeamInformation    `protobuf:"bytes,3,rep,name=teams_information,json=teamsInformation,proto3" json:"teams_information,omitempty"`
	TeamsPosition    []int32                    `protobuf:"varint,4,rep,packed,name=teams_position,json=teamsPosition,proto3" json:"teams_position,omitempty"`
	TeamsOptions     []*FightOptionsInformation `protobuf:"bytes,5,rep,name=teams_options,json=teamsOptions,proto3" json:"teams_options,omitempty"`
}

func (x *FightCommonInformation) Reset() {
	*x = FightCommonInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightCommonInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightCommonInformation) ProtoMessage() {}

func (x *FightCommonInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightCommonInformation.ProtoReflect.Descriptor instead.
func (*FightCommonInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{38}
}

func (x *FightCommonInformation) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *FightCommonInformation) GetType() FightType {
	if x != nil {
		return x.Type
	}
	return FightType_FIGHT_TYPE_CHALLENGE
}

func (x *FightCommonInformation) GetTeamsInformation() []*FightTeamInformation {
	if x != nil {
		return x.TeamsInformation
	}
	return nil
}

func (x *FightCommonInformation) GetTeamsPosition() []int32 {
	if x != nil {
		return x.TeamsPosition
	}
	return nil
}

func (x *FightCommonInformation) GetTeamsOptions() []*FightOptionsInformation {
	if x != nil {
		return x.TeamsOptions
	}
	return nil
}

type FightTeamInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team     Team      `protobuf:"varint,1,opt,name=team,proto3,enum=com.ankama.dofus.server.game.protocol.common.Team" json:"team,omitempty"`
	LeaderId int64     `protobuf:"varint,2,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	Side     Alignment `protobuf:"varint,3,opt,name=side,proto3,enum=com.ankama.dofus.server.game.protocol.common.Alignment" json:"side,omitempty"`
	Type     TeamType  `protobuf:"varint,4,opt,name=type,proto3,enum=com.ankama.dofus.server.game.protocol.common.TeamType" json:"type,omitempty"`
	Waves    int32     `protobuf:"varint,5,opt,name=waves,proto3" json:"waves,omitempty"`
	// Types that are assignable to TeamInformation:
	//
	//	*FightTeamInformation_TeamMembers
	//	*FightTeamInformation_LightInformation
	TeamInformation isFightTeamInformation_TeamInformation `protobuf_oneof:"team_information"`
}

func (x *FightTeamInformation) Reset() {
	*x = FightTeamInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamInformation) ProtoMessage() {}

func (x *FightTeamInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamInformation.ProtoReflect.Descriptor instead.
func (*FightTeamInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{39}
}

func (x *FightTeamInformation) GetTeam() Team {
	if x != nil {
		return x.Team
	}
	return Team_TEAM_CHALLENGER
}

func (x *FightTeamInformation) GetLeaderId() int64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

func (x *FightTeamInformation) GetSide() Alignment {
	if x != nil {
		return x.Side
	}
	return Alignment_UNKNOWN
}

func (x *FightTeamInformation) GetType() TeamType {
	if x != nil {
		return x.Type
	}
	return TeamType_TEAM_TYPE_PLAYER
}

func (x *FightTeamInformation) GetWaves() int32 {
	if x != nil {
		return x.Waves
	}
	return 0
}

func (m *FightTeamInformation) GetTeamInformation() isFightTeamInformation_TeamInformation {
	if m != nil {
		return m.TeamInformation
	}
	return nil
}

func (x *FightTeamInformation) GetTeamMembers() *FightTeamMembersInformation {
	if x, ok := x.GetTeamInformation().(*FightTeamInformation_TeamMembers); ok {
		return x.TeamMembers
	}
	return nil
}

func (x *FightTeamInformation) GetLightInformation() *FightTeamLightInformation {
	if x, ok := x.GetTeamInformation().(*FightTeamInformation_LightInformation); ok {
		return x.LightInformation
	}
	return nil
}

type isFightTeamInformation_TeamInformation interface {
	isFightTeamInformation_TeamInformation()
}

type FightTeamInformation_TeamMembers struct {
	TeamMembers *FightTeamMembersInformation `protobuf:"bytes,6,opt,name=team_members,json=teamMembers,proto3,oneof"`
}

type FightTeamInformation_LightInformation struct {
	LightInformation *FightTeamLightInformation `protobuf:"bytes,7,opt,name=light_information,json=lightInformation,proto3,oneof"`
}

func (*FightTeamInformation_TeamMembers) isFightTeamInformation_TeamInformation() {}

func (*FightTeamInformation_LightInformation) isFightTeamInformation_TeamInformation() {}

type FightExternalInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightId               int32                                             `protobuf:"varint,1,opt,name=fight_id,json=fightId,proto3" json:"fight_id,omitempty"`
	FightType             FightType                                         `protobuf:"varint,2,opt,name=fight_type,json=fightType,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightType" json:"fight_type,omitempty"`
	FightStart            int64                                             `protobuf:"varint,3,opt,name=fight_start,json=fightStart,proto3" json:"fight_start,omitempty"`
	FightSpectatorLocked  bool                                              `protobuf:"varint,4,opt,name=fight_spectator_locked,json=fightSpectatorLocked,proto3" json:"fight_spectator_locked,omitempty"`
	FightTeamsWithOptions []*FightExternalInformation_FightTeamsWithOptions `protobuf:"bytes,5,rep,name=fight_teams_with_options,json=fightTeamsWithOptions,proto3" json:"fight_teams_with_options,omitempty"`
}

func (x *FightExternalInformation) Reset() {
	*x = FightExternalInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightExternalInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightExternalInformation) ProtoMessage() {}

func (x *FightExternalInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightExternalInformation.ProtoReflect.Descriptor instead.
func (*FightExternalInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{40}
}

func (x *FightExternalInformation) GetFightId() int32 {
	if x != nil {
		return x.FightId
	}
	return 0
}

func (x *FightExternalInformation) GetFightType() FightType {
	if x != nil {
		return x.FightType
	}
	return FightType_FIGHT_TYPE_CHALLENGE
}

func (x *FightExternalInformation) GetFightStart() int64 {
	if x != nil {
		return x.FightStart
	}
	return 0
}

func (x *FightExternalInformation) GetFightSpectatorLocked() bool {
	if x != nil {
		return x.FightSpectatorLocked
	}
	return false
}

func (x *FightExternalInformation) GetFightTeamsWithOptions() []*FightExternalInformation_FightTeamsWithOptions {
	if x != nil {
		return x.FightTeamsWithOptions
	}
	return nil
}

type FightTeamLightInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamMembersCount  int32 `protobuf:"varint,1,opt,name=team_members_count,json=teamMembersCount,proto3" json:"team_members_count,omitempty"`
	AverageLevel      int32 `protobuf:"varint,2,opt,name=average_level,json=averageLevel,proto3" json:"average_level,omitempty"`
	HasFriend         bool  `protobuf:"varint,3,opt,name=has_friend,json=hasFriend,proto3" json:"has_friend,omitempty"`
	HasGuildMember    bool  `protobuf:"varint,4,opt,name=has_guild_member,json=hasGuildMember,proto3" json:"has_guild_member,omitempty"`
	HasAllianceMember bool  `protobuf:"varint,5,opt,name=has_alliance_member,json=hasAllianceMember,proto3" json:"has_alliance_member,omitempty"`
	HasGroupMember    bool  `protobuf:"varint,6,opt,name=has_group_member,json=hasGroupMember,proto3" json:"has_group_member,omitempty"`
	HasMyTaxCollector bool  `protobuf:"varint,7,opt,name=has_my_tax_collector,json=hasMyTaxCollector,proto3" json:"has_my_tax_collector,omitempty"`
}

func (x *FightTeamLightInformation) Reset() {
	*x = FightTeamLightInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamLightInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamLightInformation) ProtoMessage() {}

func (x *FightTeamLightInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamLightInformation.ProtoReflect.Descriptor instead.
func (*FightTeamLightInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{41}
}

func (x *FightTeamLightInformation) GetTeamMembersCount() int32 {
	if x != nil {
		return x.TeamMembersCount
	}
	return 0
}

func (x *FightTeamLightInformation) GetAverageLevel() int32 {
	if x != nil {
		return x.AverageLevel
	}
	return 0
}

func (x *FightTeamLightInformation) GetHasFriend() bool {
	if x != nil {
		return x.HasFriend
	}
	return false
}

func (x *FightTeamLightInformation) GetHasGuildMember() bool {
	if x != nil {
		return x.HasGuildMember
	}
	return false
}

func (x *FightTeamLightInformation) GetHasAllianceMember() bool {
	if x != nil {
		return x.HasAllianceMember
	}
	return false
}

func (x *FightTeamLightInformation) GetHasGroupMember() bool {
	if x != nil {
		return x.HasGroupMember
	}
	return false
}

func (x *FightTeamLightInformation) GetHasMyTaxCollector() bool {
	if x != nil {
		return x.HasMyTaxCollector
	}
	return false
}

type FightTeamMembersInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamMembers      []*FightTeamMemberInformation `protobuf:"bytes,1,rep,name=team_members,json=teamMembers,proto3" json:"team_members,omitempty"`
	AllianceRelation *AllianceRelation             `protobuf:"varint,2,opt,name=alliance_relation,json=allianceRelation,proto3,enum=com.ankama.dofus.server.game.protocol.common.AllianceRelation,oneof" json:"alliance_relation,omitempty"`
}

func (x *FightTeamMembersInformation) Reset() {
	*x = FightTeamMembersInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamMembersInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamMembersInformation) ProtoMessage() {}

func (x *FightTeamMembersInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamMembersInformation.ProtoReflect.Descriptor instead.
func (*FightTeamMembersInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{42}
}

func (x *FightTeamMembersInformation) GetTeamMembers() []*FightTeamMemberInformation {
	if x != nil {
		return x.TeamMembers
	}
	return nil
}

func (x *FightTeamMembersInformation) GetAllianceRelation() AllianceRelation {
	if x != nil && x.AllianceRelation != nil {
		return *x.AllianceRelation
	}
	return AllianceRelation_ALLIANCE_RELATION_NONE
}

type FightTeamMemberInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId int64 `protobuf:"varint,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// Types that are assignable to Information:
	//
	//	*FightTeamMemberInformation_CharacterMember
	//	*FightTeamMemberInformation_EntityMember
	//	*FightTeamMemberInformation_MonsterMember
	//	*FightTeamMemberInformation_TaxCollectorMember
	Information isFightTeamMemberInformation_Information `protobuf_oneof:"information"`
}

func (x *FightTeamMemberInformation) Reset() {
	*x = FightTeamMemberInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamMemberInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamMemberInformation) ProtoMessage() {}

func (x *FightTeamMemberInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamMemberInformation.ProtoReflect.Descriptor instead.
func (*FightTeamMemberInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{43}
}

func (x *FightTeamMemberInformation) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (m *FightTeamMemberInformation) GetInformation() isFightTeamMemberInformation_Information {
	if m != nil {
		return m.Information
	}
	return nil
}

func (x *FightTeamMemberInformation) GetCharacterMember() *FightTeamMemberCharacter {
	if x, ok := x.GetInformation().(*FightTeamMemberInformation_CharacterMember); ok {
		return x.CharacterMember
	}
	return nil
}

func (x *FightTeamMemberInformation) GetEntityMember() *FightTeamMemberEntity {
	if x, ok := x.GetInformation().(*FightTeamMemberInformation_EntityMember); ok {
		return x.EntityMember
	}
	return nil
}

func (x *FightTeamMemberInformation) GetMonsterMember() *FightTeamMemberMonster {
	if x, ok := x.GetInformation().(*FightTeamMemberInformation_MonsterMember); ok {
		return x.MonsterMember
	}
	return nil
}

func (x *FightTeamMemberInformation) GetTaxCollectorMember() *FightTeamMemberTaxCollector {
	if x, ok := x.GetInformation().(*FightTeamMemberInformation_TaxCollectorMember); ok {
		return x.TaxCollectorMember
	}
	return nil
}

type isFightTeamMemberInformation_Information interface {
	isFightTeamMemberInformation_Information()
}

type FightTeamMemberInformation_CharacterMember struct {
	CharacterMember *FightTeamMemberCharacter `protobuf:"bytes,2,opt,name=character_member,json=characterMember,proto3,oneof"`
}

type FightTeamMemberInformation_EntityMember struct {
	EntityMember *FightTeamMemberEntity `protobuf:"bytes,3,opt,name=entity_member,json=entityMember,proto3,oneof"`
}

type FightTeamMemberInformation_MonsterMember struct {
	MonsterMember *FightTeamMemberMonster `protobuf:"bytes,4,opt,name=monster_member,json=monsterMember,proto3,oneof"`
}

type FightTeamMemberInformation_TaxCollectorMember struct {
	TaxCollectorMember *FightTeamMemberTaxCollector `protobuf:"bytes,5,opt,name=tax_collector_member,json=taxCollectorMember,proto3,oneof"`
}

func (*FightTeamMemberInformation_CharacterMember) isFightTeamMemberInformation_Information() {}

func (*FightTeamMemberInformation_EntityMember) isFightTeamMemberInformation_Information() {}

func (*FightTeamMemberInformation_MonsterMember) isFightTeamMemberInformation_Information() {}

func (*FightTeamMemberInformation_TaxCollectorMember) isFightTeamMemberInformation_Information() {}

type FightTeamMemberCharacter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Level        int32                                              `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	AllianceInfo *FightTeamMemberCharacter_BasicAllianceInformation `protobuf:"bytes,3,opt,name=alliance_info,json=allianceInfo,proto3,oneof" json:"alliance_info,omitempty"`
}

func (x *FightTeamMemberCharacter) Reset() {
	*x = FightTeamMemberCharacter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamMemberCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamMemberCharacter) ProtoMessage() {}

func (x *FightTeamMemberCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamMemberCharacter.ProtoReflect.Descriptor instead.
func (*FightTeamMemberCharacter) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{44}
}

func (x *FightTeamMemberCharacter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FightTeamMemberCharacter) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FightTeamMemberCharacter) GetAllianceInfo() *FightTeamMemberCharacter_BasicAllianceInformation {
	if x != nil {
		return x.AllianceInfo
	}
	return nil
}

type FightTeamMemberEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityModelId int32 `protobuf:"varint,1,opt,name=entity_model_id,json=entityModelId,proto3" json:"entity_model_id,omitempty"`
	Level         int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	MasterId      int64 `protobuf:"varint,3,opt,name=master_id,json=masterId,proto3" json:"master_id,omitempty"`
}

func (x *FightTeamMemberEntity) Reset() {
	*x = FightTeamMemberEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamMemberEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamMemberEntity) ProtoMessage() {}

func (x *FightTeamMemberEntity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamMemberEntity.ProtoReflect.Descriptor instead.
func (*FightTeamMemberEntity) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{45}
}

func (x *FightTeamMemberEntity) GetEntityModelId() int32 {
	if x != nil {
		return x.EntityModelId
	}
	return 0
}

func (x *FightTeamMemberEntity) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FightTeamMemberEntity) GetMasterId() int64 {
	if x != nil {
		return x.MasterId
	}
	return 0
}

type FightTeamMemberMonster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterId int32 `protobuf:"varint,1,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	Grade     int32 `protobuf:"varint,2,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (x *FightTeamMemberMonster) Reset() {
	*x = FightTeamMemberMonster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamMemberMonster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamMemberMonster) ProtoMessage() {}

func (x *FightTeamMemberMonster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamMemberMonster.ProtoReflect.Descriptor instead.
func (*FightTeamMemberMonster) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{46}
}

func (x *FightTeamMemberMonster) GetMonsterId() int32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *FightTeamMemberMonster) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

type FightTeamMemberTaxCollector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstNameId     int32  `protobuf:"varint,1,opt,name=first_name_id,json=firstNameId,proto3" json:"first_name_id,omitempty"`
	LastNameId      int32  `protobuf:"varint,2,opt,name=last_name_id,json=lastNameId,proto3" json:"last_name_id,omitempty"`
	GroupId         int32  `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	TaxCollectorUid string `protobuf:"bytes,4,opt,name=tax_collector_uid,json=taxCollectorUid,proto3" json:"tax_collector_uid,omitempty"`
}

func (x *FightTeamMemberTaxCollector) Reset() {
	*x = FightTeamMemberTaxCollector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamMemberTaxCollector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamMemberTaxCollector) ProtoMessage() {}

func (x *FightTeamMemberTaxCollector) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamMemberTaxCollector.ProtoReflect.Descriptor instead.
func (*FightTeamMemberTaxCollector) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{47}
}

func (x *FightTeamMemberTaxCollector) GetFirstNameId() int32 {
	if x != nil {
		return x.FirstNameId
	}
	return 0
}

func (x *FightTeamMemberTaxCollector) GetLastNameId() int32 {
	if x != nil {
		return x.LastNameId
	}
	return 0
}

func (x *FightTeamMemberTaxCollector) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *FightTeamMemberTaxCollector) GetTaxCollectorUid() string {
	if x != nil {
		return x.TaxCollectorUid
	}
	return ""
}

type FightStartingPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengersPositions []int32 `protobuf:"varint,1,rep,packed,name=challengers_positions,json=challengersPositions,proto3" json:"challengers_positions,omitempty"`
	DefendersPositions   []int32 `protobuf:"varint,2,rep,packed,name=defenders_positions,json=defendersPositions,proto3" json:"defenders_positions,omitempty"`
}

func (x *FightStartingPositions) Reset() {
	*x = FightStartingPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightStartingPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightStartingPositions) ProtoMessage() {}

func (x *FightStartingPositions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightStartingPositions.ProtoReflect.Descriptor instead.
func (*FightStartingPositions) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{48}
}

func (x *FightStartingPositions) GetChallengersPositions() []int32 {
	if x != nil {
		return x.ChallengersPositions
	}
	return nil
}

func (x *FightStartingPositions) GetDefendersPositions() []int32 {
	if x != nil {
		return x.DefendersPositions
	}
	return nil
}

type FightRemovableEffectExtendedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId int32                 `protobuf:"varint,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	SourceId int64                 `protobuf:"varint,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Effect   *FightRemovableEffect `protobuf:"bytes,3,opt,name=effect,proto3" json:"effect,omitempty"`
}

func (x *FightRemovableEffectExtendedInformation) Reset() {
	*x = FightRemovableEffectExtendedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightRemovableEffectExtendedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightRemovableEffectExtendedInformation) ProtoMessage() {}

func (x *FightRemovableEffectExtendedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightRemovableEffectExtendedInformation.ProtoReflect.Descriptor instead.
func (*FightRemovableEffectExtendedInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{49}
}

func (x *FightRemovableEffectExtendedInformation) GetActionId() int32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *FightRemovableEffectExtendedInformation) GetSourceId() int64 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *FightRemovableEffectExtendedInformation) GetEffect() *FightRemovableEffect {
	if x != nil {
		return x.Effect
	}
	return nil
}

type FightRemovableEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              int32                                       `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TargetId         int64                                       `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TurnDuration     int32                                       `protobuf:"varint,3,opt,name=turn_duration,json=turnDuration,proto3" json:"turn_duration,omitempty"`
	DissipationState FightRemovableEffect_EffectDissipationState `protobuf:"varint,4,opt,name=dissipation_state,json=dissipationState,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightRemovableEffect_EffectDissipationState" json:"dissipation_state,omitempty"`
	SpellId          int32                                       `protobuf:"varint,5,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	EffectId         int32                                       `protobuf:"varint,6,opt,name=effect_id,json=effectId,proto3" json:"effect_id,omitempty"`
	ParentBoostId    int32                                       `protobuf:"varint,7,opt,name=parent_boost_id,json=parentBoostId,proto3" json:"parent_boost_id,omitempty"`
	// Types that are assignable to Effect:
	//
	//	*FightRemovableEffect_TemporaryBoostEffect
	//	*FightRemovableEffect_TemporarySpellImmunityEffect
	//	*FightRemovableEffect_TriggeredEffect
	Effect isFightRemovableEffect_Effect `protobuf_oneof:"effect"`
}

func (x *FightRemovableEffect) Reset() {
	*x = FightRemovableEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightRemovableEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightRemovableEffect) ProtoMessage() {}

func (x *FightRemovableEffect) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightRemovableEffect.ProtoReflect.Descriptor instead.
func (*FightRemovableEffect) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{50}
}

func (x *FightRemovableEffect) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FightRemovableEffect) GetTargetId() int64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *FightRemovableEffect) GetTurnDuration() int32 {
	if x != nil {
		return x.TurnDuration
	}
	return 0
}

func (x *FightRemovableEffect) GetDissipationState() FightRemovableEffect_EffectDissipationState {
	if x != nil {
		return x.DissipationState
	}
	return FightRemovableEffect_DISSIPATED
}

func (x *FightRemovableEffect) GetSpellId() int32 {
	if x != nil {
		return x.SpellId
	}
	return 0
}

func (x *FightRemovableEffect) GetEffectId() int32 {
	if x != nil {
		return x.EffectId
	}
	return 0
}

func (x *FightRemovableEffect) GetParentBoostId() int32 {
	if x != nil {
		return x.ParentBoostId
	}
	return 0
}

func (m *FightRemovableEffect) GetEffect() isFightRemovableEffect_Effect {
	if m != nil {
		return m.Effect
	}
	return nil
}

func (x *FightRemovableEffect) GetTemporaryBoostEffect() *FightTemporaryBoostEffect {
	if x, ok := x.GetEffect().(*FightRemovableEffect_TemporaryBoostEffect); ok {
		return x.TemporaryBoostEffect
	}
	return nil
}

func (x *FightRemovableEffect) GetTemporarySpellImmunityEffect() *FightTemporarySpellImmunityEffect {
	if x, ok := x.GetEffect().(*FightRemovableEffect_TemporarySpellImmunityEffect); ok {
		return x.TemporarySpellImmunityEffect
	}
	return nil
}

func (x *FightRemovableEffect) GetTriggeredEffect() *FightTriggeredEffect {
	if x, ok := x.GetEffect().(*FightRemovableEffect_TriggeredEffect); ok {
		return x.TriggeredEffect
	}
	return nil
}

type isFightRemovableEffect_Effect interface {
	isFightRemovableEffect_Effect()
}

type FightRemovableEffect_TemporaryBoostEffect struct {
	TemporaryBoostEffect *FightTemporaryBoostEffect `protobuf:"bytes,8,opt,name=temporary_boost_effect,json=temporaryBoostEffect,proto3,oneof"`
}

type FightRemovableEffect_TemporarySpellImmunityEffect struct {
	TemporarySpellImmunityEffect *FightTemporarySpellImmunityEffect `protobuf:"bytes,9,opt,name=temporary_spell_immunity_effect,json=temporarySpellImmunityEffect,proto3,oneof"`
}

type FightRemovableEffect_TriggeredEffect struct {
	TriggeredEffect *FightTriggeredEffect `protobuf:"bytes,10,opt,name=triggered_effect,json=triggeredEffect,proto3,oneof"`
}

func (*FightRemovableEffect_TemporaryBoostEffect) isFightRemovableEffect_Effect() {}

func (*FightRemovableEffect_TemporarySpellImmunityEffect) isFightRemovableEffect_Effect() {}

func (*FightRemovableEffect_TriggeredEffect) isFightRemovableEffect_Effect() {}

type FightTemporaryBoostEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta int32 `protobuf:"varint,1,opt,name=delta,proto3" json:"delta,omitempty"`
	// Types that are assignable to Complement:
	//
	//	*FightTemporaryBoostEffect_BoostedSpellId
	//	*FightTemporaryBoostEffect_WeaponTypeId
	//	*FightTemporaryBoostEffect_StateId
	//	*FightTemporaryBoostEffect_Details_
	Complement isFightTemporaryBoostEffect_Complement `protobuf_oneof:"complement"`
}

func (x *FightTemporaryBoostEffect) Reset() {
	*x = FightTemporaryBoostEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTemporaryBoostEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTemporaryBoostEffect) ProtoMessage() {}

func (x *FightTemporaryBoostEffect) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTemporaryBoostEffect.ProtoReflect.Descriptor instead.
func (*FightTemporaryBoostEffect) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{51}
}

func (x *FightTemporaryBoostEffect) GetDelta() int32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (m *FightTemporaryBoostEffect) GetComplement() isFightTemporaryBoostEffect_Complement {
	if m != nil {
		return m.Complement
	}
	return nil
}

func (x *FightTemporaryBoostEffect) GetBoostedSpellId() int32 {
	if x, ok := x.GetComplement().(*FightTemporaryBoostEffect_BoostedSpellId); ok {
		return x.BoostedSpellId
	}
	return 0
}

func (x *FightTemporaryBoostEffect) GetWeaponTypeId() int32 {
	if x, ok := x.GetComplement().(*FightTemporaryBoostEffect_WeaponTypeId); ok {
		return x.WeaponTypeId
	}
	return 0
}

func (x *FightTemporaryBoostEffect) GetStateId() int32 {
	if x, ok := x.GetComplement().(*FightTemporaryBoostEffect_StateId); ok {
		return x.StateId
	}
	return 0
}

func (x *FightTemporaryBoostEffect) GetDetails() *FightTemporaryBoostEffect_Details {
	if x, ok := x.GetComplement().(*FightTemporaryBoostEffect_Details_); ok {
		return x.Details
	}
	return nil
}

type isFightTemporaryBoostEffect_Complement interface {
	isFightTemporaryBoostEffect_Complement()
}

type FightTemporaryBoostEffect_BoostedSpellId struct {
	BoostedSpellId int32 `protobuf:"varint,2,opt,name=boosted_spell_id,json=boostedSpellId,proto3,oneof"`
}

type FightTemporaryBoostEffect_WeaponTypeId struct {
	WeaponTypeId int32 `protobuf:"varint,3,opt,name=weapon_type_id,json=weaponTypeId,proto3,oneof"`
}

type FightTemporaryBoostEffect_StateId struct {
	StateId int32 `protobuf:"varint,4,opt,name=state_id,json=stateId,proto3,oneof"`
}

type FightTemporaryBoostEffect_Details_ struct {
	Details *FightTemporaryBoostEffect_Details `protobuf:"bytes,5,opt,name=details,proto3,oneof"`
}

func (*FightTemporaryBoostEffect_BoostedSpellId) isFightTemporaryBoostEffect_Complement() {}

func (*FightTemporaryBoostEffect_WeaponTypeId) isFightTemporaryBoostEffect_Complement() {}

func (*FightTemporaryBoostEffect_StateId) isFightTemporaryBoostEffect_Complement() {}

func (*FightTemporaryBoostEffect_Details_) isFightTemporaryBoostEffect_Complement() {}

type FightTemporarySpellImmunityEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImmuneSpellId int32 `protobuf:"varint,1,opt,name=immune_spell_id,json=immuneSpellId,proto3" json:"immune_spell_id,omitempty"`
}

func (x *FightTemporarySpellImmunityEffect) Reset() {
	*x = FightTemporarySpellImmunityEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTemporarySpellImmunityEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTemporarySpellImmunityEffect) ProtoMessage() {}

func (x *FightTemporarySpellImmunityEffect) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTemporarySpellImmunityEffect.ProtoReflect.Descriptor instead.
func (*FightTemporarySpellImmunityEffect) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{52}
}

func (x *FightTemporarySpellImmunityEffect) GetImmuneSpellId() int32 {
	if x != nil {
		return x.ImmuneSpellId
	}
	return 0
}

type FightTriggeredEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstParam  int32 `protobuf:"varint,1,opt,name=first_param,json=firstParam,proto3" json:"first_param,omitempty"`
	SecondParam int32 `protobuf:"varint,2,opt,name=second_param,json=secondParam,proto3" json:"second_param,omitempty"`
	ThirdParam  int32 `protobuf:"varint,3,opt,name=third_param,json=thirdParam,proto3" json:"third_param,omitempty"`
	Delay       int32 `protobuf:"varint,4,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *FightTriggeredEffect) Reset() {
	*x = FightTriggeredEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTriggeredEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTriggeredEffect) ProtoMessage() {}

func (x *FightTriggeredEffect) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTriggeredEffect.ProtoReflect.Descriptor instead.
func (*FightTriggeredEffect) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{53}
}

func (x *FightTriggeredEffect) GetFirstParam() int32 {
	if x != nil {
		return x.FirstParam
	}
	return 0
}

func (x *FightTriggeredEffect) GetSecondParam() int32 {
	if x != nil {
		return x.SecondParam
	}
	return 0
}

func (x *FightTriggeredEffect) GetThirdParam() int32 {
	if x != nil {
		return x.ThirdParam
	}
	return 0
}

func (x *FightTriggeredEffect) GetDelay() int32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type FightMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorId       int64                   `protobuf:"varint,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Team           Team                    `protobuf:"varint,2,opt,name=team,proto3,enum=com.ankama.dofus.server.game.protocol.common.Team" json:"team,omitempty"`
	SpellId        int32                   `protobuf:"varint,3,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	SpellLevel     int32                   `protobuf:"varint,4,opt,name=spell_level,json=spellLevel,proto3" json:"spell_level,omitempty"`
	MarkId         int32                   `protobuf:"varint,5,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`
	MarkType       FightMark_MarkType      `protobuf:"varint,6,opt,name=mark_type,json=markType,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightMark_MarkType" json:"mark_type,omitempty"`
	MarkImpactCell int32                   `protobuf:"varint,7,opt,name=mark_impact_cell,json=markImpactCell,proto3" json:"mark_impact_cell,omitempty"`
	Cells          []*FightMark_MarkedCell `protobuf:"bytes,8,rep,name=cells,proto3" json:"cells,omitempty"`
	Active         bool                    `protobuf:"varint,9,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *FightMark) Reset() {
	*x = FightMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightMark) ProtoMessage() {}

func (x *FightMark) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightMark.ProtoReflect.Descriptor instead.
func (*FightMark) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{54}
}

func (x *FightMark) GetAuthorId() int64 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *FightMark) GetTeam() Team {
	if x != nil {
		return x.Team
	}
	return Team_TEAM_CHALLENGER
}

func (x *FightMark) GetSpellId() int32 {
	if x != nil {
		return x.SpellId
	}
	return 0
}

func (x *FightMark) GetSpellLevel() int32 {
	if x != nil {
		return x.SpellLevel
	}
	return 0
}

func (x *FightMark) GetMarkId() int32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *FightMark) GetMarkType() FightMark_MarkType {
	if x != nil {
		return x.MarkType
	}
	return FightMark_GLYPH
}

func (x *FightMark) GetMarkImpactCell() int32 {
	if x != nil {
		return x.MarkImpactCell
	}
	return 0
}

func (x *FightMark) GetCells() []*FightMark_MarkedCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *FightMark) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type FightEffectTriggerCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectId int32 `protobuf:"varint,1,opt,name=effect_id,json=effectId,proto3" json:"effect_id,omitempty"`
	TargetId int64 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Count    int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FightEffectTriggerCount) Reset() {
	*x = FightEffectTriggerCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightEffectTriggerCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightEffectTriggerCount) ProtoMessage() {}

func (x *FightEffectTriggerCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightEffectTriggerCount.ProtoReflect.Descriptor instead.
func (*FightEffectTriggerCount) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{55}
}

func (x *FightEffectTriggerCount) GetEffectId() int32 {
	if x != nil {
		return x.EffectId
	}
	return 0
}

func (x *FightEffectTriggerCount) GetTargetId() int64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *FightEffectTriggerCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FightSpellCoolDown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpellId  int32 `protobuf:"varint,1,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	CoolDown int32 `protobuf:"varint,2,opt,name=cool_down,json=coolDown,proto3" json:"cool_down,omitempty"`
}

func (x *FightSpellCoolDown) Reset() {
	*x = FightSpellCoolDown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightSpellCoolDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightSpellCoolDown) ProtoMessage() {}

func (x *FightSpellCoolDown) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightSpellCoolDown.ProtoReflect.Descriptor instead.
func (*FightSpellCoolDown) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{56}
}

func (x *FightSpellCoolDown) GetSpellId() int32 {
	if x != nil {
		return x.SpellId
	}
	return 0
}

func (x *FightSpellCoolDown) GetCoolDown() int32 {
	if x != nil {
		return x.CoolDown
	}
	return 0
}

type FightResumeSlaves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlaveId        int64                 `protobuf:"varint,1,opt,name=slave_id,json=slaveId,proto3" json:"slave_id,omitempty"`
	SpellCoolDowns []*FightSpellCoolDown `protobuf:"bytes,2,rep,name=spell_cool_downs,json=spellCoolDowns,proto3" json:"spell_cool_downs,omitempty"`
	SummonCount    int32                 `protobuf:"varint,3,opt,name=summon_count,json=summonCount,proto3" json:"summon_count,omitempty"`
	BombCount      int32                 `protobuf:"varint,4,opt,name=bomb_count,json=bombCount,proto3" json:"bomb_count,omitempty"`
}

func (x *FightResumeSlaves) Reset() {
	*x = FightResumeSlaves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResumeSlaves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResumeSlaves) ProtoMessage() {}

func (x *FightResumeSlaves) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResumeSlaves.ProtoReflect.Descriptor instead.
func (*FightResumeSlaves) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{57}
}

func (x *FightResumeSlaves) GetSlaveId() int64 {
	if x != nil {
		return x.SlaveId
	}
	return 0
}

func (x *FightResumeSlaves) GetSpellCoolDowns() []*FightSpellCoolDown {
	if x != nil {
		return x.SpellCoolDowns
	}
	return nil
}

func (x *FightResumeSlaves) GetSummonCount() int32 {
	if x != nil {
		return x.SummonCount
	}
	return 0
}

func (x *FightResumeSlaves) GetBombCount() int32 {
	if x != nil {
		return x.BombCount
	}
	return 0
}

type FightResultListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcome          FightOutcome                           `protobuf:"varint,1,opt,name=outcome,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightOutcome" json:"outcome,omitempty"`
	Wave             int32                                  `protobuf:"varint,2,opt,name=wave,proto3" json:"wave,omitempty"`
	Rewards          *FightResultListEntry_FightLoot        `protobuf:"bytes,3,opt,name=rewards,proto3" json:"rewards,omitempty"`
	FighterListEntry *FightResultListEntry_FighterListEntry `protobuf:"bytes,4,opt,name=fighter_list_entry,json=fighterListEntry,proto3,oneof" json:"fighter_list_entry,omitempty"`
}

func (x *FightResultListEntry) Reset() {
	*x = FightResultListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultListEntry) ProtoMessage() {}

func (x *FightResultListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultListEntry.ProtoReflect.Descriptor instead.
func (*FightResultListEntry) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{58}
}

func (x *FightResultListEntry) GetOutcome() FightOutcome {
	if x != nil {
		return x.Outcome
	}
	return FightOutcome_RESULT_LOST
}

func (x *FightResultListEntry) GetWave() int32 {
	if x != nil {
		return x.Wave
	}
	return 0
}

func (x *FightResultListEntry) GetRewards() *FightResultListEntry_FightLoot {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *FightResultListEntry) GetFighterListEntry() *FightResultListEntry_FighterListEntry {
	if x != nil {
		return x.FighterListEntry
	}
	return nil
}

type NamedPartyTeamWithOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team    *NamedPartyTeam `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	Outcome FightOutcome    `protobuf:"varint,2,opt,name=outcome,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightOutcome" json:"outcome,omitempty"`
}

func (x *NamedPartyTeamWithOutcome) Reset() {
	*x = NamedPartyTeamWithOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedPartyTeamWithOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedPartyTeamWithOutcome) ProtoMessage() {}

func (x *NamedPartyTeamWithOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedPartyTeamWithOutcome.ProtoReflect.Descriptor instead.
func (*NamedPartyTeamWithOutcome) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{59}
}

func (x *NamedPartyTeamWithOutcome) GetTeam() *NamedPartyTeam {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *NamedPartyTeamWithOutcome) GetOutcome() FightOutcome {
	if x != nil {
		return x.Outcome
	}
	return FightOutcome_RESULT_LOST
}

type FightCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Characteristics   []*CharacterCharacteristic `protobuf:"bytes,1,rep,name=characteristics,proto3" json:"characteristics,omitempty"`
	Summoner          int64                      `protobuf:"varint,2,opt,name=summoner,proto3" json:"summoner,omitempty"`
	Summoned          bool                       `protobuf:"varint,3,opt,name=summoned,proto3" json:"summoned,omitempty"`
	InvisibilityState FightInvisibilityState     `protobuf:"varint,4,opt,name=invisibility_state,json=invisibilityState,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightInvisibilityState" json:"invisibility_state,omitempty"`
}

func (x *FightCharacteristics) Reset() {
	*x = FightCharacteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightCharacteristics) ProtoMessage() {}

func (x *FightCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightCharacteristics.ProtoReflect.Descriptor instead.
func (*FightCharacteristics) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{60}
}

func (x *FightCharacteristics) GetCharacteristics() []*CharacterCharacteristic {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

func (x *FightCharacteristics) GetSummoner() int64 {
	if x != nil {
		return x.Summoner
	}
	return 0
}

func (x *FightCharacteristics) GetSummoned() bool {
	if x != nil {
		return x.Summoned
	}
	return false
}

func (x *FightCharacteristics) GetInvisibilityState() FightInvisibilityState {
	if x != nil {
		return x.InvisibilityState
	}
	return FightInvisibilityState_INVISIBLE
}

type GuildInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Level             int32                                    `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	SocialInformation *GuildInformation_GuildSocialInformation `protobuf:"bytes,4,opt,name=social_information,json=socialInformation,proto3,oneof" json:"social_information,omitempty"`
}

func (x *GuildInformation) Reset() {
	*x = GuildInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildInformation) ProtoMessage() {}

func (x *GuildInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildInformation.ProtoReflect.Descriptor instead.
func (*GuildInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{61}
}

func (x *GuildInformation) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GuildInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GuildInformation) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GuildInformation) GetSocialInformation() *GuildInformation_GuildSocialInformation {
	if x != nil {
		return x.SocialInformation
	}
	return nil
}

type GuildRecruitmentInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocialId                int32                 `protobuf:"varint,1,opt,name=social_id,json=socialId,proto3" json:"social_id,omitempty"`
	RecruitmentType         SocialRecruitmentType `protobuf:"varint,2,opt,name=recruitment_type,json=recruitmentType,proto3,enum=com.ankama.dofus.server.game.protocol.common.SocialRecruitmentType" json:"recruitment_type,omitempty"`
	Title                   string                `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Text                    string                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	SelectedLanguages       []int32               `protobuf:"varint,5,rep,packed,name=selected_languages,json=selectedLanguages,proto3" json:"selected_languages,omitempty"`
	SelectedCriterion       []int32               `protobuf:"varint,6,rep,packed,name=selected_criterion,json=selectedCriterion,proto3" json:"selected_criterion,omitempty"`
	MinLevel                int32                 `protobuf:"varint,7,opt,name=min_level,json=minLevel,proto3" json:"min_level,omitempty"`
	MinLevelFacultative     bool                  `protobuf:"varint,8,opt,name=min_level_facultative,json=minLevelFacultative,proto3" json:"min_level_facultative,omitempty"`
	InvalidatedByModeration bool                  `protobuf:"varint,9,opt,name=invalidated_by_moderation,json=invalidatedByModeration,proto3" json:"invalidated_by_moderation,omitempty"`
	LastEditPlayerName      string                `protobuf:"bytes,10,opt,name=last_edit_player_name,json=lastEditPlayerName,proto3" json:"last_edit_player_name,omitempty"`
	LastEditDate            int64                 `protobuf:"varint,11,opt,name=last_edit_date,json=lastEditDate,proto3" json:"last_edit_date,omitempty"`
	AutoLocked              bool                  `protobuf:"varint,12,opt,name=auto_locked,json=autoLocked,proto3" json:"auto_locked,omitempty"`
	MinSuccess              int32                 `protobuf:"varint,13,opt,name=min_success,json=minSuccess,proto3" json:"min_success,omitempty"`
	MinSuccessFacultative   bool                  `protobuf:"varint,14,opt,name=min_success_facultative,json=minSuccessFacultative,proto3" json:"min_success_facultative,omitempty"`
}

func (x *GuildRecruitmentInformation) Reset() {
	*x = GuildRecruitmentInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildRecruitmentInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRecruitmentInformation) ProtoMessage() {}

func (x *GuildRecruitmentInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRecruitmentInformation.ProtoReflect.Descriptor instead.
func (*GuildRecruitmentInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{62}
}

func (x *GuildRecruitmentInformation) GetSocialId() int32 {
	if x != nil {
		return x.SocialId
	}
	return 0
}

func (x *GuildRecruitmentInformation) GetRecruitmentType() SocialRecruitmentType {
	if x != nil {
		return x.RecruitmentType
	}
	return SocialRecruitmentType_DISABLED
}

func (x *GuildRecruitmentInformation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GuildRecruitmentInformation) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GuildRecruitmentInformation) GetSelectedLanguages() []int32 {
	if x != nil {
		return x.SelectedLanguages
	}
	return nil
}

func (x *GuildRecruitmentInformation) GetSelectedCriterion() []int32 {
	if x != nil {
		return x.SelectedCriterion
	}
	return nil
}

func (x *GuildRecruitmentInformation) GetMinLevel() int32 {
	if x != nil {
		return x.MinLevel
	}
	return 0
}

func (x *GuildRecruitmentInformation) GetMinLevelFacultative() bool {
	if x != nil {
		return x.MinLevelFacultative
	}
	return false
}

func (x *GuildRecruitmentInformation) GetInvalidatedByModeration() bool {
	if x != nil {
		return x.InvalidatedByModeration
	}
	return false
}

func (x *GuildRecruitmentInformation) GetLastEditPlayerName() string {
	if x != nil {
		return x.LastEditPlayerName
	}
	return ""
}

func (x *GuildRecruitmentInformation) GetLastEditDate() int64 {
	if x != nil {
		return x.LastEditDate
	}
	return 0
}

func (x *GuildRecruitmentInformation) GetAutoLocked() bool {
	if x != nil {
		return x.AutoLocked
	}
	return false
}

func (x *GuildRecruitmentInformation) GetMinSuccess() int32 {
	if x != nil {
		return x.MinSuccess
	}
	return 0
}

func (x *GuildRecruitmentInformation) GetMinSuccessFacultative() bool {
	if x != nil {
		return x.MinSuccessFacultative
	}
	return false
}

type GuildLogbookEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId int32 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Date    int64 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	// Types that are assignable to Activity:
	//
	//	*GuildLogbookEntry_ChestActivity_
	//	*GuildLogbookEntry_PaddockActivity_
	//	*GuildLogbookEntry_PlayerFlowActivity_
	//	*GuildLogbookEntry_LevelUpActivity_
	//	*GuildLogbookEntry_UnlockNewTabActivity_
	//	*GuildLogbookEntry_RankActivity_
	//	*GuildLogbookEntry_PlayerRankUpdateActivity_
	Activity isGuildLogbookEntry_Activity `protobuf_oneof:"activity"`
}

func (x *GuildLogbookEntry) Reset() {
	*x = GuildLogbookEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildLogbookEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildLogbookEntry) ProtoMessage() {}

func (x *GuildLogbookEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildLogbookEntry.ProtoReflect.Descriptor instead.
func (*GuildLogbookEntry) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63}
}

func (x *GuildLogbookEntry) GetGuildId() int32 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *GuildLogbookEntry) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (m *GuildLogbookEntry) GetActivity() isGuildLogbookEntry_Activity {
	if m != nil {
		return m.Activity
	}
	return nil
}

func (x *GuildLogbookEntry) GetChestActivity() *GuildLogbookEntry_ChestActivity {
	if x, ok := x.GetActivity().(*GuildLogbookEntry_ChestActivity_); ok {
		return x.ChestActivity
	}
	return nil
}

func (x *GuildLogbookEntry) GetPaddockActivity() *GuildLogbookEntry_PaddockActivity {
	if x, ok := x.GetActivity().(*GuildLogbookEntry_PaddockActivity_); ok {
		return x.PaddockActivity
	}
	return nil
}

func (x *GuildLogbookEntry) GetPlayerFlowActivity() *GuildLogbookEntry_PlayerFlowActivity {
	if x, ok := x.GetActivity().(*GuildLogbookEntry_PlayerFlowActivity_); ok {
		return x.PlayerFlowActivity
	}
	return nil
}

func (x *GuildLogbookEntry) GetLevelUpActivity() *GuildLogbookEntry_LevelUpActivity {
	if x, ok := x.GetActivity().(*GuildLogbookEntry_LevelUpActivity_); ok {
		return x.LevelUpActivity
	}
	return nil
}

func (x *GuildLogbookEntry) GetUnlockNewTabActivity() *GuildLogbookEntry_UnlockNewTabActivity {
	if x, ok := x.GetActivity().(*GuildLogbookEntry_UnlockNewTabActivity_); ok {
		return x.UnlockNewTabActivity
	}
	return nil
}

func (x *GuildLogbookEntry) GetRankActivity() *GuildLogbookEntry_RankActivity {
	if x, ok := x.GetActivity().(*GuildLogbookEntry_RankActivity_); ok {
		return x.RankActivity
	}
	return nil
}

func (x *GuildLogbookEntry) GetPlayerRankUpdateActivity() *GuildLogbookEntry_PlayerRankUpdateActivity {
	if x, ok := x.GetActivity().(*GuildLogbookEntry_PlayerRankUpdateActivity_); ok {
		return x.PlayerRankUpdateActivity
	}
	return nil
}

type isGuildLogbookEntry_Activity interface {
	isGuildLogbookEntry_Activity()
}

type GuildLogbookEntry_ChestActivity_ struct {
	ChestActivity *GuildLogbookEntry_ChestActivity `protobuf:"bytes,3,opt,name=chest_activity,json=chestActivity,proto3,oneof"`
}

type GuildLogbookEntry_PaddockActivity_ struct {
	PaddockActivity *GuildLogbookEntry_PaddockActivity `protobuf:"bytes,4,opt,name=paddock_activity,json=paddockActivity,proto3,oneof"`
}

type GuildLogbookEntry_PlayerFlowActivity_ struct {
	PlayerFlowActivity *GuildLogbookEntry_PlayerFlowActivity `protobuf:"bytes,5,opt,name=player_flow_activity,json=playerFlowActivity,proto3,oneof"`
}

type GuildLogbookEntry_LevelUpActivity_ struct {
	LevelUpActivity *GuildLogbookEntry_LevelUpActivity `protobuf:"bytes,6,opt,name=level_up_activity,json=levelUpActivity,proto3,oneof"`
}

type GuildLogbookEntry_UnlockNewTabActivity_ struct {
	UnlockNewTabActivity *GuildLogbookEntry_UnlockNewTabActivity `protobuf:"bytes,7,opt,name=Unlock_new_tab_activity,json=UnlockNewTabActivity,proto3,oneof"`
}

type GuildLogbookEntry_RankActivity_ struct {
	RankActivity *GuildLogbookEntry_RankActivity `protobuf:"bytes,8,opt,name=rank_activity,json=rankActivity,proto3,oneof"`
}

type GuildLogbookEntry_PlayerRankUpdateActivity_ struct {
	PlayerRankUpdateActivity *GuildLogbookEntry_PlayerRankUpdateActivity `protobuf:"bytes,9,opt,name=player_rank_update_activity,json=playerRankUpdateActivity,proto3,oneof"`
}

func (*GuildLogbookEntry_ChestActivity_) isGuildLogbookEntry_Activity() {}

func (*GuildLogbookEntry_PaddockActivity_) isGuildLogbookEntry_Activity() {}

func (*GuildLogbookEntry_PlayerFlowActivity_) isGuildLogbookEntry_Activity() {}

func (*GuildLogbookEntry_LevelUpActivity_) isGuildLogbookEntry_Activity() {}

func (*GuildLogbookEntry_UnlockNewTabActivity_) isGuildLogbookEntry_Activity() {}

func (*GuildLogbookEntry_RankActivity_) isGuildLogbookEntry_Activity() {}

func (*GuildLogbookEntry_PlayerRankUpdateActivity_) isGuildLogbookEntry_Activity() {}

type HouseInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId       int32             `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	SecondHand       bool              `protobuf:"varint,2,opt,name=second_hand,json=secondHand,proto3" json:"second_hand,omitempty"`
	IsLocked         bool              `protobuf:"varint,3,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	AccountTag       *AccountTag       `protobuf:"bytes,4,opt,name=account_tag,json=accountTag,proto3" json:"account_tag,omitempty"`
	HasOwner         bool              `protobuf:"varint,5,opt,name=has_owner,json=hasOwner,proto3" json:"has_owner,omitempty"`
	IsSaleLocked     bool              `protobuf:"varint,7,opt,name=is_sale_locked,json=isSaleLocked,proto3" json:"is_sale_locked,omitempty"`
	IsAdminLocked    bool              `protobuf:"varint,8,opt,name=is_admin_locked,json=isAdminLocked,proto3" json:"is_admin_locked,omitempty"`
	RoomsCount       int32             `protobuf:"varint,10,opt,name=rooms_count,json=roomsCount,proto3" json:"rooms_count,omitempty"`
	ChestsCount      int32             `protobuf:"varint,11,opt,name=chests_count,json=chestsCount,proto3" json:"chests_count,omitempty"`
	SkillsId         []int32           `protobuf:"varint,12,rep,packed,name=skills_id,json=skillsId,proto3" json:"skills_id,omitempty"`
	GuildInformation *GuildInformation `protobuf:"bytes,9,opt,name=guild_information,json=guildInformation,proto3,oneof" json:"guild_information,omitempty"`
	Price            *int64            `protobuf:"varint,6,opt,name=price,proto3,oneof" json:"price,omitempty"`
}

func (x *HouseInstance) Reset() {
	*x = HouseInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HouseInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseInstance) ProtoMessage() {}

func (x *HouseInstance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseInstance.ProtoReflect.Descriptor instead.
func (*HouseInstance) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{64}
}

func (x *HouseInstance) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *HouseInstance) GetSecondHand() bool {
	if x != nil {
		return x.SecondHand
	}
	return false
}

func (x *HouseInstance) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *HouseInstance) GetAccountTag() *AccountTag {
	if x != nil {
		return x.AccountTag
	}
	return nil
}

func (x *HouseInstance) GetHasOwner() bool {
	if x != nil {
		return x.HasOwner
	}
	return false
}

func (x *HouseInstance) GetIsSaleLocked() bool {
	if x != nil {
		return x.IsSaleLocked
	}
	return false
}

func (x *HouseInstance) GetIsAdminLocked() bool {
	if x != nil {
		return x.IsAdminLocked
	}
	return false
}

func (x *HouseInstance) GetRoomsCount() int32 {
	if x != nil {
		return x.RoomsCount
	}
	return 0
}

func (x *HouseInstance) GetChestsCount() int32 {
	if x != nil {
		return x.ChestsCount
	}
	return 0
}

func (x *HouseInstance) GetSkillsId() []int32 {
	if x != nil {
		return x.SkillsId
	}
	return nil
}

func (x *HouseInstance) GetGuildInformation() *GuildInformation {
	if x != nil {
		return x.GuildInformation
	}
	return nil
}

func (x *HouseInstance) GetPrice() int64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

type House struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HouseId int32 `protobuf:"varint,1,opt,name=house_id,json=houseId,proto3" json:"house_id,omitempty"`
	ModelId int32 `protobuf:"varint,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Types that are assignable to Information:
	//
	//	*House_HouseAccount_
	//	*House_HouseOnMap_
	//	*House_HouseInside_
	//	*House_HouseGuild_
	Information isHouse_Information `protobuf_oneof:"information"`
}

func (x *House) Reset() {
	*x = House{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *House) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*House) ProtoMessage() {}

func (x *House) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use House.ProtoReflect.Descriptor instead.
func (*House) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{65}
}

func (x *House) GetHouseId() int32 {
	if x != nil {
		return x.HouseId
	}
	return 0
}

func (x *House) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (m *House) GetInformation() isHouse_Information {
	if m != nil {
		return m.Information
	}
	return nil
}

func (x *House) GetHouseAccount() *House_HouseAccount {
	if x, ok := x.GetInformation().(*House_HouseAccount_); ok {
		return x.HouseAccount
	}
	return nil
}

func (x *House) GetHouseOnMap() *House_HouseOnMap {
	if x, ok := x.GetInformation().(*House_HouseOnMap_); ok {
		return x.HouseOnMap
	}
	return nil
}

func (x *House) GetHouseInside() *House_HouseInside {
	if x, ok := x.GetInformation().(*House_HouseInside_); ok {
		return x.HouseInside
	}
	return nil
}

func (x *House) GetHouseGuild() *House_HouseGuild {
	if x, ok := x.GetInformation().(*House_HouseGuild_); ok {
		return x.HouseGuild
	}
	return nil
}

type isHouse_Information interface {
	isHouse_Information()
}

type House_HouseAccount_ struct {
	HouseAccount *House_HouseAccount `protobuf:"bytes,3,opt,name=house_account,json=houseAccount,proto3,oneof"`
}

type House_HouseOnMap_ struct {
	HouseOnMap *House_HouseOnMap `protobuf:"bytes,4,opt,name=house_on_map,json=houseOnMap,proto3,oneof"`
}

type House_HouseInside_ struct {
	HouseInside *House_HouseInside `protobuf:"bytes,5,opt,name=house_inside,json=houseInside,proto3,oneof"`
}

type House_HouseGuild_ struct {
	HouseGuild *House_HouseGuild `protobuf:"bytes,6,opt,name=house_guild,json=houseGuild,proto3,oneof"`
}

func (*House_HouseAccount_) isHouse_Information() {}

func (*House_HouseOnMap_) isHouse_Information() {}

func (*House_HouseInside_) isHouse_Information() {}

func (*House_HouseGuild_) isHouse_Information() {}

type Shortcut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId int32 `protobuf:"varint,1,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	// Types that are assignable to Shortcut:
	//
	//	*Shortcut_ShortcutObjectItem
	//	*Shortcut_ShortcutPreset
	//	*Shortcut_ShortcutSpell
	//	*Shortcut_ShortcutSmiley
	//	*Shortcut_ShortcutEmote
	//	*Shortcut_ShortcutCosmeticObject
	//	*Shortcut_ShortcutOutfit
	Shortcut isShortcut_Shortcut `protobuf_oneof:"shortcut"`
}

func (x *Shortcut) Reset() {
	*x = Shortcut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shortcut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shortcut) ProtoMessage() {}

func (x *Shortcut) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shortcut.ProtoReflect.Descriptor instead.
func (*Shortcut) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{66}
}

func (x *Shortcut) GetSlotId() int32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

func (m *Shortcut) GetShortcut() isShortcut_Shortcut {
	if m != nil {
		return m.Shortcut
	}
	return nil
}

func (x *Shortcut) GetShortcutObjectItem() *ShortcutObjectItem {
	if x, ok := x.GetShortcut().(*Shortcut_ShortcutObjectItem); ok {
		return x.ShortcutObjectItem
	}
	return nil
}

func (x *Shortcut) GetShortcutPreset() *ShortcutPreset {
	if x, ok := x.GetShortcut().(*Shortcut_ShortcutPreset); ok {
		return x.ShortcutPreset
	}
	return nil
}

func (x *Shortcut) GetShortcutSpell() *ShortcutSpell {
	if x, ok := x.GetShortcut().(*Shortcut_ShortcutSpell); ok {
		return x.ShortcutSpell
	}
	return nil
}

func (x *Shortcut) GetShortcutSmiley() *ShortcutSmiley {
	if x, ok := x.GetShortcut().(*Shortcut_ShortcutSmiley); ok {
		return x.ShortcutSmiley
	}
	return nil
}

func (x *Shortcut) GetShortcutEmote() *ShortcutEmote {
	if x, ok := x.GetShortcut().(*Shortcut_ShortcutEmote); ok {
		return x.ShortcutEmote
	}
	return nil
}

func (x *Shortcut) GetShortcutCosmeticObject() *ShortcutCosmeticObject {
	if x, ok := x.GetShortcut().(*Shortcut_ShortcutCosmeticObject); ok {
		return x.ShortcutCosmeticObject
	}
	return nil
}

func (x *Shortcut) GetShortcutOutfit() *ShortcutOutfit {
	if x, ok := x.GetShortcut().(*Shortcut_ShortcutOutfit); ok {
		return x.ShortcutOutfit
	}
	return nil
}

type isShortcut_Shortcut interface {
	isShortcut_Shortcut()
}

type Shortcut_ShortcutObjectItem struct {
	ShortcutObjectItem *ShortcutObjectItem `protobuf:"bytes,2,opt,name=shortcut_object_item,json=shortcutObjectItem,proto3,oneof"`
}

type Shortcut_ShortcutPreset struct {
	ShortcutPreset *ShortcutPreset `protobuf:"bytes,3,opt,name=shortcut_preset,json=shortcutPreset,proto3,oneof"`
}

type Shortcut_ShortcutSpell struct {
	ShortcutSpell *ShortcutSpell `protobuf:"bytes,4,opt,name=shortcut_spell,json=shortcutSpell,proto3,oneof"`
}

type Shortcut_ShortcutSmiley struct {
	ShortcutSmiley *ShortcutSmiley `protobuf:"bytes,5,opt,name=shortcut_smiley,json=shortcutSmiley,proto3,oneof"`
}

type Shortcut_ShortcutEmote struct {
	ShortcutEmote *ShortcutEmote `protobuf:"bytes,6,opt,name=shortcut_emote,json=shortcutEmote,proto3,oneof"`
}

type Shortcut_ShortcutCosmeticObject struct {
	ShortcutCosmeticObject *ShortcutCosmeticObject `protobuf:"bytes,7,opt,name=shortcut_cosmetic_object,json=shortcutCosmeticObject,proto3,oneof"`
}

type Shortcut_ShortcutOutfit struct {
	ShortcutOutfit *ShortcutOutfit `protobuf:"bytes,8,opt,name=shortcut_outfit,json=shortcutOutfit,proto3,oneof"`
}

func (*Shortcut_ShortcutObjectItem) isShortcut_Shortcut() {}

func (*Shortcut_ShortcutPreset) isShortcut_Shortcut() {}

func (*Shortcut_ShortcutSpell) isShortcut_Shortcut() {}

func (*Shortcut_ShortcutSmiley) isShortcut_Shortcut() {}

func (*Shortcut_ShortcutEmote) isShortcut_Shortcut() {}

func (*Shortcut_ShortcutCosmeticObject) isShortcut_Shortcut() {}

func (*Shortcut_ShortcutOutfit) isShortcut_Shortcut() {}

type ShortcutObjectItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemUid int32 `protobuf:"varint,1,opt,name=item_uid,json=itemUid,proto3" json:"item_uid,omitempty"`
	ItemGid int32 `protobuf:"varint,2,opt,name=item_gid,json=itemGid,proto3" json:"item_gid,omitempty"`
}

func (x *ShortcutObjectItem) Reset() {
	*x = ShortcutObjectItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortcutObjectItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortcutObjectItem) ProtoMessage() {}

func (x *ShortcutObjectItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortcutObjectItem.ProtoReflect.Descriptor instead.
func (*ShortcutObjectItem) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{67}
}

func (x *ShortcutObjectItem) GetItemUid() int32 {
	if x != nil {
		return x.ItemUid
	}
	return 0
}

func (x *ShortcutObjectItem) GetItemGid() int32 {
	if x != nil {
		return x.ItemGid
	}
	return 0
}

type ShortcutSpell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpellId int32 `protobuf:"varint,1,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
}

func (x *ShortcutSpell) Reset() {
	*x = ShortcutSpell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortcutSpell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortcutSpell) ProtoMessage() {}

func (x *ShortcutSpell) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortcutSpell.ProtoReflect.Descriptor instead.
func (*ShortcutSpell) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{68}
}

func (x *ShortcutSpell) GetSpellId() int32 {
	if x != nil {
		return x.SpellId
	}
	return 0
}

type ShortcutSmiley struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmileyId int32 `protobuf:"varint,1,opt,name=smiley_id,json=smileyId,proto3" json:"smiley_id,omitempty"`
}

func (x *ShortcutSmiley) Reset() {
	*x = ShortcutSmiley{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortcutSmiley) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortcutSmiley) ProtoMessage() {}

func (x *ShortcutSmiley) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortcutSmiley.ProtoReflect.Descriptor instead.
func (*ShortcutSmiley) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{69}
}

func (x *ShortcutSmiley) GetSmileyId() int32 {
	if x != nil {
		return x.SmileyId
	}
	return 0
}

type ShortcutEmote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmoteId int32 `protobuf:"varint,1,opt,name=emote_id,json=emoteId,proto3" json:"emote_id,omitempty"`
}

func (x *ShortcutEmote) Reset() {
	*x = ShortcutEmote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortcutEmote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortcutEmote) ProtoMessage() {}

func (x *ShortcutEmote) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortcutEmote.ProtoReflect.Descriptor instead.
func (*ShortcutEmote) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{70}
}

func (x *ShortcutEmote) GetEmoteId() int32 {
	if x != nil {
		return x.EmoteId
	}
	return 0
}

type ShortcutCosmeticObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectGid int32  `protobuf:"varint,1,opt,name=object_gid,json=objectGid,proto3" json:"object_gid,omitempty"`
	Enable    bool   `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
	SkinId    *int32 `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3,oneof" json:"skin_id,omitempty"`
}

func (x *ShortcutCosmeticObject) Reset() {
	*x = ShortcutCosmeticObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortcutCosmeticObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortcutCosmeticObject) ProtoMessage() {}

func (x *ShortcutCosmeticObject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortcutCosmeticObject.ProtoReflect.Descriptor instead.
func (*ShortcutCosmeticObject) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{71}
}

func (x *ShortcutCosmeticObject) GetObjectGid() int32 {
	if x != nil {
		return x.ObjectGid
	}
	return 0
}

func (x *ShortcutCosmeticObject) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *ShortcutCosmeticObject) GetSkinId() int32 {
	if x != nil && x.SkinId != nil {
		return *x.SkinId
	}
	return 0
}

type ShortcutOutfit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutfitUuid string `protobuf:"bytes,1,opt,name=outfit_uuid,json=outfitUuid,proto3" json:"outfit_uuid,omitempty"`
}

func (x *ShortcutOutfit) Reset() {
	*x = ShortcutOutfit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortcutOutfit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortcutOutfit) ProtoMessage() {}

func (x *ShortcutOutfit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortcutOutfit.ProtoReflect.Descriptor instead.
func (*ShortcutOutfit) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{72}
}

func (x *ShortcutOutfit) GetOutfitUuid() string {
	if x != nil {
		return x.OutfitUuid
	}
	return ""
}

type ShortcutPreset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetUuid string     `protobuf:"bytes,1,opt,name=preset_uuid,json=presetUuid,proto3" json:"preset_uuid,omitempty"`
	Type       PresetType `protobuf:"varint,2,opt,name=type,proto3,enum=com.ankama.dofus.server.game.protocol.common.PresetType" json:"type,omitempty"`
}

func (x *ShortcutPreset) Reset() {
	*x = ShortcutPreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortcutPreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortcutPreset) ProtoMessage() {}

func (x *ShortcutPreset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortcutPreset.ProtoReflect.Descriptor instead.
func (*ShortcutPreset) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{73}
}

func (x *ShortcutPreset) GetPresetUuid() string {
	if x != nil {
		return x.PresetUuid
	}
	return ""
}

func (x *ShortcutPreset) GetType() PresetType {
	if x != nil {
		return x.Type
	}
	return PresetType_CHARACTER
}

type MapCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldX int32 `protobuf:"varint,1,opt,name=world_x,json=worldX,proto3" json:"world_x,omitempty"`
	WorldY int32 `protobuf:"varint,2,opt,name=world_y,json=worldY,proto3" json:"world_y,omitempty"`
}

func (x *MapCoordinates) Reset() {
	*x = MapCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapCoordinates) ProtoMessage() {}

func (x *MapCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapCoordinates.ProtoReflect.Descriptor instead.
func (*MapCoordinates) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{74}
}

func (x *MapCoordinates) GetWorldX() int32 {
	if x != nil {
		return x.WorldX
	}
	return 0
}

func (x *MapCoordinates) GetWorldY() int32 {
	if x != nil {
		return x.WorldY
	}
	return 0
}

type MapExtendedCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldX    int32 `protobuf:"varint,1,opt,name=world_x,json=worldX,proto3" json:"world_x,omitempty"`
	WorldY    int32 `protobuf:"varint,2,opt,name=world_y,json=worldY,proto3" json:"world_y,omitempty"`
	MapId     int64 `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	SubAreaId int32 `protobuf:"varint,4,opt,name=sub_area_id,json=subAreaId,proto3" json:"sub_area_id,omitempty"`
}

func (x *MapExtendedCoordinates) Reset() {
	*x = MapExtendedCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapExtendedCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapExtendedCoordinates) ProtoMessage() {}

func (x *MapExtendedCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapExtendedCoordinates.ProtoReflect.Descriptor instead.
func (*MapExtendedCoordinates) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{75}
}

func (x *MapExtendedCoordinates) GetWorldX() int32 {
	if x != nil {
		return x.WorldX
	}
	return 0
}

func (x *MapExtendedCoordinates) GetWorldY() int32 {
	if x != nil {
		return x.WorldY
	}
	return 0
}

func (x *MapExtendedCoordinates) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MapExtendedCoordinates) GetSubAreaId() int32 {
	if x != nil {
		return x.SubAreaId
	}
	return 0
}

type MonsterGroupStaticInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainCreature *MonsterInGroupInformation               `protobuf:"bytes,1,opt,name=main_creature,json=mainCreature,proto3" json:"main_creature,omitempty"`
	Underlings   []*MonsterInGroupInformation             `protobuf:"bytes,2,rep,name=underlings,proto3" json:"underlings,omitempty"`
	Alternatives []*MonstersInGroupAlternativeInformation `protobuf:"bytes,3,rep,name=alternatives,proto3" json:"alternatives,omitempty"`
}

func (x *MonsterGroupStaticInformation) Reset() {
	*x = MonsterGroupStaticInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonsterGroupStaticInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterGroupStaticInformation) ProtoMessage() {}

func (x *MonsterGroupStaticInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterGroupStaticInformation.ProtoReflect.Descriptor instead.
func (*MonsterGroupStaticInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{76}
}

func (x *MonsterGroupStaticInformation) GetMainCreature() *MonsterInGroupInformation {
	if x != nil {
		return x.MainCreature
	}
	return nil
}

func (x *MonsterGroupStaticInformation) GetUnderlings() []*MonsterInGroupInformation {
	if x != nil {
		return x.Underlings
	}
	return nil
}

func (x *MonsterGroupStaticInformation) GetAlternatives() []*MonstersInGroupAlternativeInformation {
	if x != nil {
		return x.Alternatives
	}
	return nil
}

type MonsterInGroupInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid   int32       `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Grade int32       `protobuf:"varint,2,opt,name=grade,proto3" json:"grade,omitempty"`
	Level int32       `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Look  *EntityLook `protobuf:"bytes,4,opt,name=look,proto3,oneof" json:"look,omitempty"`
}

func (x *MonsterInGroupInformation) Reset() {
	*x = MonsterInGroupInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonsterInGroupInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterInGroupInformation) ProtoMessage() {}

func (x *MonsterInGroupInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterInGroupInformation.ProtoReflect.Descriptor instead.
func (*MonsterInGroupInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{77}
}

func (x *MonsterInGroupInformation) GetGid() int32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *MonsterInGroupInformation) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *MonsterInGroupInformation) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MonsterInGroupInformation) GetLook() *EntityLook {
	if x != nil {
		return x.Look
	}
	return nil
}

type MonstersInGroupAlternativeInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerCount int32                        `protobuf:"varint,1,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`
	Monsters    []*MonsterInGroupInformation `protobuf:"bytes,2,rep,name=monsters,proto3" json:"monsters,omitempty"`
}

func (x *MonstersInGroupAlternativeInformation) Reset() {
	*x = MonstersInGroupAlternativeInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonstersInGroupAlternativeInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonstersInGroupAlternativeInformation) ProtoMessage() {}

func (x *MonstersInGroupAlternativeInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonstersInGroupAlternativeInformation.ProtoReflect.Descriptor instead.
func (*MonstersInGroupAlternativeInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{78}
}

func (x *MonstersInGroupAlternativeInformation) GetPlayerCount() int32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

func (x *MonstersInGroupAlternativeInformation) GetMonsters() []*MonsterInGroupInformation {
	if x != nil {
		return x.Monsters
	}
	return nil
}

type ItemMinimalInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectGid int32           `protobuf:"varint,1,opt,name=object_gid,json=objectGid,proto3" json:"object_gid,omitempty"`
	Effects   []*ObjectEffect `protobuf:"bytes,2,rep,name=effects,proto3" json:"effects,omitempty"`
	// Types that are assignable to Complement:
	//
	//	*ItemMinimalInformation_Quantity
	//	*ItemMinimalInformation_ItemToSellInNpcShop_
	Complement isItemMinimalInformation_Complement `protobuf_oneof:"complement"`
}

func (x *ItemMinimalInformation) Reset() {
	*x = ItemMinimalInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemMinimalInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMinimalInformation) ProtoMessage() {}

func (x *ItemMinimalInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMinimalInformation.ProtoReflect.Descriptor instead.
func (*ItemMinimalInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{79}
}

func (x *ItemMinimalInformation) GetObjectGid() int32 {
	if x != nil {
		return x.ObjectGid
	}
	return 0
}

func (x *ItemMinimalInformation) GetEffects() []*ObjectEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (m *ItemMinimalInformation) GetComplement() isItemMinimalInformation_Complement {
	if m != nil {
		return m.Complement
	}
	return nil
}

func (x *ItemMinimalInformation) GetQuantity() int32 {
	if x, ok := x.GetComplement().(*ItemMinimalInformation_Quantity); ok {
		return x.Quantity
	}
	return 0
}

func (x *ItemMinimalInformation) GetItemToSellInNpcShop() *ItemMinimalInformation_ItemToSellInNpcShop {
	if x, ok := x.GetComplement().(*ItemMinimalInformation_ItemToSellInNpcShop_); ok {
		return x.ItemToSellInNpcShop
	}
	return nil
}

type isItemMinimalInformation_Complement interface {
	isItemMinimalInformation_Complement()
}

type ItemMinimalInformation_Quantity struct {
	Quantity int32 `protobuf:"varint,3,opt,name=quantity,proto3,oneof"`
}

type ItemMinimalInformation_ItemToSellInNpcShop_ struct {
	ItemToSellInNpcShop *ItemMinimalInformation_ItemToSellInNpcShop `protobuf:"bytes,4,opt,name=item_to_sell_in_npc_shop,json=itemToSellInNpcShop,proto3,oneof"`
}

func (*ItemMinimalInformation_Quantity) isItemMinimalInformation_Complement() {}

func (*ItemMinimalInformation_ItemToSellInNpcShop_) isItemMinimalInformation_Complement() {}

type ObjectGidWithQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectGid       int32                                        `protobuf:"varint,1,opt,name=object_gid,json=objectGid,proto3" json:"object_gid,omitempty"`
	Quantity        int32                                        `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	PriceDateEffect *ObjectGidWithQuantity_ObjectPriceDateEffect `protobuf:"bytes,3,opt,name=price_date_effect,json=priceDateEffect,proto3,oneof" json:"price_date_effect,omitempty"`
}

func (x *ObjectGidWithQuantity) Reset() {
	*x = ObjectGidWithQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectGidWithQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectGidWithQuantity) ProtoMessage() {}

func (x *ObjectGidWithQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectGidWithQuantity.ProtoReflect.Descriptor instead.
func (*ObjectGidWithQuantity) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{80}
}

func (x *ObjectGidWithQuantity) GetObjectGid() int32 {
	if x != nil {
		return x.ObjectGid
	}
	return 0
}

func (x *ObjectGidWithQuantity) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ObjectGidWithQuantity) GetPriceDateEffect() *ObjectGidWithQuantity_ObjectPriceDateEffect {
	if x != nil {
		return x.PriceDateEffect
	}
	return nil
}

type ObjectUidWithQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectUid int32 `protobuf:"varint,1,opt,name=object_uid,json=objectUid,proto3" json:"object_uid,omitempty"`
	Quantity  int32 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *ObjectUidWithQuantity) Reset() {
	*x = ObjectUidWithQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUidWithQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUidWithQuantity) ProtoMessage() {}

func (x *ObjectUidWithQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUidWithQuantity.ProtoReflect.Descriptor instead.
func (*ObjectUidWithQuantity) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{81}
}

func (x *ObjectUidWithQuantity) GetObjectUid() int32 {
	if x != nil {
		return x.ObjectUid
	}
	return 0
}

func (x *ObjectUidWithQuantity) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type ObjectItemInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position        int32       `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	Item            *ObjectItem `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	Favorite        bool        `protobuf:"varint,3,opt,name=favorite,proto3" json:"favorite,omitempty"`
	TagStorageUuids []string    `protobuf:"bytes,4,rep,name=tag_storage_uuids,json=tagStorageUuids,proto3" json:"tag_storage_uuids,omitempty"`
}

func (x *ObjectItemInventory) Reset() {
	*x = ObjectItemInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectItemInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectItemInventory) ProtoMessage() {}

func (x *ObjectItemInventory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectItemInventory.ProtoReflect.Descriptor instead.
func (*ObjectItemInventory) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{82}
}

func (x *ObjectItemInventory) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ObjectItemInventory) GetItem() *ObjectItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ObjectItemInventory) GetFavorite() bool {
	if x != nil {
		return x.Favorite
	}
	return false
}

func (x *ObjectItemInventory) GetTagStorageUuids() []string {
	if x != nil {
		return x.TagStorageUuids
	}
	return nil
}

type ObjectItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int32           `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Quantity int32           `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Gid      int64           `protobuf:"varint,3,opt,name=gid,proto3" json:"gid,omitempty"`
	Effects  []*ObjectEffect `protobuf:"bytes,4,rep,name=effects,proto3" json:"effects,omitempty"`
}

func (x *ObjectItem) Reset() {
	*x = ObjectItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectItem) ProtoMessage() {}

func (x *ObjectItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectItem.ProtoReflect.Descriptor instead.
func (*ObjectItem) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{83}
}

func (x *ObjectItem) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ObjectItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ObjectItem) GetGid() int64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *ObjectItem) GetEffects() []*ObjectEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

type ObjectEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action int32 `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	// Types that are assignable to Effect:
	//
	//	*ObjectEffect_ValueString
	//	*ObjectEffect_ValueInt
	//	*ObjectEffect_MinMax
	//	*ObjectEffect_Dice
	//	*ObjectEffect_Date
	//	*ObjectEffect_DurationMinute
	//	*ObjectEffect_CreatureFamily
	//	*ObjectEffect_MonsterCount_
	//	*ObjectEffect_Mount
	Effect isObjectEffect_Effect `protobuf_oneof:"effect"`
}

func (x *ObjectEffect) Reset() {
	*x = ObjectEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEffect) ProtoMessage() {}

func (x *ObjectEffect) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEffect.ProtoReflect.Descriptor instead.
func (*ObjectEffect) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{84}
}

func (x *ObjectEffect) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (m *ObjectEffect) GetEffect() isObjectEffect_Effect {
	if m != nil {
		return m.Effect
	}
	return nil
}

func (x *ObjectEffect) GetValueString() string {
	if x, ok := x.GetEffect().(*ObjectEffect_ValueString); ok {
		return x.ValueString
	}
	return ""
}

func (x *ObjectEffect) GetValueInt() int32 {
	if x, ok := x.GetEffect().(*ObjectEffect_ValueInt); ok {
		return x.ValueInt
	}
	return 0
}

func (x *ObjectEffect) GetMinMax() *ObjectEffect_ObjectEffectMinMaxValue {
	if x, ok := x.GetEffect().(*ObjectEffect_MinMax); ok {
		return x.MinMax
	}
	return nil
}

func (x *ObjectEffect) GetDice() *ObjectEffect_ObjectEffectDiceValue {
	if x, ok := x.GetEffect().(*ObjectEffect_Dice); ok {
		return x.Dice
	}
	return nil
}

func (x *ObjectEffect) GetDate() string {
	if x, ok := x.GetEffect().(*ObjectEffect_Date); ok {
		return x.Date
	}
	return ""
}

func (x *ObjectEffect) GetDurationMinute() int64 {
	if x, ok := x.GetEffect().(*ObjectEffect_DurationMinute); ok {
		return x.DurationMinute
	}
	return 0
}

func (x *ObjectEffect) GetCreatureFamily() int32 {
	if x, ok := x.GetEffect().(*ObjectEffect_CreatureFamily); ok {
		return x.CreatureFamily
	}
	return 0
}

func (x *ObjectEffect) GetMonsterCount() *ObjectEffect_MonsterCount {
	if x, ok := x.GetEffect().(*ObjectEffect_MonsterCount_); ok {
		return x.MonsterCount
	}
	return nil
}

func (x *ObjectEffect) GetMount() *ObjectEffect_ObjectEffectMountValue {
	if x, ok := x.GetEffect().(*ObjectEffect_Mount); ok {
		return x.Mount
	}
	return nil
}

type isObjectEffect_Effect interface {
	isObjectEffect_Effect()
}

type ObjectEffect_ValueString struct {
	ValueString string `protobuf:"bytes,2,opt,name=value_string,json=valueString,proto3,oneof"`
}

type ObjectEffect_ValueInt struct {
	ValueInt int32 `protobuf:"varint,3,opt,name=value_int,json=valueInt,proto3,oneof"`
}

type ObjectEffect_MinMax struct {
	MinMax *ObjectEffect_ObjectEffectMinMaxValue `protobuf:"bytes,4,opt,name=min_max,json=minMax,proto3,oneof"`
}

type ObjectEffect_Dice struct {
	Dice *ObjectEffect_ObjectEffectDiceValue `protobuf:"bytes,5,opt,name=dice,proto3,oneof"`
}

type ObjectEffect_Date struct {
	Date string `protobuf:"bytes,6,opt,name=date,proto3,oneof"`
}

type ObjectEffect_DurationMinute struct {
	DurationMinute int64 `protobuf:"varint,7,opt,name=duration_minute,json=durationMinute,proto3,oneof"`
}

type ObjectEffect_CreatureFamily struct {
	CreatureFamily int32 `protobuf:"varint,8,opt,name=creature_family,json=creatureFamily,proto3,oneof"`
}

type ObjectEffect_MonsterCount_ struct {
	MonsterCount *ObjectEffect_MonsterCount `protobuf:"bytes,9,opt,name=monster_count,json=monsterCount,proto3,oneof"`
}

type ObjectEffect_Mount struct {
	Mount *ObjectEffect_ObjectEffectMountValue `protobuf:"bytes,10,opt,name=mount,proto3,oneof"`
}

func (*ObjectEffect_ValueString) isObjectEffect_Effect() {}

func (*ObjectEffect_ValueInt) isObjectEffect_Effect() {}

func (*ObjectEffect_MinMax) isObjectEffect_Effect() {}

func (*ObjectEffect_Dice) isObjectEffect_Effect() {}

func (*ObjectEffect_Date) isObjectEffect_Effect() {}

func (*ObjectEffect_DurationMinute) isObjectEffect_Effect() {}

func (*ObjectEffect_CreatureFamily) isObjectEffect_Effect() {}

func (*ObjectEffect_MonsterCount_) isObjectEffect_Effect() {}

func (*ObjectEffect_Mount) isObjectEffect_Effect() {}

type ObjectInRolePlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId    int32 `protobuf:"varint,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	ObjectGid int32 `protobuf:"varint,2,opt,name=object_gid,json=objectGid,proto3" json:"object_gid,omitempty"`
	// Types that are assignable to Complement:
	//
	//	*ObjectInRolePlay_WithLook_
	//	*ObjectInRolePlay_PaddockItem_
	Complement isObjectInRolePlay_Complement `protobuf_oneof:"complement"`
}

func (x *ObjectInRolePlay) Reset() {
	*x = ObjectInRolePlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectInRolePlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectInRolePlay) ProtoMessage() {}

func (x *ObjectInRolePlay) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectInRolePlay.ProtoReflect.Descriptor instead.
func (*ObjectInRolePlay) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{85}
}

func (x *ObjectInRolePlay) GetCellId() int32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *ObjectInRolePlay) GetObjectGid() int32 {
	if x != nil {
		return x.ObjectGid
	}
	return 0
}

func (m *ObjectInRolePlay) GetComplement() isObjectInRolePlay_Complement {
	if m != nil {
		return m.Complement
	}
	return nil
}

func (x *ObjectInRolePlay) GetWithLook() *ObjectInRolePlay_WithLook {
	if x, ok := x.GetComplement().(*ObjectInRolePlay_WithLook_); ok {
		return x.WithLook
	}
	return nil
}

func (x *ObjectInRolePlay) GetPaddockItem() *ObjectInRolePlay_PaddockItem {
	if x, ok := x.GetComplement().(*ObjectInRolePlay_PaddockItem_); ok {
		return x.PaddockItem
	}
	return nil
}

type isObjectInRolePlay_Complement interface {
	isObjectInRolePlay_Complement()
}

type ObjectInRolePlay_WithLook_ struct {
	WithLook *ObjectInRolePlay_WithLook `protobuf:"bytes,3,opt,name=with_look,json=withLook,proto3,oneof"`
}

type ObjectInRolePlay_PaddockItem_ struct {
	PaddockItem *ObjectInRolePlay_PaddockItem `protobuf:"bytes,4,opt,name=paddock_item,json=paddockItem,proto3,oneof"`
}

func (*ObjectInRolePlay_WithLook_) isObjectInRolePlay_Complement() {}

func (*ObjectInRolePlay_PaddockItem_) isObjectInRolePlay_Complement() {}

type GameActionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title      string                    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Text       string                    `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	DescUrl    string                    `protobuf:"bytes,4,opt,name=desc_url,json=descUrl,proto3" json:"desc_url,omitempty"`
	PictureUrl string                    `protobuf:"bytes,5,opt,name=picture_url,json=pictureUrl,proto3" json:"picture_url,omitempty"`
	Items      []*ItemMinimalInformation `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GameActionItem) Reset() {
	*x = GameActionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameActionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameActionItem) ProtoMessage() {}

func (x *GameActionItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameActionItem.ProtoReflect.Descriptor instead.
func (*GameActionItem) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{86}
}

func (x *GameActionItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GameActionItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GameActionItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GameActionItem) GetDescUrl() string {
	if x != nil {
		return x.DescUrl
	}
	return ""
}

func (x *GameActionItem) GetPictureUrl() string {
	if x != nil {
		return x.PictureUrl
	}
	return ""
}

func (x *GameActionItem) GetItems() []*ItemMinimalInformation {
	if x != nil {
		return x.Items
	}
	return nil
}

type PortalInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortalId int32 `protobuf:"varint,1,opt,name=portal_id,json=portalId,proto3" json:"portal_id,omitempty"`
	AreaId   int32 `protobuf:"varint,2,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
}

func (x *PortalInformation) Reset() {
	*x = PortalInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalInformation) ProtoMessage() {}

func (x *PortalInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalInformation.ProtoReflect.Descriptor instead.
func (*PortalInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{87}
}

func (x *PortalInformation) GetPortalId() int32 {
	if x != nil {
		return x.PortalId
	}
	return 0
}

func (x *PortalInformation) GetAreaId() int32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

type PrismInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State               PrismInformation_PrismState `protobuf:"varint,1,opt,name=state,proto3,enum=com.ankama.dofus.server.game.protocol.common.PrismInformation_PrismState" json:"state,omitempty"`
	PlacementDate       int64                       `protobuf:"varint,2,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`
	NuggetsCount        int64                       `protobuf:"varint,3,opt,name=nuggets_count,json=nuggetsCount,proto3" json:"nuggets_count,omitempty"`
	Durability          int32                       `protobuf:"varint,4,opt,name=durability,proto3" json:"durability,omitempty"`
	NextEvolutionDate   int64                       `protobuf:"varint,5,opt,name=next_evolution_date,json=nextEvolutionDate,proto3" json:"next_evolution_date,omitempty"`
	AllianceInformation *AllianceInformation        `protobuf:"bytes,6,opt,name=alliance_information,json=allianceInformation,proto3,oneof" json:"alliance_information,omitempty"`
	Module              *PrismModule                `protobuf:"bytes,7,opt,name=module,proto3,oneof" json:"module,omitempty"`
	Cristal             *PrismCristal               `protobuf:"bytes,8,opt,name=cristal,proto3,oneof" json:"cristal,omitempty"`
	CristalNumberLeft   *int32                      `protobuf:"varint,9,opt,name=cristal_number_left,json=cristalNumberLeft,proto3,oneof" json:"cristal_number_left,omitempty"`
}

func (x *PrismInformation) Reset() {
	*x = PrismInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrismInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrismInformation) ProtoMessage() {}

func (x *PrismInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrismInformation.ProtoReflect.Descriptor instead.
func (*PrismInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{88}
}

func (x *PrismInformation) GetState() PrismInformation_PrismState {
	if x != nil {
		return x.State
	}
	return PrismInformation_NORMAL
}

func (x *PrismInformation) GetPlacementDate() int64 {
	if x != nil {
		return x.PlacementDate
	}
	return 0
}

func (x *PrismInformation) GetNuggetsCount() int64 {
	if x != nil {
		return x.NuggetsCount
	}
	return 0
}

func (x *PrismInformation) GetDurability() int32 {
	if x != nil {
		return x.Durability
	}
	return 0
}

func (x *PrismInformation) GetNextEvolutionDate() int64 {
	if x != nil {
		return x.NextEvolutionDate
	}
	return 0
}

func (x *PrismInformation) GetAllianceInformation() *AllianceInformation {
	if x != nil {
		return x.AllianceInformation
	}
	return nil
}

func (x *PrismInformation) GetModule() *PrismModule {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *PrismInformation) GetCristal() *PrismCristal {
	if x != nil {
		return x.Cristal
	}
	return nil
}

func (x *PrismInformation) GetCristalNumberLeft() int32 {
	if x != nil && x.CristalNumberLeft != nil {
		return *x.CristalNumberLeft
	}
	return 0
}

type PrismLocalizedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubAreaId      int32             `protobuf:"varint,1,opt,name=sub_area_id,json=subAreaId,proto3" json:"sub_area_id,omitempty"`
	AllianceUid    string            `protobuf:"bytes,2,opt,name=alliance_uid,json=allianceUid,proto3" json:"alliance_uid,omitempty"`
	MapCoordinates *MapCoordinates   `protobuf:"bytes,3,opt,name=map_coordinates,json=mapCoordinates,proto3" json:"map_coordinates,omitempty"`
	MapId          int64             `protobuf:"varint,4,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Prism          *PrismInformation `protobuf:"bytes,5,opt,name=prism,proto3" json:"prism,omitempty"`
}

func (x *PrismLocalizedInformation) Reset() {
	*x = PrismLocalizedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrismLocalizedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrismLocalizedInformation) ProtoMessage() {}

func (x *PrismLocalizedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrismLocalizedInformation.ProtoReflect.Descriptor instead.
func (*PrismLocalizedInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{89}
}

func (x *PrismLocalizedInformation) GetSubAreaId() int32 {
	if x != nil {
		return x.SubAreaId
	}
	return 0
}

func (x *PrismLocalizedInformation) GetAllianceUid() string {
	if x != nil {
		return x.AllianceUid
	}
	return ""
}

func (x *PrismLocalizedInformation) GetMapCoordinates() *MapCoordinates {
	if x != nil {
		return x.MapCoordinates
	}
	return nil
}

func (x *PrismLocalizedInformation) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *PrismLocalizedInformation) GetPrism() *PrismInformation {
	if x != nil {
		return x.Prism
	}
	return nil
}

type PrismModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleObject *ObjectItemInventory        `protobuf:"bytes,1,opt,name=module_object,json=moduleObject,proto3" json:"module_object,omitempty"`
	Type         PrismModule_PrismModuleType `protobuf:"varint,2,opt,name=type,proto3,enum=com.ankama.dofus.server.game.protocol.common.PrismModule_PrismModuleType" json:"type,omitempty"`
}

func (x *PrismModule) Reset() {
	*x = PrismModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrismModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrismModule) ProtoMessage() {}

func (x *PrismModule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrismModule.ProtoReflect.Descriptor instead.
func (*PrismModule) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{90}
}

func (x *PrismModule) GetModuleObject() *ObjectItemInventory {
	if x != nil {
		return x.ModuleObject
	}
	return nil
}

func (x *PrismModule) GetType() PrismModule_PrismModuleType {
	if x != nil {
		return x.Type
	}
	return PrismModule_NO_MODULE
}

type PrismCristal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CristalObject *ObjectItemInventory          `protobuf:"bytes,1,opt,name=cristal_object,json=cristalObject,proto3" json:"cristal_object,omitempty"`
	Type          PrismCristal_PrismCristalType `protobuf:"varint,2,opt,name=type,proto3,enum=com.ankama.dofus.server.game.protocol.common.PrismCristal_PrismCristalType" json:"type,omitempty"`
}

func (x *PrismCristal) Reset() {
	*x = PrismCristal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrismCristal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrismCristal) ProtoMessage() {}

func (x *PrismCristal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrismCristal.ProtoReflect.Descriptor instead.
func (*PrismCristal) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{91}
}

func (x *PrismCristal) GetCristalObject() *ObjectItemInventory {
	if x != nil {
		return x.CristalObject
	}
	return nil
}

func (x *PrismCristal) GetType() PrismCristal_PrismCristalType {
	if x != nil {
		return x.Type
	}
	return PrismCristal_NO_CRISTAL
}

type AllianceRecruitmentInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocialUid               string                `protobuf:"bytes,1,opt,name=social_uid,json=socialUid,proto3" json:"social_uid,omitempty"`
	RecruitmentType         SocialRecruitmentType `protobuf:"varint,2,opt,name=recruitment_type,json=recruitmentType,proto3,enum=com.ankama.dofus.server.game.protocol.common.SocialRecruitmentType" json:"recruitment_type,omitempty"`
	Title                   string                `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Text                    string                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	SelectedLanguages       []int32               `protobuf:"varint,5,rep,packed,name=selected_languages,json=selectedLanguages,proto3" json:"selected_languages,omitempty"`
	SelectedCriterion       []int32               `protobuf:"varint,6,rep,packed,name=selected_criterion,json=selectedCriterion,proto3" json:"selected_criterion,omitempty"`
	MinLevel                int32                 `protobuf:"varint,7,opt,name=min_level,json=minLevel,proto3" json:"min_level,omitempty"`
	MinLevelFacultative     bool                  `protobuf:"varint,8,opt,name=min_level_facultative,json=minLevelFacultative,proto3" json:"min_level_facultative,omitempty"`
	InvalidatedByModeration bool                  `protobuf:"varint,9,opt,name=invalidated_by_moderation,json=invalidatedByModeration,proto3" json:"invalidated_by_moderation,omitempty"`
	LastEditPlayerName      string                `protobuf:"bytes,10,opt,name=last_edit_player_name,json=lastEditPlayerName,proto3" json:"last_edit_player_name,omitempty"`
	LastEditDate            int64                 `protobuf:"varint,11,opt,name=last_edit_date,json=lastEditDate,proto3" json:"last_edit_date,omitempty"`
	AutoLocked              bool                  `protobuf:"varint,12,opt,name=auto_locked,json=autoLocked,proto3" json:"auto_locked,omitempty"`
}

func (x *AllianceRecruitmentInformation) Reset() {
	*x = AllianceRecruitmentInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllianceRecruitmentInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllianceRecruitmentInformation) ProtoMessage() {}

func (x *AllianceRecruitmentInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllianceRecruitmentInformation.ProtoReflect.Descriptor instead.
func (*AllianceRecruitmentInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{92}
}

func (x *AllianceRecruitmentInformation) GetSocialUid() string {
	if x != nil {
		return x.SocialUid
	}
	return ""
}

func (x *AllianceRecruitmentInformation) GetRecruitmentType() SocialRecruitmentType {
	if x != nil {
		return x.RecruitmentType
	}
	return SocialRecruitmentType_DISABLED
}

func (x *AllianceRecruitmentInformation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AllianceRecruitmentInformation) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AllianceRecruitmentInformation) GetSelectedLanguages() []int32 {
	if x != nil {
		return x.SelectedLanguages
	}
	return nil
}

func (x *AllianceRecruitmentInformation) GetSelectedCriterion() []int32 {
	if x != nil {
		return x.SelectedCriterion
	}
	return nil
}

func (x *AllianceRecruitmentInformation) GetMinLevel() int32 {
	if x != nil {
		return x.MinLevel
	}
	return 0
}

func (x *AllianceRecruitmentInformation) GetMinLevelFacultative() bool {
	if x != nil {
		return x.MinLevelFacultative
	}
	return false
}

func (x *AllianceRecruitmentInformation) GetInvalidatedByModeration() bool {
	if x != nil {
		return x.InvalidatedByModeration
	}
	return false
}

func (x *AllianceRecruitmentInformation) GetLastEditPlayerName() string {
	if x != nil {
		return x.LastEditPlayerName
	}
	return ""
}

func (x *AllianceRecruitmentInformation) GetLastEditDate() int64 {
	if x != nil {
		return x.LastEditDate
	}
	return 0
}

func (x *AllianceRecruitmentInformation) GetAutoLocked() bool {
	if x != nil {
		return x.AutoLocked
	}
	return false
}

type SocialEmblem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolShapeId     int32 `protobuf:"varint,1,opt,name=symbol_shape_id,json=symbolShapeId,proto3" json:"symbol_shape_id,omitempty"`
	SymbolColor       int32 `protobuf:"varint,2,opt,name=symbol_color,json=symbolColor,proto3" json:"symbol_color,omitempty"`
	BackgroundShapeId int32 `protobuf:"varint,3,opt,name=background_shape_id,json=backgroundShapeId,proto3" json:"background_shape_id,omitempty"`
	BackgroundColor   int32 `protobuf:"varint,4,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
}

func (x *SocialEmblem) Reset() {
	*x = SocialEmblem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialEmblem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialEmblem) ProtoMessage() {}

func (x *SocialEmblem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialEmblem.ProtoReflect.Descriptor instead.
func (*SocialEmblem) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{93}
}

func (x *SocialEmblem) GetSymbolShapeId() int32 {
	if x != nil {
		return x.SymbolShapeId
	}
	return 0
}

func (x *SocialEmblem) GetSymbolColor() int32 {
	if x != nil {
		return x.SymbolColor
	}
	return 0
}

func (x *SocialEmblem) GetBackgroundShapeId() int32 {
	if x != nil {
		return x.BackgroundShapeId
	}
	return 0
}

func (x *SocialEmblem) GetBackgroundColor() int32 {
	if x != nil {
		return x.BackgroundColor
	}
	return 0
}

type SocialNoticeInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content    string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp  int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MemberId   int64  `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	MemberName string `protobuf:"bytes,4,opt,name=member_name,json=memberName,proto3" json:"member_name,omitempty"`
}

func (x *SocialNoticeInformation) Reset() {
	*x = SocialNoticeInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialNoticeInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialNoticeInformation) ProtoMessage() {}

func (x *SocialNoticeInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialNoticeInformation.ProtoReflect.Descriptor instead.
func (*SocialNoticeInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{94}
}

func (x *SocialNoticeInformation) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SocialNoticeInformation) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SocialNoticeInformation) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *SocialNoticeInformation) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

type RankInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrderAndGfx        *RankInformation_OrderAndGfx        `protobuf:"bytes,3,opt,name=order_and_gfx,json=orderAndGfx,proto3,oneof" json:"order_and_gfx,omitempty"`
	PrivateInformation *RankInformation_PrivateInformation `protobuf:"bytes,4,opt,name=private_information,json=privateInformation,proto3,oneof" json:"private_information,omitempty"`
}

func (x *RankInformation) Reset() {
	*x = RankInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankInformation) ProtoMessage() {}

func (x *RankInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankInformation.ProtoReflect.Descriptor instead.
func (*RankInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{95}
}

func (x *RankInformation) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RankInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RankInformation) GetOrderAndGfx() *RankInformation_OrderAndGfx {
	if x != nil {
		return x.OrderAndGfx
	}
	return nil
}

func (x *RankInformation) GetPrivateInformation() *RankInformation_PrivateInformation {
	if x != nil {
		return x.PrivateInformation
	}
	return nil
}

type TaxCollectorInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                      string                                  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FirstNameId              int32                                   `protobuf:"varint,2,opt,name=first_name_id,json=firstNameId,proto3" json:"first_name_id,omitempty"`
	LastNameId               int32                                   `protobuf:"varint,3,opt,name=last_name_id,json=lastNameId,proto3" json:"last_name_id,omitempty"`
	Alliance                 *AllianceInformation                    `protobuf:"bytes,4,opt,name=alliance,proto3" json:"alliance,omitempty"`
	CallerId                 int64                                   `protobuf:"varint,5,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	CallerName               string                                  `protobuf:"bytes,6,opt,name=caller_name,json=callerName,proto3" json:"caller_name,omitempty"`
	HiredDate                int64                                   `protobuf:"varint,7,opt,name=hired_date,json=hiredDate,proto3" json:"hired_date,omitempty"`
	Coordinates              *MapCoordinates                         `protobuf:"bytes,8,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	SubAreaId                int32                                   `protobuf:"varint,9,opt,name=sub_area_id,json=subAreaId,proto3" json:"sub_area_id,omitempty"`
	MapId                    int64                                   `protobuf:"varint,10,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	State                    TaxCollectorState                       `protobuf:"varint,11,opt,name=state,proto3,enum=com.ankama.dofus.server.game.protocol.common.TaxCollectorState" json:"state,omitempty"`
	EntityLook               *EntityLook                             `protobuf:"bytes,12,opt,name=entity_look,json=entityLook,proto3" json:"entity_look,omitempty"`
	ComplementaryInformation []*TaxCollectorComplementaryInformation `protobuf:"bytes,13,rep,name=complementary_information,json=complementaryInformation,proto3" json:"complementary_information,omitempty"`
	CharacterCharacteristics []*CharacterCharacteristic              `protobuf:"bytes,14,rep,name=character_characteristics,json=characterCharacteristics,proto3" json:"character_characteristics,omitempty"`
	Equipments               []*ObjectItemInventory                  `protobuf:"bytes,15,rep,name=equipments,proto3" json:"equipments,omitempty"`
	Spells                   []*TaxCollectorOrderedSpell             `protobuf:"bytes,16,rep,name=spells,proto3" json:"spells,omitempty"`
}

func (x *TaxCollectorInformation) Reset() {
	*x = TaxCollectorInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxCollectorInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxCollectorInformation) ProtoMessage() {}

func (x *TaxCollectorInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxCollectorInformation.ProtoReflect.Descriptor instead.
func (*TaxCollectorInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{96}
}

func (x *TaxCollectorInformation) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *TaxCollectorInformation) GetFirstNameId() int32 {
	if x != nil {
		return x.FirstNameId
	}
	return 0
}

func (x *TaxCollectorInformation) GetLastNameId() int32 {
	if x != nil {
		return x.LastNameId
	}
	return 0
}

func (x *TaxCollectorInformation) GetAlliance() *AllianceInformation {
	if x != nil {
		return x.Alliance
	}
	return nil
}

func (x *TaxCollectorInformation) GetCallerId() int64 {
	if x != nil {
		return x.CallerId
	}
	return 0
}

func (x *TaxCollectorInformation) GetCallerName() string {
	if x != nil {
		return x.CallerName
	}
	return ""
}

func (x *TaxCollectorInformation) GetHiredDate() int64 {
	if x != nil {
		return x.HiredDate
	}
	return 0
}

func (x *TaxCollectorInformation) GetCoordinates() *MapCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *TaxCollectorInformation) GetSubAreaId() int32 {
	if x != nil {
		return x.SubAreaId
	}
	return 0
}

func (x *TaxCollectorInformation) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *TaxCollectorInformation) GetState() TaxCollectorState {
	if x != nil {
		return x.State
	}
	return TaxCollectorState_STATE_COLLECTING
}

func (x *TaxCollectorInformation) GetEntityLook() *EntityLook {
	if x != nil {
		return x.EntityLook
	}
	return nil
}

func (x *TaxCollectorInformation) GetComplementaryInformation() []*TaxCollectorComplementaryInformation {
	if x != nil {
		return x.ComplementaryInformation
	}
	return nil
}

func (x *TaxCollectorInformation) GetCharacterCharacteristics() []*CharacterCharacteristic {
	if x != nil {
		return x.CharacterCharacteristics
	}
	return nil
}

func (x *TaxCollectorInformation) GetEquipments() []*ObjectItemInventory {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *TaxCollectorInformation) GetSpells() []*TaxCollectorOrderedSpell {
	if x != nil {
		return x.Spells
	}
	return nil
}

type TaxCollectorStaticInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FirstNameId int32                `protobuf:"varint,2,opt,name=first_name_id,json=firstNameId,proto3" json:"first_name_id,omitempty"`
	LastNameId  int32                `protobuf:"varint,3,opt,name=last_name_id,json=lastNameId,proto3" json:"last_name_id,omitempty"`
	Alliance    *AllianceInformation `protobuf:"bytes,4,opt,name=alliance,proto3" json:"alliance,omitempty"`
	CallerId    int64                `protobuf:"varint,5,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
}

func (x *TaxCollectorStaticInformation) Reset() {
	*x = TaxCollectorStaticInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxCollectorStaticInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxCollectorStaticInformation) ProtoMessage() {}

func (x *TaxCollectorStaticInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxCollectorStaticInformation.ProtoReflect.Descriptor instead.
func (*TaxCollectorStaticInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{97}
}

func (x *TaxCollectorStaticInformation) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *TaxCollectorStaticInformation) GetFirstNameId() int32 {
	if x != nil {
		return x.FirstNameId
	}
	return 0
}

func (x *TaxCollectorStaticInformation) GetLastNameId() int32 {
	if x != nil {
		return x.LastNameId
	}
	return 0
}

func (x *TaxCollectorStaticInformation) GetAlliance() *AllianceInformation {
	if x != nil {
		return x.Alliance
	}
	return nil
}

func (x *TaxCollectorStaticInformation) GetCallerId() int64 {
	if x != nil {
		return x.CallerId
	}
	return 0
}

type TaxCollectorComplementaryInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ComplementaryInformation:
	//
	//	*TaxCollectorComplementaryInformation_LootInformation
	//	*TaxCollectorComplementaryInformation_WaitingForHelpInformation
	ComplementaryInformation isTaxCollectorComplementaryInformation_ComplementaryInformation `protobuf_oneof:"complementary_information"`
}

func (x *TaxCollectorComplementaryInformation) Reset() {
	*x = TaxCollectorComplementaryInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxCollectorComplementaryInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxCollectorComplementaryInformation) ProtoMessage() {}

func (x *TaxCollectorComplementaryInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxCollectorComplementaryInformation.ProtoReflect.Descriptor instead.
func (*TaxCollectorComplementaryInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{98}
}

func (m *TaxCollectorComplementaryInformation) GetComplementaryInformation() isTaxCollectorComplementaryInformation_ComplementaryInformation {
	if m != nil {
		return m.ComplementaryInformation
	}
	return nil
}

func (x *TaxCollectorComplementaryInformation) GetLootInformation() *TaxCollectorLootInformation {
	if x, ok := x.GetComplementaryInformation().(*TaxCollectorComplementaryInformation_LootInformation); ok {
		return x.LootInformation
	}
	return nil
}

func (x *TaxCollectorComplementaryInformation) GetWaitingForHelpInformation() *TaxCollectorWaitingForHelpInformation {
	if x, ok := x.GetComplementaryInformation().(*TaxCollectorComplementaryInformation_WaitingForHelpInformation); ok {
		return x.WaitingForHelpInformation
	}
	return nil
}

type isTaxCollectorComplementaryInformation_ComplementaryInformation interface {
	isTaxCollectorComplementaryInformation_ComplementaryInformation()
}

type TaxCollectorComplementaryInformation_LootInformation struct {
	LootInformation *TaxCollectorLootInformation `protobuf:"bytes,1,opt,name=loot_information,json=lootInformation,proto3,oneof"`
}

type TaxCollectorComplementaryInformation_WaitingForHelpInformation struct {
	WaitingForHelpInformation *TaxCollectorWaitingForHelpInformation `protobuf:"bytes,2,opt,name=waiting_for_help_information,json=waitingForHelpInformation,proto3,oneof"`
}

func (*TaxCollectorComplementaryInformation_LootInformation) isTaxCollectorComplementaryInformation_ComplementaryInformation() {
}

func (*TaxCollectorComplementaryInformation_WaitingForHelpInformation) isTaxCollectorComplementaryInformation_ComplementaryInformation() {
}

type TaxCollectorLootInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods            int32 `protobuf:"varint,1,opt,name=pods,proto3" json:"pods,omitempty"`
	ItemsKamasValue int64 `protobuf:"varint,2,opt,name=items_kamas_value,json=itemsKamasValue,proto3" json:"items_kamas_value,omitempty"`
}

func (x *TaxCollectorLootInformation) Reset() {
	*x = TaxCollectorLootInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxCollectorLootInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxCollectorLootInformation) ProtoMessage() {}

func (x *TaxCollectorLootInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxCollectorLootInformation.ProtoReflect.Descriptor instead.
func (*TaxCollectorLootInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{99}
}

func (x *TaxCollectorLootInformation) GetPods() int32 {
	if x != nil {
		return x.Pods
	}
	return 0
}

func (x *TaxCollectorLootInformation) GetItemsKamasValue() int64 {
	if x != nil {
		return x.ItemsKamasValue
	}
	return 0
}

type TaxCollectorWaitingForHelpInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeLeftBeforeFight int64 `protobuf:"varint,1,opt,name=time_left_before_fight,json=timeLeftBeforeFight,proto3" json:"time_left_before_fight,omitempty"`
	PlacementTimeLeft   int64 `protobuf:"varint,2,opt,name=placement_time_left,json=placementTimeLeft,proto3" json:"placement_time_left,omitempty"`
	DefenderSlotsLeft   int32 `protobuf:"varint,3,opt,name=defender_slots_left,json=defenderSlotsLeft,proto3" json:"defender_slots_left,omitempty"`
}

func (x *TaxCollectorWaitingForHelpInformation) Reset() {
	*x = TaxCollectorWaitingForHelpInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxCollectorWaitingForHelpInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxCollectorWaitingForHelpInformation) ProtoMessage() {}

func (x *TaxCollectorWaitingForHelpInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxCollectorWaitingForHelpInformation.ProtoReflect.Descriptor instead.
func (*TaxCollectorWaitingForHelpInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{100}
}

func (x *TaxCollectorWaitingForHelpInformation) GetTimeLeftBeforeFight() int64 {
	if x != nil {
		return x.TimeLeftBeforeFight
	}
	return 0
}

func (x *TaxCollectorWaitingForHelpInformation) GetPlacementTimeLeft() int64 {
	if x != nil {
		return x.PlacementTimeLeft
	}
	return 0
}

func (x *TaxCollectorWaitingForHelpInformation) GetDefenderSlotsLeft() int32 {
	if x != nil {
		return x.DefenderSlotsLeft
	}
	return 0
}

type TaxCollectorOrderedSpell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpellId int32 `protobuf:"varint,1,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	SlotId  int32 `protobuf:"varint,2,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
}

func (x *TaxCollectorOrderedSpell) Reset() {
	*x = TaxCollectorOrderedSpell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxCollectorOrderedSpell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxCollectorOrderedSpell) ProtoMessage() {}

func (x *TaxCollectorOrderedSpell) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxCollectorOrderedSpell.ProtoReflect.Descriptor instead.
func (*TaxCollectorOrderedSpell) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{101}
}

func (x *TaxCollectorOrderedSpell) GetSpellId() int32 {
	if x != nil {
		return x.SpellId
	}
	return 0
}

func (x *TaxCollectorOrderedSpell) GetSlotId() int32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

type TaxCollectorPreset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetUid       string                      `protobuf:"bytes,1,opt,name=preset_uid,json=presetUid,proto3" json:"preset_uid,omitempty"`
	Spells          []*TaxCollectorOrderedSpell `protobuf:"bytes,2,rep,name=spells,proto3" json:"spells,omitempty"`
	Characteristics []*CharacterCharacteristic  `protobuf:"bytes,3,rep,name=characteristics,proto3" json:"characteristics,omitempty"`
}

func (x *TaxCollectorPreset) Reset() {
	*x = TaxCollectorPreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxCollectorPreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxCollectorPreset) ProtoMessage() {}

func (x *TaxCollectorPreset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxCollectorPreset.ProtoReflect.Descriptor instead.
func (*TaxCollectorPreset) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{102}
}

func (x *TaxCollectorPreset) GetPresetUid() string {
	if x != nil {
		return x.PresetUid
	}
	return ""
}

func (x *TaxCollectorPreset) GetSpells() []*TaxCollectorOrderedSpell {
	if x != nil {
		return x.Spells
	}
	return nil
}

func (x *TaxCollectorPreset) GetCharacteristics() []*CharacterCharacteristic {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

type MountData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ModelId                int32           `protobuf:"varint,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Ancestors              []int32         `protobuf:"varint,3,rep,packed,name=ancestors,proto3" json:"ancestors,omitempty"`
	Behaviors              []int32         `protobuf:"varint,4,rep,packed,name=behaviors,proto3" json:"behaviors,omitempty"`
	Name                   string          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Gender                 Gender          `protobuf:"varint,6,opt,name=gender,proto3,enum=com.ankama.dofus.server.game.protocol.common.Gender" json:"gender,omitempty"`
	OwnerId                int64           `protobuf:"varint,7,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Experience             int64           `protobuf:"varint,8,opt,name=experience,proto3" json:"experience,omitempty"`
	ExperienceForLevel     int64           `protobuf:"varint,9,opt,name=experience_for_level,json=experienceForLevel,proto3" json:"experience_for_level,omitempty"`
	Level                  int32           `protobuf:"varint,11,opt,name=level,proto3" json:"level,omitempty"`
	IsRideable             bool            `protobuf:"varint,12,opt,name=is_rideable,json=isRideable,proto3" json:"is_rideable,omitempty"`
	MaxPods                int32           `protobuf:"varint,13,opt,name=max_pods,json=maxPods,proto3" json:"max_pods,omitempty"`
	IsWild                 bool            `protobuf:"varint,14,opt,name=is_wild,json=isWild,proto3" json:"is_wild,omitempty"`
	Stamina                int32           `protobuf:"varint,15,opt,name=stamina,proto3" json:"stamina,omitempty"`
	StaminaMax             int32           `protobuf:"varint,16,opt,name=stamina_max,json=staminaMax,proto3" json:"stamina_max,omitempty"`
	Maturity               int32           `protobuf:"varint,17,opt,name=maturity,proto3" json:"maturity,omitempty"`
	MaturityForAdult       int32           `protobuf:"varint,18,opt,name=maturity_for_adult,json=maturityForAdult,proto3" json:"maturity_for_adult,omitempty"`
	Energy                 int32           `protobuf:"varint,19,opt,name=energy,proto3" json:"energy,omitempty"`
	EnergyMax              int32           `protobuf:"varint,20,opt,name=energy_max,json=energyMax,proto3" json:"energy_max,omitempty"`
	Serenity               int32           `protobuf:"varint,21,opt,name=serenity,proto3" json:"serenity,omitempty"`
	AggressivenessMax      int32           `protobuf:"varint,22,opt,name=aggressiveness_max,json=aggressivenessMax,proto3" json:"aggressiveness_max,omitempty"`
	SerenityMax            int32           `protobuf:"varint,23,opt,name=serenity_max,json=serenityMax,proto3" json:"serenity_max,omitempty"`
	Love                   int32           `protobuf:"varint,24,opt,name=love,proto3" json:"love,omitempty"`
	LoveMax                int32           `protobuf:"varint,25,opt,name=love_max,json=loveMax,proto3" json:"love_max,omitempty"`
	FertilizationTime      int32           `protobuf:"varint,26,opt,name=fertilization_time,json=fertilizationTime,proto3" json:"fertilization_time,omitempty"`
	IsFertilizationReady   bool            `protobuf:"varint,27,opt,name=is_fertilization_ready,json=isFertilizationReady,proto3" json:"is_fertilization_ready,omitempty"`
	BoostLimiter           int32           `protobuf:"varint,28,opt,name=boost_limiter,json=boostLimiter,proto3" json:"boost_limiter,omitempty"`
	BoostMax               int64           `protobuf:"varint,29,opt,name=boost_max,json=boostMax,proto3" json:"boost_max,omitempty"`
	ReproductionCount      int32           `protobuf:"varint,30,opt,name=reproduction_count,json=reproductionCount,proto3" json:"reproduction_count,omitempty"`
	ReproductionCountMax   int64           `protobuf:"varint,31,opt,name=reproduction_count_max,json=reproductionCountMax,proto3" json:"reproduction_count_max,omitempty"`
	HarnessGid             int32           `protobuf:"varint,32,opt,name=harness_gid,json=harnessGid,proto3" json:"harness_gid,omitempty"`
	UseHarnessColors       bool            `protobuf:"varint,33,opt,name=use_harness_colors,json=useHarnessColors,proto3" json:"use_harness_colors,omitempty"`
	Effects                []*ObjectEffect `protobuf:"bytes,34,rep,name=effects,proto3" json:"effects,omitempty"`
	ExperienceForNextLevel *int64          `protobuf:"varint,10,opt,name=experience_for_next_level,json=experienceForNextLevel,proto3,oneof" json:"experience_for_next_level,omitempty"`
}

func (x *MountData) Reset() {
	*x = MountData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountData) ProtoMessage() {}

func (x *MountData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountData.ProtoReflect.Descriptor instead.
func (*MountData) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{103}
}

func (x *MountData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MountData) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *MountData) GetAncestors() []int32 {
	if x != nil {
		return x.Ancestors
	}
	return nil
}

func (x *MountData) GetBehaviors() []int32 {
	if x != nil {
		return x.Behaviors
	}
	return nil
}

func (x *MountData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MountData) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_MALE
}

func (x *MountData) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *MountData) GetExperience() int64 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *MountData) GetExperienceForLevel() int64 {
	if x != nil {
		return x.ExperienceForLevel
	}
	return 0
}

func (x *MountData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MountData) GetIsRideable() bool {
	if x != nil {
		return x.IsRideable
	}
	return false
}

func (x *MountData) GetMaxPods() int32 {
	if x != nil {
		return x.MaxPods
	}
	return 0
}

func (x *MountData) GetIsWild() bool {
	if x != nil {
		return x.IsWild
	}
	return false
}

func (x *MountData) GetStamina() int32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

func (x *MountData) GetStaminaMax() int32 {
	if x != nil {
		return x.StaminaMax
	}
	return 0
}

func (x *MountData) GetMaturity() int32 {
	if x != nil {
		return x.Maturity
	}
	return 0
}

func (x *MountData) GetMaturityForAdult() int32 {
	if x != nil {
		return x.MaturityForAdult
	}
	return 0
}

func (x *MountData) GetEnergy() int32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *MountData) GetEnergyMax() int32 {
	if x != nil {
		return x.EnergyMax
	}
	return 0
}

func (x *MountData) GetSerenity() int32 {
	if x != nil {
		return x.Serenity
	}
	return 0
}

func (x *MountData) GetAggressivenessMax() int32 {
	if x != nil {
		return x.AggressivenessMax
	}
	return 0
}

func (x *MountData) GetSerenityMax() int32 {
	if x != nil {
		return x.SerenityMax
	}
	return 0
}

func (x *MountData) GetLove() int32 {
	if x != nil {
		return x.Love
	}
	return 0
}

func (x *MountData) GetLoveMax() int32 {
	if x != nil {
		return x.LoveMax
	}
	return 0
}

func (x *MountData) GetFertilizationTime() int32 {
	if x != nil {
		return x.FertilizationTime
	}
	return 0
}

func (x *MountData) GetIsFertilizationReady() bool {
	if x != nil {
		return x.IsFertilizationReady
	}
	return false
}

func (x *MountData) GetBoostLimiter() int32 {
	if x != nil {
		return x.BoostLimiter
	}
	return 0
}

func (x *MountData) GetBoostMax() int64 {
	if x != nil {
		return x.BoostMax
	}
	return 0
}

func (x *MountData) GetReproductionCount() int32 {
	if x != nil {
		return x.ReproductionCount
	}
	return 0
}

func (x *MountData) GetReproductionCountMax() int64 {
	if x != nil {
		return x.ReproductionCountMax
	}
	return 0
}

func (x *MountData) GetHarnessGid() int32 {
	if x != nil {
		return x.HarnessGid
	}
	return 0
}

func (x *MountData) GetUseHarnessColors() bool {
	if x != nil {
		return x.UseHarnessColors
	}
	return false
}

func (x *MountData) GetEffects() []*ObjectEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *MountData) GetExperienceForNextLevel() int64 {
	if x != nil && x.ExperienceForNextLevel != nil {
		return *x.ExperienceForNextLevel
	}
	return 0
}

type PaddockInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxOutdoorMount int32 `protobuf:"varint,1,opt,name=max_outdoor_mount,json=maxOutdoorMount,proto3" json:"max_outdoor_mount,omitempty"`
	MaxItems        int32 `protobuf:"varint,2,opt,name=max_items,json=maxItems,proto3" json:"max_items,omitempty"`
	// Types that are assignable to Information:
	//
	//	*PaddockInformation_Content
	//	*PaddockInformation_Instances
	Information isPaddockInformation_Information `protobuf_oneof:"information"`
}

func (x *PaddockInformation) Reset() {
	*x = PaddockInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaddockInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaddockInformation) ProtoMessage() {}

func (x *PaddockInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaddockInformation.ProtoReflect.Descriptor instead.
func (*PaddockInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{104}
}

func (x *PaddockInformation) GetMaxOutdoorMount() int32 {
	if x != nil {
		return x.MaxOutdoorMount
	}
	return 0
}

func (x *PaddockInformation) GetMaxItems() int32 {
	if x != nil {
		return x.MaxItems
	}
	return 0
}

func (m *PaddockInformation) GetInformation() isPaddockInformation_Information {
	if m != nil {
		return m.Information
	}
	return nil
}

func (x *PaddockInformation) GetContent() *PaddockInformation_PaddockContent {
	if x, ok := x.GetInformation().(*PaddockInformation_Content); ok {
		return x.Content
	}
	return nil
}

func (x *PaddockInformation) GetInstances() *PaddockInformation_PaddockInstances {
	if x, ok := x.GetInformation().(*PaddockInformation_Instances); ok {
		return x.Instances
	}
	return nil
}

type isPaddockInformation_Information interface {
	isPaddockInformation_Information()
}

type PaddockInformation_Content struct {
	Content *PaddockInformation_PaddockContent `protobuf:"bytes,3,opt,name=content,proto3,oneof"`
}

type PaddockInformation_Instances struct {
	Instances *PaddockInformation_PaddockInstances `protobuf:"bytes,4,opt,name=instances,proto3,oneof"`
}

func (*PaddockInformation_Content) isPaddockInformation_Information() {}

func (*PaddockInformation_Instances) isPaddockInformation_Information() {}

type SpellItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpellId    int32 `protobuf:"varint,1,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	SpellLevel int32 `protobuf:"varint,2,opt,name=spell_level,json=spellLevel,proto3" json:"spell_level,omitempty"`
	Available  *bool `protobuf:"varint,3,opt,name=available,proto3,oneof" json:"available,omitempty"`
}

func (x *SpellItem) Reset() {
	*x = SpellItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpellItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellItem) ProtoMessage() {}

func (x *SpellItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellItem.ProtoReflect.Descriptor instead.
func (*SpellItem) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{105}
}

func (x *SpellItem) GetSpellId() int32 {
	if x != nil {
		return x.SpellId
	}
	return 0
}

func (x *SpellItem) GetSpellLevel() int32 {
	if x != nil {
		return x.SpellLevel
	}
	return 0
}

func (x *SpellItem) GetAvailable() bool {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return false
}

type SpellModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpellId      int32                   `protobuf:"varint,1,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	ActionType   SpellModifierActionType `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3,enum=com.ankama.dofus.server.game.protocol.common.SpellModifierActionType" json:"action_type,omitempty"`
	ModifierType SpellModifierType       `protobuf:"varint,3,opt,name=modifier_type,json=modifierType,proto3,enum=com.ankama.dofus.server.game.protocol.common.SpellModifierType" json:"modifier_type,omitempty"`
	Context      int32                   `protobuf:"varint,4,opt,name=context,proto3" json:"context,omitempty"`
	Equipment    int32                   `protobuf:"varint,5,opt,name=equipment,proto3" json:"equipment,omitempty"`
}

func (x *SpellModifier) Reset() {
	*x = SpellModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpellModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellModifier) ProtoMessage() {}

func (x *SpellModifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellModifier.ProtoReflect.Descriptor instead.
func (*SpellModifier) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{106}
}

func (x *SpellModifier) GetSpellId() int32 {
	if x != nil {
		return x.SpellId
	}
	return 0
}

func (x *SpellModifier) GetActionType() SpellModifierActionType {
	if x != nil {
		return x.ActionType
	}
	return SpellModifierActionType_ACTION_INVALID
}

func (x *SpellModifier) GetModifierType() SpellModifierType {
	if x != nil {
		return x.ModifierType
	}
	return SpellModifierType_INVALID_MODIFICATION
}

func (x *SpellModifier) GetContext() int32 {
	if x != nil {
		return x.Context
	}
	return 0
}

func (x *SpellModifier) GetEquipment() int32 {
	if x != nil {
		return x.Equipment
	}
	return 0
}

type ActorPositionInformation_ActorInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Look *EntityLook `protobuf:"bytes,1,opt,name=look,proto3" json:"look,omitempty"`
	// Types that are assignable to Information:
	//
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_
	//	*ActorPositionInformation_ActorInformation_Fighter
	Information isActorPositionInformation_ActorInformation_Information `protobuf_oneof:"information"`
}

func (x *ActorPositionInformation_ActorInformation) Reset() {
	*x = ActorPositionInformation_ActorInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation) ProtoMessage() {}

func (x *ActorPositionInformation_ActorInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ActorPositionInformation_ActorInformation) GetLook() *EntityLook {
	if x != nil {
		return x.Look
	}
	return nil
}

func (m *ActorPositionInformation_ActorInformation) GetInformation() isActorPositionInformation_ActorInformation_Information {
	if m != nil {
		return m.Information
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation) GetRolePlayActor() *ActorPositionInformation_ActorInformation_RolePlayActor {
	if x, ok := x.GetInformation().(*ActorPositionInformation_ActorInformation_RolePlayActor_); ok {
		return x.RolePlayActor
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation) GetFighter() *ActorPositionInformation_ActorInformation_FightFighterInformation {
	if x, ok := x.GetInformation().(*ActorPositionInformation_ActorInformation_Fighter); ok {
		return x.Fighter
	}
	return nil
}

type isActorPositionInformation_ActorInformation_Information interface {
	isActorPositionInformation_ActorInformation_Information()
}

type ActorPositionInformation_ActorInformation_RolePlayActor_ struct {
	RolePlayActor *ActorPositionInformation_ActorInformation_RolePlayActor `protobuf:"bytes,2,opt,name=role_play_actor,json=rolePlayActor,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_Fighter struct {
	Fighter *ActorPositionInformation_ActorInformation_FightFighterInformation `protobuf:"bytes,3,opt,name=fighter,proto3,oneof"`
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_) isActorPositionInformation_ActorInformation_Information() {
}

func (*ActorPositionInformation_ActorInformation_Fighter) isActorPositionInformation_ActorInformation_Information() {
}

type ActorPositionInformation_ActorInformation_RolePlayActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Actor:
	//
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor_
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NpcActor
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_PrismActor
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_PortalActor
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_TreasureHuntNpcId
	Actor isActorPositionInformation_ActorInformation_RolePlayActor_Actor `protobuf_oneof:"actor"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor) ProtoMessage() {}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (m *ActorPositionInformation_ActorInformation_RolePlayActor) GetActor() isActorPositionInformation_ActorInformation_RolePlayActor_Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor) GetNamedActor() *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor {
	if x, ok := x.GetActor().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_); ok {
		return x.NamedActor
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor) GetTaxCollectorActor() *ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor {
	if x, ok := x.GetActor().(*ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor_); ok {
		return x.TaxCollectorActor
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor) GetMonsterGroupActor() *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor {
	if x, ok := x.GetActor().(*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_); ok {
		return x.MonsterGroupActor
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor) GetNpcActor() *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation {
	if x, ok := x.GetActor().(*ActorPositionInformation_ActorInformation_RolePlayActor_NpcActor); ok {
		return x.NpcActor
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor) GetPrismActor() *PrismInformation {
	if x, ok := x.GetActor().(*ActorPositionInformation_ActorInformation_RolePlayActor_PrismActor); ok {
		return x.PrismActor
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor) GetPortalActor() *PortalInformation {
	if x, ok := x.GetActor().(*ActorPositionInformation_ActorInformation_RolePlayActor_PortalActor); ok {
		return x.PortalActor
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor) GetTreasureHuntNpcId() int32 {
	if x, ok := x.GetActor().(*ActorPositionInformation_ActorInformation_RolePlayActor_TreasureHuntNpcId); ok {
		return x.TreasureHuntNpcId
	}
	return 0
}

type isActorPositionInformation_ActorInformation_RolePlayActor_Actor interface {
	isActorPositionInformation_ActorInformation_RolePlayActor_Actor()
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_ struct {
	NamedActor *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor `protobuf:"bytes,4,opt,name=named_actor,json=namedActor,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor_ struct {
	TaxCollectorActor *ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor `protobuf:"bytes,5,opt,name=tax_collector_actor,json=taxCollectorActor,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_ struct {
	MonsterGroupActor *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor `protobuf:"bytes,6,opt,name=monster_group_actor,json=monsterGroupActor,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NpcActor struct {
	NpcActor *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation `protobuf:"bytes,7,opt,name=npc_actor,json=npcActor,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_PrismActor struct {
	PrismActor *PrismInformation `protobuf:"bytes,8,opt,name=prism_actor,json=prismActor,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_PortalActor struct {
	PortalActor *PortalInformation `protobuf:"bytes,9,opt,name=portal_actor,json=portalActor,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_TreasureHuntNpcId struct {
	TreasureHuntNpcId int32 `protobuf:"varint,10,opt,name=treasure_hunt_npc_id,json=treasureHuntNpcId,proto3,oneof"`
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_) isActorPositionInformation_ActorInformation_RolePlayActor_Actor() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor_) isActorPositionInformation_ActorInformation_RolePlayActor_Actor() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_) isActorPositionInformation_ActorInformation_RolePlayActor_Actor() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NpcActor) isActorPositionInformation_ActorInformation_RolePlayActor_Actor() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_PrismActor) isActorPositionInformation_ActorInformation_RolePlayActor_Actor() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_PortalActor) isActorPositionInformation_ActorInformation_RolePlayActor_Actor() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_TreasureHuntNpcId) isActorPositionInformation_ActorInformation_RolePlayActor_Actor() {
}

type ActorPositionInformation_ActorInformation_FightFighterInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpawnInformation  *SpawnInformation     `protobuf:"bytes,1,opt,name=spawn_information,json=spawnInformation,proto3" json:"spawn_information,omitempty"`
	Wave              int32                 `protobuf:"varint,2,opt,name=wave,proto3" json:"wave,omitempty"`
	Stats             *FightCharacteristics `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
	PreviousPositions []int32               `protobuf:"varint,4,rep,packed,name=previous_positions,json=previousPositions,proto3" json:"previous_positions,omitempty"`
	// Types that are assignable to FighterInformation:
	//
	//	*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighter
	//	*ActorPositionInformation_ActorInformation_FightFighterInformation_AiFighter
	//	*ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighter
	FighterInformation isActorPositionInformation_ActorInformation_FightFighterInformation_FighterInformation `protobuf_oneof:"fighter_information"`
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation) Reset() {
	*x = ActorPositionInformation_ActorInformation_FightFighterInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation) ProtoMessage() {}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_FightFighterInformation.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_FightFighterInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation) GetSpawnInformation() *SpawnInformation {
	if x != nil {
		return x.SpawnInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation) GetWave() int32 {
	if x != nil {
		return x.Wave
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation) GetStats() *FightCharacteristics {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation) GetPreviousPositions() []int32 {
	if x != nil {
		return x.PreviousPositions
	}
	return nil
}

func (m *ActorPositionInformation_ActorInformation_FightFighterInformation) GetFighterInformation() isActorPositionInformation_ActorInformation_FightFighterInformation_FighterInformation {
	if m != nil {
		return m.FighterInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation) GetNamedFighter() *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation {
	if x, ok := x.GetFighterInformation().(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighter); ok {
		return x.NamedFighter
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation) GetAiFighter() *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation {
	if x, ok := x.GetFighterInformation().(*ActorPositionInformation_ActorInformation_FightFighterInformation_AiFighter); ok {
		return x.AiFighter
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation) GetEntityFighter() *ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation {
	if x, ok := x.GetFighterInformation().(*ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighter); ok {
		return x.EntityFighter
	}
	return nil
}

type isActorPositionInformation_ActorInformation_FightFighterInformation_FighterInformation interface {
	isActorPositionInformation_ActorInformation_FightFighterInformation_FighterInformation()
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighter struct {
	NamedFighter *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation `protobuf:"bytes,5,opt,name=named_fighter,json=namedFighter,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_AiFighter struct {
	AiFighter *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation `protobuf:"bytes,6,opt,name=ai_fighter,json=aiFighter,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighter struct {
	EntityFighter *ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation `protobuf:"bytes,7,opt,name=entity_fighter,json=entityFighter,proto3,oneof"`
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighter) isActorPositionInformation_ActorInformation_FightFighterInformation_FighterInformation() {
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_AiFighter) isActorPositionInformation_ActorInformation_FightFighterInformation_FighterInformation() {
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighter) isActorPositionInformation_ActorInformation_FightFighterInformation_FighterInformation() {
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Actor:
	//
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_HumanoidInformation
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_MountInformation
	Actor isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Actor `protobuf_oneof:"actor"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor) ProtoMessage() {}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor) GetActor() isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor) GetHumanoidInformation() *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid {
	if x, ok := x.GetActor().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_HumanoidInformation); ok {
		return x.HumanoidInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor) GetMountInformation() *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount {
	if x, ok := x.GetActor().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_MountInformation); ok {
		return x.MountInformation
	}
	return nil
}

type isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Actor interface {
	isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Actor()
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_HumanoidInformation struct {
	HumanoidInformation *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid `protobuf:"bytes,2,opt,name=humanoid_information,json=humanoidInformation,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_MountInformation struct {
	MountInformation *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount `protobuf:"bytes,3,opt,name=mount_information,json=mountInformation,proto3,oneof"`
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_HumanoidInformation) isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Actor() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_MountInformation) isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Actor() {
}

type ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identification *TaxCollectorStaticInformation `protobuf:"bytes,1,opt,name=identification,proto3" json:"identification,omitempty"`
	Attack         int32                          `protobuf:"varint,2,opt,name=attack,proto3" json:"attack,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor) ProtoMessage() {}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 1}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor) GetIdentification() *TaxCollectorStaticInformation {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor) GetAttack() int32 {
	if x != nil {
		return x.Attack
	}
	return 0
}

type ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identification  *MonsterGroupStaticInformation                                                             `protobuf:"bytes,1,opt,name=identification,proto3" json:"identification,omitempty"`
	LootShare       int32                                                                                      `protobuf:"varint,2,opt,name=loot_share,json=lootShare,proto3" json:"loot_share,omitempty"`
	Alignment       Alignment                                                                                  `protobuf:"varint,3,opt,name=alignment,proto3,enum=com.ankama.dofus.server.game.protocol.common.Alignment" json:"alignment,omitempty"`
	WaveInformation *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation `protobuf:"bytes,4,opt,name=wave_information,json=waveInformation,proto3,oneof" json:"wave_information,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor) ProtoMessage() {}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 2}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor) GetIdentification() *MonsterGroupStaticInformation {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor) GetLootShare() int32 {
	if x != nil {
		return x.LootShare
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor) GetAlignment() Alignment {
	if x != nil {
		return x.Alignment
	}
	return Alignment_UNKNOWN
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor) GetWaveInformation() *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation {
	if x != nil {
		return x.WaveInformation
	}
	return nil
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcId            int32                                                                                `protobuf:"varint,1,opt,name=npc_id,json=npcId,proto3" json:"npc_id,omitempty"`
	Gender           Gender                                                                               `protobuf:"varint,2,opt,name=gender,proto3,enum=com.ankama.dofus.server.game.protocol.common.Gender" json:"gender,omitempty"`
	SpecialArtworkId int32                                                                                `protobuf:"varint,3,opt,name=special_artwork_id,json=specialArtworkId,proto3" json:"special_artwork_id,omitempty"`
	Quests           *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests `protobuf:"bytes,4,opt,name=quests,proto3,oneof" json:"quests,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation) ProtoMessage() {}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 3}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation) GetNpcId() int32 {
	if x != nil {
		return x.NpcId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_MALE
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation) GetSpecialArtworkId() int32 {
	if x != nil {
		return x.SpecialArtworkId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation) GetQuests() *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests {
	if x != nil {
		return x.Quests
	}
	return nil
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Restrictions         []Restriction                                                                                  `protobuf:"varint,1,rep,packed,name=restrictions,proto3,enum=com.ankama.dofus.server.game.protocol.common.Restriction" json:"restrictions,omitempty"`
	Gender               Gender                                                                                         `protobuf:"varint,2,opt,name=gender,proto3,enum=com.ankama.dofus.server.game.protocol.common.Gender" json:"gender,omitempty"`
	Options              []*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption     `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	AccountId            int64                                                                                          `protobuf:"varint,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AlignmentInformation *AlignmentInformation                                                                          `protobuf:"bytes,5,opt,name=alignment_information,json=alignmentInformation,proto3,oneof" json:"alignment_information,omitempty"`
	MutantInformation    *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation `protobuf:"bytes,6,opt,name=mutant_information,json=mutantInformation,proto3,oneof" json:"mutant_information,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid) ProtoMessage() {}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid) GetRestrictions() []Restriction {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_MALE
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid) GetOptions() []*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid) GetAlignmentInformation() *AlignmentInformation {
	if x != nil {
		return x.AlignmentInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid) GetMutantInformation() *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation {
	if x != nil {
		return x.MutantInformation
	}
	return nil
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName string `protobuf:"bytes,1,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	Level     int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount) ProtoMessage() {}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 1}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Option:
	//
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Followers
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_GuildInformation
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceInformation
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption_
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption_
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption_
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption_
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption_
	//	*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SpeedMultiplier
	Option isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option `protobuf_oneof:"option"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0, 0}
}

func (m *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) GetOption() isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) GetFollowers() *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption {
	if x, ok := x.GetOption().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Followers); ok {
		return x.Followers
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) GetGuildInformation() *GuildInformation {
	if x, ok := x.GetOption().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_GuildInformation); ok {
		return x.GuildInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) GetAllianceInformation() *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption {
	if x, ok := x.GetOption().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceInformation); ok {
		return x.AllianceInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) GetEmoteOption() *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption {
	if x, ok := x.GetOption().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption_); ok {
		return x.EmoteOption
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) GetTitleOption() *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption {
	if x, ok := x.GetOption().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption_); ok {
		return x.TitleOption
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) GetOrnamentOption() *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption {
	if x, ok := x.GetOption().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption_); ok {
		return x.OrnamentOption
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) GetObjectUseOption() *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption {
	if x, ok := x.GetOption().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption_); ok {
		return x.ObjectUseOption
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) GetSkillUseOption() *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption {
	if x, ok := x.GetOption().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption_); ok {
		return x.SkillUseOption
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption) GetSpeedMultiplier() int32 {
	if x, ok := x.GetOption().(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SpeedMultiplier); ok {
		return x.SpeedMultiplier
	}
	return 0
}

type isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option interface {
	isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option()
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Followers struct {
	Followers *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption `protobuf:"bytes,3,opt,name=followers,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_GuildInformation struct {
	GuildInformation *GuildInformation `protobuf:"bytes,4,opt,name=guild_information,json=guildInformation,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceInformation struct {
	AllianceInformation *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption `protobuf:"bytes,5,opt,name=alliance_information,json=allianceInformation,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption_ struct {
	EmoteOption *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption `protobuf:"bytes,6,opt,name=emote_option,json=emoteOption,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption_ struct {
	TitleOption *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption `protobuf:"bytes,7,opt,name=title_option,json=titleOption,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption_ struct {
	OrnamentOption *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption `protobuf:"bytes,8,opt,name=ornament_option,json=ornamentOption,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption_ struct {
	ObjectUseOption *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption `protobuf:"bytes,9,opt,name=object_use_option,json=objectUseOption,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption_ struct {
	SkillUseOption *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption `protobuf:"bytes,10,opt,name=skill_use_option,json=skillUseOption,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SpeedMultiplier struct {
	SpeedMultiplier int32 `protobuf:"varint,11,opt,name=speed_multiplier,json=speedMultiplier,proto3,oneof"`
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Followers) isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_GuildInformation) isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceInformation) isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption_) isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption_) isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption_) isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption_) isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption_) isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option() {
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SpeedMultiplier) isActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Option() {
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterId  int32 `protobuf:"varint,1,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	PowerLevel int32 `protobuf:"varint,2,opt,name=power_level,json=powerLevel,proto3" json:"power_level,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0, 1}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation) GetMonsterId() int32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation) GetPowerLevel() int32 {
	if x != nil {
		return x.PowerLevel
	}
	return 0
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowingCharactersLooks []*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook `protobuf:"bytes,1,rep,name=following_characters_looks,json=followingCharactersLooks,proto3" json:"following_characters_looks,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0, 0, 0}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption) GetFollowingCharactersLooks() []*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook {
	if x != nil {
		return x.FollowingCharactersLooks
	}
	return nil
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllianceInformation *AllianceInformation `protobuf:"bytes,1,opt,name=alliance_information,json=allianceInformation,proto3" json:"alliance_information,omitempty"`
	AttackableStatus    AttackableStatus     `protobuf:"varint,2,opt,name=attackable_status,json=attackableStatus,proto3,enum=com.ankama.dofus.server.game.protocol.common.AttackableStatus" json:"attackable_status,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0, 0, 1}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption) GetAllianceInformation() *AllianceInformation {
	if x != nil {
		return x.AllianceInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption) GetAttackableStatus() AttackableStatus {
	if x != nil {
		return x.AttackableStatus
	}
	return AttackableStatus_NON_ATTACKABLE
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmoteId        int32  `protobuf:"varint,1,opt,name=emote_id,json=emoteId,proto3" json:"emote_id,omitempty"`
	EmoteStartTime string `protobuf:"bytes,2,opt,name=emote_start_time,json=emoteStartTime,proto3" json:"emote_start_time,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0, 0, 2}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption) GetEmoteId() int32 {
	if x != nil {
		return x.EmoteId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption) GetEmoteStartTime() string {
	if x != nil {
		return x.EmoteStartTime
	}
	return ""
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleId        *int32  `protobuf:"varint,1,opt,name=title_id,json=titleId,proto3,oneof" json:"title_id,omitempty"`
	TitleParameter *string `protobuf:"bytes,2,opt,name=title_parameter,json=titleParameter,proto3,oneof" json:"title_parameter,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0, 0, 3}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption) GetTitleId() int32 {
	if x != nil && x.TitleId != nil {
		return *x.TitleId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption) GetTitleParameter() string {
	if x != nil && x.TitleParameter != nil {
		return *x.TitleParameter
	}
	return ""
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerLevel    int32  `protobuf:"varint,2,opt,name=player_level,json=playerLevel,proto3" json:"player_level,omitempty"`
	LadderPosition *int32 `protobuf:"varint,4,opt,name=ladder_position,json=ladderPosition,proto3,oneof" json:"ladder_position,omitempty"`
	OrnamentId     *int32 `protobuf:"varint,1,opt,name=ornament_id,json=ornamentId,proto3,oneof" json:"ornament_id,omitempty"`
	LeagueId       *int32 `protobuf:"varint,3,opt,name=league_id,json=leagueId,proto3,oneof" json:"league_id,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0, 0, 4}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption) GetPlayerLevel() int32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption) GetLadderPosition() int32 {
	if x != nil && x.LadderPosition != nil {
		return *x.LadderPosition
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption) GetOrnamentId() int32 {
	if x != nil && x.OrnamentId != nil {
		return *x.OrnamentId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption) GetLeagueId() int32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelayedActionType DelayedActionType `protobuf:"varint,1,opt,name=delayed_action_type,json=delayedActionType,proto3,enum=com.ankama.dofus.server.game.protocol.common.DelayedActionType" json:"delayed_action_type,omitempty"`
	EndDelay          string            `protobuf:"bytes,2,opt,name=end_delay,json=endDelay,proto3" json:"end_delay,omitempty"`
	ObjectGid         int32             `protobuf:"varint,3,opt,name=object_gid,json=objectGid,proto3" json:"object_gid,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0, 0, 5}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption) GetDelayedActionType() DelayedActionType {
	if x != nil {
		return x.DelayedActionType
	}
	return DelayedActionType_DISCONNECT
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption) GetEndDelay() string {
	if x != nil {
		return x.EndDelay
	}
	return ""
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption) GetObjectGid() int32 {
	if x != nil {
		return x.ObjectGid
	}
	return 0
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId    int32  `protobuf:"varint,1,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	SkillId      int32  `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SkillEndTime string `protobuf:"bytes,3,opt,name=skill_end_time,json=skillEndTime,proto3" json:"skill_end_time,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0, 0, 6}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption) GetElementId() int32 {
	if x != nil {
		return x.ElementId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption) GetSkillEndTime() string {
	if x != nil {
		return x.SkillEndTime
	}
	return ""
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Look  *EntityLook `protobuf:"bytes,1,opt,name=look,proto3" json:"look,omitempty"`
	Index int32       `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0, 0, 0, 0}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook) GetLook() *EntityLook {
	if x != nil {
		return x.Look
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alternatives []*MonsterGroupStaticInformation `protobuf:"bytes,2,rep,name=alternatives,proto3" json:"alternatives,omitempty"`
	WaveCount    *int32                           `protobuf:"varint,1,opt,name=wave_count,json=waveCount,proto3,oneof" json:"wave_count,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 2, 0}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation) GetAlternatives() []*MonsterGroupStaticInformation {
	if x != nil {
		return x.Alternatives
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation) GetWaveCount() int32 {
	if x != nil && x.WaveCount != nil {
		return *x.WaveCount
	}
	return 0
}

type ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestsToValid []int32 `protobuf:"varint,1,rep,packed,name=quests_to_valid,json=questsToValid,proto3" json:"quests_to_valid,omitempty"`
	QuestsToStart []int32 `protobuf:"varint,2,rep,packed,name=quests_to_start,json=questsToStart,proto3" json:"quests_to_start,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests) Reset() {
	*x = ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 0, 3, 0}
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests) GetQuestsToValid() []int32 {
	if x != nil {
		return x.QuestsToValid
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests) GetQuestsToStart() []int32 {
	if x != nil {
		return x.QuestsToStart
	}
	return nil
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status           *CharacterStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	LeagueId         int32            `protobuf:"varint,3,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	LadderPosition   int32            `protobuf:"varint,4,opt,name=ladder_position,json=ladderPosition,proto3" json:"ladder_position,omitempty"`
	HiddenInPreFight bool             `protobuf:"varint,5,opt,name=hidden_in_pre_fight,json=hiddenInPreFight,proto3" json:"hidden_in_pre_fight,omitempty"`
	// Types that are assignable to FighterInformation:
	//
	//	*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_CharacterInformation
	//	*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_MutantInformation
	FighterInformation isActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FighterInformation `protobuf_oneof:"fighter_information"`
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) Reset() {
	*x = ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 1, 0}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) GetStatus() *CharacterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) GetLadderPosition() int32 {
	if x != nil {
		return x.LadderPosition
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) GetHiddenInPreFight() bool {
	if x != nil {
		return x.HiddenInPreFight
	}
	return false
}

func (m *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) GetFighterInformation() isActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FighterInformation {
	if m != nil {
		return m.FighterInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) GetCharacterInformation() *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation {
	if x, ok := x.GetFighterInformation().(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_CharacterInformation); ok {
		return x.CharacterInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation) GetMutantInformation() *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation {
	if x, ok := x.GetFighterInformation().(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_MutantInformation); ok {
		return x.MutantInformation
	}
	return nil
}

type isActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FighterInformation interface {
	isActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FighterInformation()
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_CharacterInformation struct {
	CharacterInformation *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation `protobuf:"bytes,6,opt,name=character_information,json=characterInformation,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_MutantInformation struct {
	MutantInformation *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation `protobuf:"bytes,7,opt,name=mutant_information,json=mutantInformation,proto3,oneof"`
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_CharacterInformation) isActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FighterInformation() {
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_MutantInformation) isActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FighterInformation() {
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AiFighterInformation:
	//
	//	*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighterInformation
	//	*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorInformation
	AiFighterInformation isActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_AiFighterInformation `protobuf_oneof:"ai_fighter_information"`
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation) Reset() {
	*x = ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 1, 1}
}

func (m *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation) GetAiFighterInformation() isActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_AiFighterInformation {
	if m != nil {
		return m.AiFighterInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation) GetMonsterFighterInformation() *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter {
	if x, ok := x.GetAiFighterInformation().(*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighterInformation); ok {
		return x.MonsterFighterInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation) GetTaxCollectorInformation() *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter {
	if x, ok := x.GetAiFighterInformation().(*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorInformation); ok {
		return x.TaxCollectorInformation
	}
	return nil
}

type isActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_AiFighterInformation interface {
	isActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_AiFighterInformation()
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighterInformation struct {
	MonsterFighterInformation *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter `protobuf:"bytes,1,opt,name=monster_fighter_information,json=monsterFighterInformation,proto3,oneof"`
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorInformation struct {
	TaxCollectorInformation *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter `protobuf:"bytes,2,opt,name=tax_collector_information,json=taxCollectorInformation,proto3,oneof"`
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighterInformation) isActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_AiFighterInformation() {
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorInformation) isActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_AiFighterInformation() {
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityModelId int32 `protobuf:"varint,1,opt,name=entity_model_id,json=entityModelId,proto3" json:"entity_model_id,omitempty"`
	Level         int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	MasterId      int64 `protobuf:"varint,3,opt,name=master_id,json=masterId,proto3" json:"master_id,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation) Reset() {
	*x = ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 1, 2}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation) GetEntityModelId() int32 {
	if x != nil {
		return x.EntityModelId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation) GetMasterId() int64 {
	if x != nil {
		return x.MasterId
	}
	return 0
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                int32                 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	AlignmentInformation *AlignmentInformation `protobuf:"bytes,2,opt,name=alignment_information,json=alignmentInformation,proto3" json:"alignment_information,omitempty"`
	BreedId              int32                 `protobuf:"varint,3,opt,name=breed_id,json=breedId,proto3" json:"breed_id,omitempty"`
	Gender               Gender                `protobuf:"varint,4,opt,name=gender,proto3,enum=com.ankama.dofus.server.game.protocol.common.Gender" json:"gender,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation) Reset() {
	*x = ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 1, 0, 0}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation) GetAlignmentInformation() *AlignmentInformation {
	if x != nil {
		return x.AlignmentInformation
	}
	return nil
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation) GetBreedId() int32 {
	if x != nil {
		return x.BreedId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_MALE
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerLevel int32 `protobuf:"varint,1,opt,name=power_level,json=powerLevel,proto3" json:"power_level,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation) Reset() {
	*x = ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 1, 0, 1}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation) GetPowerLevel() int32 {
	if x != nil {
		return x.PowerLevel
	}
	return 0
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterGid           int32                 `protobuf:"varint,1,opt,name=monster_gid,json=monsterGid,proto3" json:"monster_gid,omitempty"`
	CreatureGrade        int32                 `protobuf:"varint,2,opt,name=creature_grade,json=creatureGrade,proto3" json:"creature_grade,omitempty"`
	CreatureLevel        int32                 `protobuf:"varint,3,opt,name=creature_level,json=creatureLevel,proto3" json:"creature_level,omitempty"`
	AlignmentInformation *AlignmentInformation `protobuf:"bytes,4,opt,name=alignment_information,json=alignmentInformation,proto3,oneof" json:"alignment_information,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter) Reset() {
	*x = ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 1, 1, 0}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter) GetMonsterGid() int32 {
	if x != nil {
		return x.MonsterGid
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter) GetCreatureGrade() int32 {
	if x != nil {
		return x.CreatureGrade
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter) GetCreatureLevel() int32 {
	if x != nil {
		return x.CreatureLevel
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter) GetAlignmentInformation() *AlignmentInformation {
	if x != nil {
		return x.AlignmentInformation
	}
	return nil
}

type ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstNameId int32 `protobuf:"varint,1,opt,name=first_name_id,json=firstNameId,proto3" json:"first_name_id,omitempty"`
	LastNameId  int32 `protobuf:"varint,2,opt,name=last_name_id,json=lastNameId,proto3" json:"last_name_id,omitempty"`
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter) Reset() {
	*x = ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter) ProtoMessage() {
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter.ProtoReflect.Descriptor instead.
func (*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{1, 0, 1, 1, 1}
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter) GetFirstNameId() int32 {
	if x != nil {
		return x.FirstNameId
	}
	return 0
}

func (x *ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter) GetLastNameId() int32 {
	if x != nil {
		return x.LastNameId
	}
	return 0
}

type AllianceInformation_AllianceCardInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationDate       int64                           `protobuf:"varint,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	MembersNumber      int32                           `protobuf:"varint,2,opt,name=members_number,json=membersNumber,proto3" json:"members_number,omitempty"`
	SubareaNumber      int32                           `protobuf:"varint,3,opt,name=subarea_number,json=subareaNumber,proto3" json:"subarea_number,omitempty"`
	TaxCollectorNumber int32                           `protobuf:"varint,4,opt,name=tax_collector_number,json=taxCollectorNumber,proto3" json:"tax_collector_number,omitempty"`
	Recruitment        *AllianceRecruitmentInformation `protobuf:"bytes,5,opt,name=recruitment,proto3" json:"recruitment,omitempty"`
}

func (x *AllianceInformation_AllianceCardInformation) Reset() {
	*x = AllianceInformation_AllianceCardInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllianceInformation_AllianceCardInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllianceInformation_AllianceCardInformation) ProtoMessage() {}

func (x *AllianceInformation_AllianceCardInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllianceInformation_AllianceCardInformation.ProtoReflect.Descriptor instead.
func (*AllianceInformation_AllianceCardInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{3, 0}
}

func (x *AllianceInformation_AllianceCardInformation) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *AllianceInformation_AllianceCardInformation) GetMembersNumber() int32 {
	if x != nil {
		return x.MembersNumber
	}
	return 0
}

func (x *AllianceInformation_AllianceCardInformation) GetSubareaNumber() int32 {
	if x != nil {
		return x.SubareaNumber
	}
	return 0
}

func (x *AllianceInformation_AllianceCardInformation) GetTaxCollectorNumber() int32 {
	if x != nil {
		return x.TaxCollectorNumber
	}
	return 0
}

func (x *AllianceInformation_AllianceCardInformation) GetRecruitment() *AllianceRecruitmentInformation {
	if x != nil {
		return x.Recruitment
	}
	return nil
}

type BreachBranch_ExtendedBreachBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards     []*BreachReward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
	Modifier    int32           `protobuf:"varint,2,opt,name=modifier,proto3" json:"modifier,omitempty"`
	Price       int32           `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	UnlockPrice *int32          `protobuf:"varint,4,opt,name=unlock_price,json=unlockPrice,proto3,oneof" json:"unlock_price,omitempty"`
}

func (x *BreachBranch_ExtendedBreachBranch) Reset() {
	*x = BreachBranch_ExtendedBreachBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreachBranch_ExtendedBreachBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreachBranch_ExtendedBreachBranch) ProtoMessage() {}

func (x *BreachBranch_ExtendedBreachBranch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreachBranch_ExtendedBreachBranch.ProtoReflect.Descriptor instead.
func (*BreachBranch_ExtendedBreachBranch) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{4, 0}
}

func (x *BreachBranch_ExtendedBreachBranch) GetRewards() []*BreachReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *BreachBranch_ExtendedBreachBranch) GetModifier() int32 {
	if x != nil {
		return x.Modifier
	}
	return 0
}

func (x *BreachBranch_ExtendedBreachBranch) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *BreachBranch_ExtendedBreachBranch) GetUnlockPrice() int32 {
	if x != nil && x.UnlockPrice != nil {
		return *x.UnlockPrice
	}
	return 0
}

type Character_CharacterBasicInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Level *int32 `protobuf:"varint,2,opt,name=level,proto3,oneof" json:"level,omitempty"`
	// Types that are assignable to Complement:
	//
	//	*Character_CharacterBasicInformation_CharacterLook_
	//	*Character_CharacterBasicInformation_Rank
	//	*Character_CharacterBasicInformation_SocialMember_
	Complement isCharacter_CharacterBasicInformation_Complement `protobuf_oneof:"complement"`
}

func (x *Character_CharacterBasicInformation) Reset() {
	*x = Character_CharacterBasicInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_CharacterBasicInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_CharacterBasicInformation) ProtoMessage() {}

func (x *Character_CharacterBasicInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_CharacterBasicInformation.ProtoReflect.Descriptor instead.
func (*Character_CharacterBasicInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Character_CharacterBasicInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Character_CharacterBasicInformation) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (m *Character_CharacterBasicInformation) GetComplement() isCharacter_CharacterBasicInformation_Complement {
	if m != nil {
		return m.Complement
	}
	return nil
}

func (x *Character_CharacterBasicInformation) GetCharacterLook() *Character_CharacterBasicInformation_CharacterLook {
	if x, ok := x.GetComplement().(*Character_CharacterBasicInformation_CharacterLook_); ok {
		return x.CharacterLook
	}
	return nil
}

func (x *Character_CharacterBasicInformation) GetRank() *RankInformation {
	if x, ok := x.GetComplement().(*Character_CharacterBasicInformation_Rank); ok {
		return x.Rank
	}
	return nil
}

func (x *Character_CharacterBasicInformation) GetSocialMember() *Character_CharacterBasicInformation_SocialMember {
	if x, ok := x.GetComplement().(*Character_CharacterBasicInformation_SocialMember_); ok {
		return x.SocialMember
	}
	return nil
}

type isCharacter_CharacterBasicInformation_Complement interface {
	isCharacter_CharacterBasicInformation_Complement()
}

type Character_CharacterBasicInformation_CharacterLook_ struct {
	CharacterLook *Character_CharacterBasicInformation_CharacterLook `protobuf:"bytes,4,opt,name=character_look,json=characterLook,proto3,oneof"`
}

type Character_CharacterBasicInformation_Rank struct {
	Rank *RankInformation `protobuf:"bytes,5,opt,name=rank,proto3,oneof"`
}

type Character_CharacterBasicInformation_SocialMember_ struct {
	SocialMember *Character_CharacterBasicInformation_SocialMember `protobuf:"bytes,6,opt,name=social_member,json=socialMember,proto3,oneof"`
}

func (*Character_CharacterBasicInformation_CharacterLook_) isCharacter_CharacterBasicInformation_Complement() {
}

func (*Character_CharacterBasicInformation_Rank) isCharacter_CharacterBasicInformation_Complement() {}

func (*Character_CharacterBasicInformation_SocialMember_) isCharacter_CharacterBasicInformation_Complement() {
}

type Character_CharacterBasicInformation_SocialMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreedId                  int32                                                         `protobuf:"varint,1,opt,name=breed_id,json=breedId,proto3" json:"breed_id,omitempty"`
	Gender                   Gender                                                        `protobuf:"varint,2,opt,name=gender,proto3,enum=com.ankama.dofus.server.game.protocol.common.Gender" json:"gender,omitempty"`
	State                    CharacterState                                                `protobuf:"varint,3,opt,name=state,proto3,enum=com.ankama.dofus.server.game.protocol.common.CharacterState" json:"state,omitempty"`
	HoursSinceLastConnection int64                                                         `protobuf:"varint,4,opt,name=hours_since_last_connection,json=hoursSinceLastConnection,proto3" json:"hours_since_last_connection,omitempty"`
	AccountId                int64                                                         `protobuf:"varint,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Status                   *CharacterStatus                                              `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	RankId                   int32                                                         `protobuf:"varint,7,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	EnrollmentDate           int64                                                         `protobuf:"varint,8,opt,name=enrollment_date,json=enrollmentDate,proto3" json:"enrollment_date,omitempty"`
	AvaRoleId                *int32                                                        `protobuf:"varint,9,opt,name=ava_role_id,json=avaRoleId,proto3,oneof" json:"ava_role_id,omitempty"`
	GuildMember              *Character_CharacterBasicInformation_SocialMember_GuildMember `protobuf:"bytes,10,opt,name=guild_member,json=guildMember,proto3,oneof" json:"guild_member,omitempty"`
}

func (x *Character_CharacterBasicInformation_SocialMember) Reset() {
	*x = Character_CharacterBasicInformation_SocialMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_CharacterBasicInformation_SocialMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_CharacterBasicInformation_SocialMember) ProtoMessage() {}

func (x *Character_CharacterBasicInformation_SocialMember) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_CharacterBasicInformation_SocialMember.ProtoReflect.Descriptor instead.
func (*Character_CharacterBasicInformation_SocialMember) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *Character_CharacterBasicInformation_SocialMember) GetBreedId() int32 {
	if x != nil {
		return x.BreedId
	}
	return 0
}

func (x *Character_CharacterBasicInformation_SocialMember) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_MALE
}

func (x *Character_CharacterBasicInformation_SocialMember) GetState() CharacterState {
	if x != nil {
		return x.State
	}
	return CharacterState_NOT_CONNECTED
}

func (x *Character_CharacterBasicInformation_SocialMember) GetHoursSinceLastConnection() int64 {
	if x != nil {
		return x.HoursSinceLastConnection
	}
	return 0
}

func (x *Character_CharacterBasicInformation_SocialMember) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Character_CharacterBasicInformation_SocialMember) GetStatus() *CharacterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Character_CharacterBasicInformation_SocialMember) GetRankId() int32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *Character_CharacterBasicInformation_SocialMember) GetEnrollmentDate() int64 {
	if x != nil {
		return x.EnrollmentDate
	}
	return 0
}

func (x *Character_CharacterBasicInformation_SocialMember) GetAvaRoleId() int32 {
	if x != nil && x.AvaRoleId != nil {
		return *x.AvaRoleId
	}
	return 0
}

func (x *Character_CharacterBasicInformation_SocialMember) GetGuildMember() *Character_CharacterBasicInformation_SocialMember_GuildMember {
	if x != nil {
		return x.GuildMember
	}
	return nil
}

type Character_CharacterBasicInformation_CharacterLook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Look    *EntityLook `protobuf:"bytes,1,opt,name=look,proto3" json:"look,omitempty"`
	BreedId int32       `protobuf:"varint,2,opt,name=breed_id,json=breedId,proto3" json:"breed_id,omitempty"`
	// Types that are assignable to Complement:
	//
	//	*Character_CharacterBasicInformation_CharacterLook_GuildInformation
	//	*Character_CharacterBasicInformation_CharacterLook_AllianceInformation
	//	*Character_CharacterBasicInformation_CharacterLook_Grade
	//	*Character_CharacterBasicInformation_CharacterLook_BaseInformation
	Complement isCharacter_CharacterBasicInformation_CharacterLook_Complement `protobuf_oneof:"complement"`
}

func (x *Character_CharacterBasicInformation_CharacterLook) Reset() {
	*x = Character_CharacterBasicInformation_CharacterLook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_CharacterBasicInformation_CharacterLook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_CharacterBasicInformation_CharacterLook) ProtoMessage() {}

func (x *Character_CharacterBasicInformation_CharacterLook) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_CharacterBasicInformation_CharacterLook.ProtoReflect.Descriptor instead.
func (*Character_CharacterBasicInformation_CharacterLook) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8, 0, 1}
}

func (x *Character_CharacterBasicInformation_CharacterLook) GetLook() *EntityLook {
	if x != nil {
		return x.Look
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook) GetBreedId() int32 {
	if x != nil {
		return x.BreedId
	}
	return 0
}

func (m *Character_CharacterBasicInformation_CharacterLook) GetComplement() isCharacter_CharacterBasicInformation_CharacterLook_Complement {
	if m != nil {
		return m.Complement
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook) GetGuildInformation() *GuildInformation {
	if x, ok := x.GetComplement().(*Character_CharacterBasicInformation_CharacterLook_GuildInformation); ok {
		return x.GuildInformation
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook) GetAllianceInformation() *AllianceInformation {
	if x, ok := x.GetComplement().(*Character_CharacterBasicInformation_CharacterLook_AllianceInformation); ok {
		return x.AllianceInformation
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook) GetGrade() int32 {
	if x, ok := x.GetComplement().(*Character_CharacterBasicInformation_CharacterLook_Grade); ok {
		return x.Grade
	}
	return 0
}

func (x *Character_CharacterBasicInformation_CharacterLook) GetBaseInformation() *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation {
	if x, ok := x.GetComplement().(*Character_CharacterBasicInformation_CharacterLook_BaseInformation); ok {
		return x.BaseInformation
	}
	return nil
}

type isCharacter_CharacterBasicInformation_CharacterLook_Complement interface {
	isCharacter_CharacterBasicInformation_CharacterLook_Complement()
}

type Character_CharacterBasicInformation_CharacterLook_GuildInformation struct {
	GuildInformation *GuildInformation `protobuf:"bytes,3,opt,name=guild_information,json=guildInformation,proto3,oneof"`
}

type Character_CharacterBasicInformation_CharacterLook_AllianceInformation struct {
	AllianceInformation *AllianceInformation `protobuf:"bytes,4,opt,name=alliance_information,json=allianceInformation,proto3,oneof"`
}

type Character_CharacterBasicInformation_CharacterLook_Grade struct {
	Grade int32 `protobuf:"varint,5,opt,name=grade,proto3,oneof"`
}

type Character_CharacterBasicInformation_CharacterLook_BaseInformation struct {
	BaseInformation *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation `protobuf:"bytes,6,opt,name=base_information,json=baseInformation,proto3,oneof"`
}

func (*Character_CharacterBasicInformation_CharacterLook_GuildInformation) isCharacter_CharacterBasicInformation_CharacterLook_Complement() {
}

func (*Character_CharacterBasicInformation_CharacterLook_AllianceInformation) isCharacter_CharacterBasicInformation_CharacterLook_Complement() {
}

func (*Character_CharacterBasicInformation_CharacterLook_Grade) isCharacter_CharacterBasicInformation_CharacterLook_Complement() {
}

func (*Character_CharacterBasicInformation_CharacterLook_BaseInformation) isCharacter_CharacterBasicInformation_CharacterLook_Complement() {
}

type Character_CharacterBasicInformation_SocialMember_GuildMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GivenExperience        int64                                                                    `protobuf:"varint,1,opt,name=given_experience,json=givenExperience,proto3" json:"given_experience,omitempty"`
	ExperienceGivenPercent int32                                                                    `protobuf:"varint,2,opt,name=experience_given_percent,json=experienceGivenPercent,proto3" json:"experience_given_percent,omitempty"`
	Alignment              Alignment                                                                `protobuf:"varint,3,opt,name=alignment,proto3,enum=com.ankama.dofus.server.game.protocol.common.Alignment" json:"alignment,omitempty"`
	MoodSmileyId           int32                                                                    `protobuf:"varint,4,opt,name=mood_smiley_id,json=moodSmileyId,proto3" json:"mood_smiley_id,omitempty"`
	AchievementPoints      int32                                                                    `protobuf:"varint,5,opt,name=achievement_points,json=achievementPoints,proto3" json:"achievement_points,omitempty"`
	HavenBagShared         bool                                                                     `protobuf:"varint,6,opt,name=haven_bag_shared,json=havenBagShared,proto3" json:"haven_bag_shared,omitempty"`
	Note                   *Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember) Reset() {
	*x = Character_CharacterBasicInformation_SocialMember_GuildMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_CharacterBasicInformation_SocialMember_GuildMember) ProtoMessage() {}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_CharacterBasicInformation_SocialMember_GuildMember.ProtoReflect.Descriptor instead.
func (*Character_CharacterBasicInformation_SocialMember_GuildMember) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8, 0, 0, 0}
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember) GetGivenExperience() int64 {
	if x != nil {
		return x.GivenExperience
	}
	return 0
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember) GetExperienceGivenPercent() int32 {
	if x != nil {
		return x.ExperienceGivenPercent
	}
	return 0
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember) GetAlignment() Alignment {
	if x != nil {
		return x.Alignment
	}
	return Alignment_UNKNOWN
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember) GetMoodSmileyId() int32 {
	if x != nil {
		return x.MoodSmileyId
	}
	return 0
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember) GetAchievementPoints() int32 {
	if x != nil {
		return x.AchievementPoints
	}
	return 0
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember) GetHavenBagShared() bool {
	if x != nil {
		return x.HavenBagShared
	}
	return false
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember) GetNote() *Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote {
	if x != nil {
		return x.Note
	}
	return nil
}

type Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content      string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	LastEditDate int64  `protobuf:"varint,2,opt,name=last_edit_date,json=lastEditDate,proto3" json:"last_edit_date,omitempty"`
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote) Reset() {
	*x = Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote) ProtoMessage() {}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote.ProtoReflect.Descriptor instead.
func (*Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8, 0, 0, 0, 0}
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote) GetLastEditDate() int64 {
	if x != nil {
		return x.LastEditDate
	}
	return 0
}

type Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gender Gender `protobuf:"varint,1,opt,name=gender,proto3,enum=com.ankama.dofus.server.game.protocol.common.Gender" json:"gender,omitempty"`
	// Types that are assignable to Complement:
	//
	//	*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_EpicInformation
	//	*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation_
	//	*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation_
	Complement isCharacter_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_Complement `protobuf_oneof:"complement"`
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation) Reset() {
	*x = Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation) ProtoMessage() {}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation.ProtoReflect.Descriptor instead.
func (*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8, 0, 1, 0}
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_MALE
}

func (m *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation) GetComplement() isCharacter_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_Complement {
	if m != nil {
		return m.Complement
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation) GetEpicInformation() *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation {
	if x, ok := x.GetComplement().(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_EpicInformation); ok {
		return x.EpicInformation
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation) GetPartyMemberInformation() *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation {
	if x, ok := x.GetComplement().(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation_); ok {
		return x.PartyMemberInformation
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation) GetPartyInvitationMemberInformation() *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation {
	if x, ok := x.GetComplement().(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation_); ok {
		return x.PartyInvitationMemberInformation
	}
	return nil
}

type isCharacter_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_Complement interface {
	isCharacter_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_Complement()
}

type Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_EpicInformation struct {
	EpicInformation *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation `protobuf:"bytes,2,opt,name=epic_information,json=epicInformation,proto3,oneof"`
}

type Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation_ struct {
	PartyMemberInformation *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation `protobuf:"bytes,3,opt,name=party_member_information,json=partyMemberInformation,proto3,oneof"`
}

type Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation_ struct {
	PartyInvitationMemberInformation *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation `protobuf:"bytes,4,opt,name=party_invitation_member_information,json=partyInvitationMemberInformation,proto3,oneof"`
}

func (*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_EpicInformation) isCharacter_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_Complement() {
}

func (*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation_) isCharacter_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_Complement() {
}

func (*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation_) isCharacter_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_Complement() {
}

type Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeathState    Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState `protobuf:"varint,1,opt,name=death_state,json=deathState,proto3,enum=com.ankama.dofus.server.game.protocol.common.Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState" json:"death_state,omitempty"`
	DeathCount    int32                                                                                                              `protobuf:"varint,2,opt,name=death_count,json=deathCount,proto3" json:"death_count,omitempty"`
	DeathMaxLevel int32                                                                                                              `protobuf:"varint,3,opt,name=death_max_level,json=deathMaxLevel,proto3" json:"death_max_level,omitempty"`
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation) Reset() {
	*x = Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation) ProtoMessage() {
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation.ProtoReflect.Descriptor instead.
func (*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8, 0, 1, 0, 0}
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation) GetDeathState() Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState {
	if x != nil {
		return x.DeathState
	}
	return Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_DEATH_STATE_ALIVE
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation) GetDeathCount() int32 {
	if x != nil {
		return x.DeathCount
	}
	return 0
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation) GetDeathMaxLevel() int32 {
	if x != nil {
		return x.DeathMaxLevel
	}
	return 0
}

type Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonsInformation *PartyUpdateCommonsInformation `protobuf:"bytes,1,opt,name=commons_information,json=commonsInformation,proto3" json:"commons_information,omitempty"`
	Initiative         int32                          `protobuf:"varint,2,opt,name=initiative,proto3" json:"initiative,omitempty"`
	Alignment          Alignment                      `protobuf:"varint,3,opt,name=alignment,proto3,enum=com.ankama.dofus.server.game.protocol.common.Alignment" json:"alignment,omitempty"`
	Coordinates        *MapExtendedCoordinates        `protobuf:"bytes,4,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	Status             *CharacterStatus               `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Entities           []*PartyEntity                 `protobuf:"bytes,6,rep,name=entities,proto3" json:"entities,omitempty"`
	Rank               *int32                         `protobuf:"varint,7,opt,name=rank,proto3,oneof" json:"rank,omitempty"`
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) Reset() {
	*x = Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) ProtoMessage() {
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation.ProtoReflect.Descriptor instead.
func (*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8, 0, 1, 0, 1}
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) GetCommonsInformation() *PartyUpdateCommonsInformation {
	if x != nil {
		return x.CommonsInformation
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) GetInitiative() int32 {
	if x != nil {
		return x.Initiative
	}
	return 0
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) GetAlignment() Alignment {
	if x != nil {
		return x.Alignment
	}
	return Alignment_UNKNOWN
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) GetCoordinates() *MapExtendedCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) GetStatus() *CharacterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) GetEntities() []*PartyEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinates *MapExtendedCoordinates `protobuf:"bytes,1,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	Entities    []*PartyEntity          `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation) Reset() {
	*x = Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation) ProtoMessage() {
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation.ProtoReflect.Descriptor instead.
func (*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{8, 0, 1, 0, 2}
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation) GetCoordinates() *MapExtendedCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation) GetEntities() []*PartyEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type CharacterRemodelingInformation_CharacterToRemodelInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PossibleChangeMask  int32 `protobuf:"varint,1,opt,name=possible_change_mask,json=possibleChangeMask,proto3" json:"possible_change_mask,omitempty"`
	MandatoryChangeMask int32 `protobuf:"varint,2,opt,name=mandatory_change_mask,json=mandatoryChangeMask,proto3" json:"mandatory_change_mask,omitempty"`
}

func (x *CharacterRemodelingInformation_CharacterToRemodelInformation) Reset() {
	*x = CharacterRemodelingInformation_CharacterToRemodelInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterRemodelingInformation_CharacterToRemodelInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterRemodelingInformation_CharacterToRemodelInformation) ProtoMessage() {}

func (x *CharacterRemodelingInformation_CharacterToRemodelInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterRemodelingInformation_CharacterToRemodelInformation.ProtoReflect.Descriptor instead.
func (*CharacterRemodelingInformation_CharacterToRemodelInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CharacterRemodelingInformation_CharacterToRemodelInformation) GetPossibleChangeMask() int32 {
	if x != nil {
		return x.PossibleChangeMask
	}
	return 0
}

func (x *CharacterRemodelingInformation_CharacterToRemodelInformation) GetMandatoryChangeMask() int32 {
	if x != nil {
		return x.MandatoryChangeMask
	}
	return 0
}

type PartyEntity_EntityMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initiative         int32                          `protobuf:"varint,1,opt,name=initiative,proto3" json:"initiative,omitempty"`
	CommonsInformation *PartyUpdateCommonsInformation `protobuf:"bytes,2,opt,name=commons_information,json=commonsInformation,proto3" json:"commons_information,omitempty"`
}

func (x *PartyEntity_EntityMember) Reset() {
	*x = PartyEntity_EntityMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyEntity_EntityMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyEntity_EntityMember) ProtoMessage() {}

func (x *PartyEntity_EntityMember) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyEntity_EntityMember.ProtoReflect.Descriptor instead.
func (*PartyEntity_EntityMember) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{10, 0}
}

func (x *PartyEntity_EntityMember) GetInitiative() int32 {
	if x != nil {
		return x.Initiative
	}
	return 0
}

func (x *PartyEntity_EntityMember) GetCommonsInformation() *PartyUpdateCommonsInformation {
	if x != nil {
		return x.CommonsInformation
	}
	return nil
}

type PlayerSearch_SearchByCharacterName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PlayerSearch_SearchByCharacterName) Reset() {
	*x = PlayerSearch_SearchByCharacterName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSearch_SearchByCharacterName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSearch_SearchByCharacterName) ProtoMessage() {}

func (x *PlayerSearch_SearchByCharacterName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSearch_SearchByCharacterName.ProtoReflect.Descriptor instead.
func (*PlayerSearch_SearchByCharacterName) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{18, 0}
}

func (x *PlayerSearch_SearchByCharacterName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PlayerSearch_SearchByAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tag  string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *PlayerSearch_SearchByAccount) Reset() {
	*x = PlayerSearch_SearchByAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSearch_SearchByAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSearch_SearchByAccount) ProtoMessage() {}

func (x *PlayerSearch_SearchByAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSearch_SearchByAccount.ProtoReflect.Descriptor instead.
func (*PlayerSearch_SearchByAccount) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{18, 1}
}

func (x *PlayerSearch_SearchByAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerSearch_SearchByAccount) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type AlignmentInformation_AlignmentExtendedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Honor               int32            `protobuf:"varint,1,opt,name=honor,proto3" json:"honor,omitempty"`
	HonorGradeFloor     int32            `protobuf:"varint,2,opt,name=honor_grade_floor,json=honorGradeFloor,proto3" json:"honor_grade_floor,omitempty"`
	HonorNextGradeFloor int32            `protobuf:"varint,3,opt,name=honor_next_grade_floor,json=honorNextGradeFloor,proto3" json:"honor_next_grade_floor,omitempty"`
	Attackable          AttackableStatus `protobuf:"varint,4,opt,name=attackable,proto3,enum=com.ankama.dofus.server.game.protocol.common.AttackableStatus" json:"attackable,omitempty"`
}

func (x *AlignmentInformation_AlignmentExtendedInformation) Reset() {
	*x = AlignmentInformation_AlignmentExtendedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignmentInformation_AlignmentExtendedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignmentInformation_AlignmentExtendedInformation) ProtoMessage() {}

func (x *AlignmentInformation_AlignmentExtendedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignmentInformation_AlignmentExtendedInformation.ProtoReflect.Descriptor instead.
func (*AlignmentInformation_AlignmentExtendedInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{22, 0}
}

func (x *AlignmentInformation_AlignmentExtendedInformation) GetHonor() int32 {
	if x != nil {
		return x.Honor
	}
	return 0
}

func (x *AlignmentInformation_AlignmentExtendedInformation) GetHonorGradeFloor() int32 {
	if x != nil {
		return x.HonorGradeFloor
	}
	return 0
}

func (x *AlignmentInformation_AlignmentExtendedInformation) GetHonorNextGradeFloor() int32 {
	if x != nil {
		return x.HonorNextGradeFloor
	}
	return 0
}

func (x *AlignmentInformation_AlignmentExtendedInformation) GetAttackable() AttackableStatus {
	if x != nil {
		return x.Attackable
	}
	return AttackableStatus_NON_ATTACKABLE
}

type InteractiveElement_InteractiveElementSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId          int32  `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SkillInstanceUid int32  `protobuf:"varint,2,opt,name=skill_instance_uid,json=skillInstanceUid,proto3" json:"skill_instance_uid,omitempty"`
	NameId           *int32 `protobuf:"varint,3,opt,name=name_id,json=nameId,proto3,oneof" json:"name_id,omitempty"`
}

func (x *InteractiveElement_InteractiveElementSkill) Reset() {
	*x = InteractiveElement_InteractiveElementSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractiveElement_InteractiveElementSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractiveElement_InteractiveElementSkill) ProtoMessage() {}

func (x *InteractiveElement_InteractiveElementSkill) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractiveElement_InteractiveElementSkill.ProtoReflect.Descriptor instead.
func (*InteractiveElement_InteractiveElementSkill) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{23, 0}
}

func (x *InteractiveElement_InteractiveElementSkill) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *InteractiveElement_InteractiveElementSkill) GetSkillInstanceUid() int32 {
	if x != nil {
		return x.SkillInstanceUid
	}
	return 0
}

func (x *InteractiveElement_InteractiveElementSkill) GetNameId() int32 {
	if x != nil && x.NameId != nil {
		return *x.NameId
	}
	return 0
}

type FightExternalInformation_FightTeamsWithOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightTeam        *FightTeamInformation    `protobuf:"bytes,1,opt,name=fight_team,json=fightTeam,proto3" json:"fight_team,omitempty"`
	FightTeamOptions *FightOptionsInformation `protobuf:"bytes,2,opt,name=fight_team_options,json=fightTeamOptions,proto3" json:"fight_team_options,omitempty"`
}

func (x *FightExternalInformation_FightTeamsWithOptions) Reset() {
	*x = FightExternalInformation_FightTeamsWithOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightExternalInformation_FightTeamsWithOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightExternalInformation_FightTeamsWithOptions) ProtoMessage() {}

func (x *FightExternalInformation_FightTeamsWithOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightExternalInformation_FightTeamsWithOptions.ProtoReflect.Descriptor instead.
func (*FightExternalInformation_FightTeamsWithOptions) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{40, 0}
}

func (x *FightExternalInformation_FightTeamsWithOptions) GetFightTeam() *FightTeamInformation {
	if x != nil {
		return x.FightTeam
	}
	return nil
}

func (x *FightExternalInformation_FightTeamsWithOptions) GetFightTeamOptions() *FightOptionsInformation {
	if x != nil {
		return x.FightTeamOptions
	}
	return nil
}

type FightTeamMemberCharacter_BasicAllianceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllianceUid string `protobuf:"bytes,1,opt,name=alliance_uid,json=allianceUid,proto3" json:"alliance_uid,omitempty"`
	AllianceTag string `protobuf:"bytes,2,opt,name=alliance_tag,json=allianceTag,proto3" json:"alliance_tag,omitempty"`
}

func (x *FightTeamMemberCharacter_BasicAllianceInformation) Reset() {
	*x = FightTeamMemberCharacter_BasicAllianceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamMemberCharacter_BasicAllianceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamMemberCharacter_BasicAllianceInformation) ProtoMessage() {}

func (x *FightTeamMemberCharacter_BasicAllianceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamMemberCharacter_BasicAllianceInformation.ProtoReflect.Descriptor instead.
func (*FightTeamMemberCharacter_BasicAllianceInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{44, 0}
}

func (x *FightTeamMemberCharacter_BasicAllianceInformation) GetAllianceUid() string {
	if x != nil {
		return x.AllianceUid
	}
	return ""
}

func (x *FightTeamMemberCharacter_BasicAllianceInformation) GetAllianceTag() string {
	if x != nil {
		return x.AllianceTag
	}
	return ""
}

type FightTemporaryBoostEffect_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstParam  int32 `protobuf:"varint,1,opt,name=first_param,json=firstParam,proto3" json:"first_param,omitempty"`
	SecondParam int32 `protobuf:"varint,2,opt,name=second_param,json=secondParam,proto3" json:"second_param,omitempty"`
	ThirdParam  int32 `protobuf:"varint,3,opt,name=third_param,json=thirdParam,proto3" json:"third_param,omitempty"`
}

func (x *FightTemporaryBoostEffect_Details) Reset() {
	*x = FightTemporaryBoostEffect_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTemporaryBoostEffect_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTemporaryBoostEffect_Details) ProtoMessage() {}

func (x *FightTemporaryBoostEffect_Details) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTemporaryBoostEffect_Details.ProtoReflect.Descriptor instead.
func (*FightTemporaryBoostEffect_Details) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{51, 0}
}

func (x *FightTemporaryBoostEffect_Details) GetFirstParam() int32 {
	if x != nil {
		return x.FirstParam
	}
	return 0
}

func (x *FightTemporaryBoostEffect_Details) GetSecondParam() int32 {
	if x != nil {
		return x.SecondParam
	}
	return 0
}

func (x *FightTemporaryBoostEffect_Details) GetThirdParam() int32 {
	if x != nil {
		return x.ThirdParam
	}
	return 0
}

type FightMark_MarkedCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ZoneSize  int32                              `protobuf:"varint,2,opt,name=zone_size,json=zoneSize,proto3" json:"zone_size,omitempty"`
	Color     int32                              `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	CellsType FightMark_MarkedCell_MarkCellsType `protobuf:"varint,4,opt,name=cells_type,json=cellsType,proto3,enum=com.ankama.dofus.server.game.protocol.common.FightMark_MarkedCell_MarkCellsType" json:"cells_type,omitempty"`
}

func (x *FightMark_MarkedCell) Reset() {
	*x = FightMark_MarkedCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightMark_MarkedCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightMark_MarkedCell) ProtoMessage() {}

func (x *FightMark_MarkedCell) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightMark_MarkedCell.ProtoReflect.Descriptor instead.
func (*FightMark_MarkedCell) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{54, 0}
}

func (x *FightMark_MarkedCell) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FightMark_MarkedCell) GetZoneSize() int32 {
	if x != nil {
		return x.ZoneSize
	}
	return 0
}

func (x *FightMark_MarkedCell) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *FightMark_MarkedCell) GetCellsType() FightMark_MarkedCell_MarkCellsType {
	if x != nil {
		return x.CellsType
	}
	return FightMark_MarkedCell_CELLS_CIRCLE
}

type FightResultListEntry_FightLoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*FightResultListEntry_FightLoot_Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
	Kamas   int64                                    `protobuf:"varint,2,opt,name=kamas,proto3" json:"kamas,omitempty"`
}

func (x *FightResultListEntry_FightLoot) Reset() {
	*x = FightResultListEntry_FightLoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultListEntry_FightLoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultListEntry_FightLoot) ProtoMessage() {}

func (x *FightResultListEntry_FightLoot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultListEntry_FightLoot.ProtoReflect.Descriptor instead.
func (*FightResultListEntry_FightLoot) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{58, 0}
}

func (x *FightResultListEntry_FightLoot) GetObjects() []*FightResultListEntry_FightLoot_Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *FightResultListEntry_FightLoot) GetKamas() int64 {
	if x != nil {
		return x.Kamas
	}
	return 0
}

type FightResultListEntry_FighterListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FighterId int64 `protobuf:"varint,1,opt,name=fighter_id,json=fighterId,proto3" json:"fighter_id,omitempty"`
	Alive     bool  `protobuf:"varint,2,opt,name=alive,proto3" json:"alive,omitempty"`
	// Types that are assignable to Complement:
	//
	//	*FightResultListEntry_FighterListEntry_PlayerListEntry_
	//	*FightResultListEntry_FighterListEntry_MutantListEntry_
	//	*FightResultListEntry_FighterListEntry_TaxCollectorListEntry_
	Complement isFightResultListEntry_FighterListEntry_Complement `protobuf_oneof:"complement"`
}

func (x *FightResultListEntry_FighterListEntry) Reset() {
	*x = FightResultListEntry_FighterListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultListEntry_FighterListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultListEntry_FighterListEntry) ProtoMessage() {}

func (x *FightResultListEntry_FighterListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultListEntry_FighterListEntry.ProtoReflect.Descriptor instead.
func (*FightResultListEntry_FighterListEntry) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{58, 1}
}

func (x *FightResultListEntry_FighterListEntry) GetFighterId() int64 {
	if x != nil {
		return x.FighterId
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (m *FightResultListEntry_FighterListEntry) GetComplement() isFightResultListEntry_FighterListEntry_Complement {
	if m != nil {
		return m.Complement
	}
	return nil
}

func (x *FightResultListEntry_FighterListEntry) GetPlayerListEntry() *FightResultListEntry_FighterListEntry_PlayerListEntry {
	if x, ok := x.GetComplement().(*FightResultListEntry_FighterListEntry_PlayerListEntry_); ok {
		return x.PlayerListEntry
	}
	return nil
}

func (x *FightResultListEntry_FighterListEntry) GetMutantListEntry() *FightResultListEntry_FighterListEntry_MutantListEntry {
	if x, ok := x.GetComplement().(*FightResultListEntry_FighterListEntry_MutantListEntry_); ok {
		return x.MutantListEntry
	}
	return nil
}

func (x *FightResultListEntry_FighterListEntry) GetTaxCollectorListEntry() *FightResultListEntry_FighterListEntry_TaxCollectorListEntry {
	if x, ok := x.GetComplement().(*FightResultListEntry_FighterListEntry_TaxCollectorListEntry_); ok {
		return x.TaxCollectorListEntry
	}
	return nil
}

type isFightResultListEntry_FighterListEntry_Complement interface {
	isFightResultListEntry_FighterListEntry_Complement()
}

type FightResultListEntry_FighterListEntry_PlayerListEntry_ struct {
	PlayerListEntry *FightResultListEntry_FighterListEntry_PlayerListEntry `protobuf:"bytes,3,opt,name=player_list_entry,json=playerListEntry,proto3,oneof"`
}

type FightResultListEntry_FighterListEntry_MutantListEntry_ struct {
	MutantListEntry *FightResultListEntry_FighterListEntry_MutantListEntry `protobuf:"bytes,4,opt,name=mutant_list_entry,json=mutantListEntry,proto3,oneof"`
}

type FightResultListEntry_FighterListEntry_TaxCollectorListEntry_ struct {
	TaxCollectorListEntry *FightResultListEntry_FighterListEntry_TaxCollectorListEntry `protobuf:"bytes,5,opt,name=tax_collector_list_entry,json=taxCollectorListEntry,proto3,oneof"`
}

func (*FightResultListEntry_FighterListEntry_PlayerListEntry_) isFightResultListEntry_FighterListEntry_Complement() {
}

func (*FightResultListEntry_FighterListEntry_MutantListEntry_) isFightResultListEntry_FighterListEntry_Complement() {
}

func (*FightResultListEntry_FighterListEntry_TaxCollectorListEntry_) isFightResultListEntry_FighterListEntry_Complement() {
}

type FightResultListEntry_FightLoot_Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Quantity     int32 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	PriorityHint int32 `protobuf:"varint,3,opt,name=priority_hint,json=priorityHint,proto3" json:"priority_hint,omitempty"`
}

func (x *FightResultListEntry_FightLoot_Object) Reset() {
	*x = FightResultListEntry_FightLoot_Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultListEntry_FightLoot_Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultListEntry_FightLoot_Object) ProtoMessage() {}

func (x *FightResultListEntry_FightLoot_Object) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultListEntry_FightLoot_Object.ProtoReflect.Descriptor instead.
func (*FightResultListEntry_FightLoot_Object) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{58, 0, 0}
}

func (x *FightResultListEntry_FightLoot_Object) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FightResultListEntry_FightLoot_Object) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *FightResultListEntry_FightLoot_Object) GetPriorityHint() int32 {
	if x != nil {
		return x.PriorityHint
	}
	return 0
}

type FightResultListEntry_FighterListEntry_PlayerListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      int32                                                                              `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Additional []*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData `protobuf:"bytes,2,rep,name=additional,proto3" json:"additional,omitempty"`
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry) Reset() {
	*x = FightResultListEntry_FighterListEntry_PlayerListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultListEntry_FighterListEntry_PlayerListEntry) ProtoMessage() {}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultListEntry_FighterListEntry_PlayerListEntry.ProtoReflect.Descriptor instead.
func (*FightResultListEntry_FighterListEntry_PlayerListEntry) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{58, 1, 0}
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry) GetAdditional() []*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData {
	if x != nil {
		return x.Additional
	}
	return nil
}

type FightResultListEntry_FighterListEntry_MutantListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *FightResultListEntry_FighterListEntry_MutantListEntry) Reset() {
	*x = FightResultListEntry_FighterListEntry_MutantListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultListEntry_FighterListEntry_MutantListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultListEntry_FighterListEntry_MutantListEntry) ProtoMessage() {}

func (x *FightResultListEntry_FighterListEntry_MutantListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultListEntry_FighterListEntry_MutantListEntry.ProtoReflect.Descriptor instead.
func (*FightResultListEntry_FighterListEntry_MutantListEntry) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{58, 1, 1}
}

func (x *FightResultListEntry_FighterListEntry_MutantListEntry) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type FightResultListEntry_FighterListEntry_TaxCollectorListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllianceInformation *AllianceInformation `protobuf:"bytes,1,opt,name=alliance_information,json=allianceInformation,proto3" json:"alliance_information,omitempty"`
}

func (x *FightResultListEntry_FighterListEntry_TaxCollectorListEntry) Reset() {
	*x = FightResultListEntry_FighterListEntry_TaxCollectorListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultListEntry_FighterListEntry_TaxCollectorListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultListEntry_FighterListEntry_TaxCollectorListEntry) ProtoMessage() {}

func (x *FightResultListEntry_FighterListEntry_TaxCollectorListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultListEntry_FighterListEntry_TaxCollectorListEntry.ProtoReflect.Descriptor instead.
func (*FightResultListEntry_FighterListEntry_TaxCollectorListEntry) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{58, 1, 2}
}

func (x *FightResultListEntry_FighterListEntry_TaxCollectorListEntry) GetAllianceInformation() *AllianceInformation {
	if x != nil {
		return x.AllianceInformation
	}
	return nil
}

type FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AdditionalData:
	//
	//	*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData_
	//	*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData_
	AdditionalData isFightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_AdditionalData `protobuf_oneof:"additional_data"`
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData) Reset() {
	*x = FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData) ProtoMessage() {
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData.ProtoReflect.Descriptor instead.
func (*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{58, 1, 0, 0}
}

func (m *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData) GetAdditionalData() isFightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_AdditionalData {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData) GetExperienceData() *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData {
	if x, ok := x.GetAdditionalData().(*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData_); ok {
		return x.ExperienceData
	}
	return nil
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData) GetPvpData() *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData {
	if x, ok := x.GetAdditionalData().(*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData_); ok {
		return x.PvpData
	}
	return nil
}

type isFightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_AdditionalData interface {
	isFightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_AdditionalData()
}

type FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData_ struct {
	ExperienceData *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData `protobuf:"bytes,1,opt,name=experience_data,json=experienceData,proto3,oneof"`
}

type FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData_ struct {
	PvpData *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData `protobuf:"bytes,2,opt,name=pvp_data,json=pvpData,proto3,oneof"`
}

func (*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData_) isFightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_AdditionalData() {
}

func (*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData_) isFightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_AdditionalData() {
}

type FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experience                   int64 `protobuf:"varint,1,opt,name=experience,proto3" json:"experience,omitempty"`
	ShowExperience               bool  `protobuf:"varint,2,opt,name=show_experience,json=showExperience,proto3" json:"show_experience,omitempty"`
	ExperienceLevelFloor         int64 `protobuf:"varint,3,opt,name=experience_level_floor,json=experienceLevelFloor,proto3" json:"experience_level_floor,omitempty"`
	ShowExperienceLevelFloor     bool  `protobuf:"varint,4,opt,name=show_experience_level_floor,json=showExperienceLevelFloor,proto3" json:"show_experience_level_floor,omitempty"`
	ExperienceNextLevelFloor     int64 `protobuf:"varint,5,opt,name=experience_next_level_floor,json=experienceNextLevelFloor,proto3" json:"experience_next_level_floor,omitempty"`
	ShowExperienceNextLevelFloor bool  `protobuf:"varint,6,opt,name=show_experience_next_level_floor,json=showExperienceNextLevelFloor,proto3" json:"show_experience_next_level_floor,omitempty"`
	ExperienceFightDelta         int64 `protobuf:"varint,7,opt,name=experience_fight_delta,json=experienceFightDelta,proto3" json:"experience_fight_delta,omitempty"`
	ShowExperienceFightDelta     bool  `protobuf:"varint,8,opt,name=show_experience_fight_delta,json=showExperienceFightDelta,proto3" json:"show_experience_fight_delta,omitempty"`
	ExperienceForGuild           int64 `protobuf:"varint,9,opt,name=experience_for_guild,json=experienceForGuild,proto3" json:"experience_for_guild,omitempty"`
	ShowExperienceForGuild       bool  `protobuf:"varint,10,opt,name=show_experience_for_guild,json=showExperienceForGuild,proto3" json:"show_experience_for_guild,omitempty"`
	ExperienceForMount           int64 `protobuf:"varint,11,opt,name=experience_for_mount,json=experienceForMount,proto3" json:"experience_for_mount,omitempty"`
	ShowExperienceForMount       bool  `protobuf:"varint,12,opt,name=show_experience_for_mount,json=showExperienceForMount,proto3" json:"show_experience_for_mount,omitempty"`
	ReRollExperienceMultiplier   int32 `protobuf:"varint,13,opt,name=re_roll_experience_multiplier,json=reRollExperienceMultiplier,proto3" json:"re_roll_experience_multiplier,omitempty"`
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) Reset() {
	*x = FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) ProtoMessage() {
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData.ProtoReflect.Descriptor instead.
func (*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{58, 1, 0, 0, 0}
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetExperience() int64 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetShowExperience() bool {
	if x != nil {
		return x.ShowExperience
	}
	return false
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetExperienceLevelFloor() int64 {
	if x != nil {
		return x.ExperienceLevelFloor
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetShowExperienceLevelFloor() bool {
	if x != nil {
		return x.ShowExperienceLevelFloor
	}
	return false
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetExperienceNextLevelFloor() int64 {
	if x != nil {
		return x.ExperienceNextLevelFloor
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetShowExperienceNextLevelFloor() bool {
	if x != nil {
		return x.ShowExperienceNextLevelFloor
	}
	return false
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetExperienceFightDelta() int64 {
	if x != nil {
		return x.ExperienceFightDelta
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetShowExperienceFightDelta() bool {
	if x != nil {
		return x.ShowExperienceFightDelta
	}
	return false
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetExperienceForGuild() int64 {
	if x != nil {
		return x.ExperienceForGuild
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetShowExperienceForGuild() bool {
	if x != nil {
		return x.ShowExperienceForGuild
	}
	return false
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetExperienceForMount() int64 {
	if x != nil {
		return x.ExperienceForMount
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetShowExperienceForMount() bool {
	if x != nil {
		return x.ShowExperienceForMount
	}
	return false
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData) GetReRollExperienceMultiplier() int32 {
	if x != nil {
		return x.ReRollExperienceMultiplier
	}
	return 0
}

type FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grade            int32 `protobuf:"varint,1,opt,name=grade,proto3" json:"grade,omitempty"`
	MinHonorForGrade int32 `protobuf:"varint,2,opt,name=min_honor_for_grade,json=minHonorForGrade,proto3" json:"min_honor_for_grade,omitempty"`
	MaxHonorForGrade int32 `protobuf:"varint,3,opt,name=max_honor_for_grade,json=maxHonorForGrade,proto3" json:"max_honor_for_grade,omitempty"`
	Honor            int32 `protobuf:"varint,4,opt,name=honor,proto3" json:"honor,omitempty"`
	HonorDelta       int32 `protobuf:"varint,5,opt,name=honor_delta,json=honorDelta,proto3" json:"honor_delta,omitempty"`
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData) Reset() {
	*x = FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData) ProtoMessage() {
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData.ProtoReflect.Descriptor instead.
func (*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{58, 1, 0, 0, 1}
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData) GetMinHonorForGrade() int32 {
	if x != nil {
		return x.MinHonorForGrade
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData) GetMaxHonorForGrade() int32 {
	if x != nil {
		return x.MaxHonorForGrade
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData) GetHonor() int32 {
	if x != nil {
		return x.Honor
	}
	return 0
}

func (x *FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData) GetHonorDelta() int32 {
	if x != nil {
		return x.HonorDelta
	}
	return 0
}

type GuildInformation_GuildSocialInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emblem              *SocialEmblem                                                     `protobuf:"bytes,1,opt,name=emblem,proto3" json:"emblem,omitempty"`
	DetailedInformation *GuildInformation_GuildSocialInformation_GuildDetailedInformation `protobuf:"bytes,2,opt,name=detailed_information,json=detailedInformation,proto3,oneof" json:"detailed_information,omitempty"`
}

func (x *GuildInformation_GuildSocialInformation) Reset() {
	*x = GuildInformation_GuildSocialInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildInformation_GuildSocialInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildInformation_GuildSocialInformation) ProtoMessage() {}

func (x *GuildInformation_GuildSocialInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildInformation_GuildSocialInformation.ProtoReflect.Descriptor instead.
func (*GuildInformation_GuildSocialInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{61, 0}
}

func (x *GuildInformation_GuildSocialInformation) GetEmblem() *SocialEmblem {
	if x != nil {
		return x.Emblem
	}
	return nil
}

func (x *GuildInformation_GuildSocialInformation) GetDetailedInformation() *GuildInformation_GuildSocialInformation_GuildDetailedInformation {
	if x != nil {
		return x.DetailedInformation
	}
	return nil
}

type GuildInformation_GuildSocialInformation_GuildDetailedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderId                 int64                        `protobuf:"varint,1,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	MembersCount             int32                        `protobuf:"varint,2,opt,name=members_count,json=membersCount,proto3" json:"members_count,omitempty"`
	LastActivityDay          int32                        `protobuf:"varint,3,opt,name=last_activity_day,json=lastActivityDay,proto3" json:"last_activity_day,omitempty"`
	Recruitment              *GuildRecruitmentInformation `protobuf:"bytes,4,opt,name=recruitment,proto3" json:"recruitment,omitempty"`
	PendingApplicationsCount int32                        `protobuf:"varint,5,opt,name=pending_applications_count,json=pendingApplicationsCount,proto3" json:"pending_applications_count,omitempty"`
	LeaderName               *string                      `protobuf:"bytes,6,opt,name=leader_name,json=leaderName,proto3,oneof" json:"leader_name,omitempty"`
}

func (x *GuildInformation_GuildSocialInformation_GuildDetailedInformation) Reset() {
	*x = GuildInformation_GuildSocialInformation_GuildDetailedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildInformation_GuildSocialInformation_GuildDetailedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildInformation_GuildSocialInformation_GuildDetailedInformation) ProtoMessage() {}

func (x *GuildInformation_GuildSocialInformation_GuildDetailedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildInformation_GuildSocialInformation_GuildDetailedInformation.ProtoReflect.Descriptor instead.
func (*GuildInformation_GuildSocialInformation_GuildDetailedInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{61, 0, 0}
}

func (x *GuildInformation_GuildSocialInformation_GuildDetailedInformation) GetLeaderId() int64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

func (x *GuildInformation_GuildSocialInformation_GuildDetailedInformation) GetMembersCount() int32 {
	if x != nil {
		return x.MembersCount
	}
	return 0
}

func (x *GuildInformation_GuildSocialInformation_GuildDetailedInformation) GetLastActivityDay() int32 {
	if x != nil {
		return x.LastActivityDay
	}
	return 0
}

func (x *GuildInformation_GuildSocialInformation_GuildDetailedInformation) GetRecruitment() *GuildRecruitmentInformation {
	if x != nil {
		return x.Recruitment
	}
	return nil
}

func (x *GuildInformation_GuildSocialInformation_GuildDetailedInformation) GetPendingApplicationsCount() int32 {
	if x != nil {
		return x.PendingApplicationsCount
	}
	return 0
}

func (x *GuildInformation_GuildSocialInformation_GuildDetailedInformation) GetLeaderName() string {
	if x != nil && x.LeaderName != nil {
		return *x.LeaderName
	}
	return ""
}

type GuildLogbookEntry_ChestActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId         int64                                          `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	PlayerName       string                                         `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	EventType        GuildLogbookEntry_ChestActivity_ChestEventType `protobuf:"varint,3,opt,name=event_type,json=eventType,proto3,enum=com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry_ChestActivity_ChestEventType" json:"event_type,omitempty"`
	Quantity         int32                                          `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Object           *ObjectItem                                    `protobuf:"bytes,5,opt,name=object,proto3" json:"object,omitempty"`
	SourceTabId      int32                                          `protobuf:"varint,6,opt,name=source_tab_id,json=sourceTabId,proto3" json:"source_tab_id,omitempty"`
	DestinationTabId int32                                          `protobuf:"varint,7,opt,name=destination_tab_id,json=destinationTabId,proto3" json:"destination_tab_id,omitempty"`
}

func (x *GuildLogbookEntry_ChestActivity) Reset() {
	*x = GuildLogbookEntry_ChestActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildLogbookEntry_ChestActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildLogbookEntry_ChestActivity) ProtoMessage() {}

func (x *GuildLogbookEntry_ChestActivity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildLogbookEntry_ChestActivity.ProtoReflect.Descriptor instead.
func (*GuildLogbookEntry_ChestActivity) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63, 0}
}

func (x *GuildLogbookEntry_ChestActivity) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *GuildLogbookEntry_ChestActivity) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *GuildLogbookEntry_ChestActivity) GetEventType() GuildLogbookEntry_ChestActivity_ChestEventType {
	if x != nil {
		return x.EventType
	}
	return GuildLogbookEntry_ChestActivity_DEPOSIT
}

func (x *GuildLogbookEntry_ChestActivity) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *GuildLogbookEntry_ChestActivity) GetObject() *ObjectItem {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *GuildLogbookEntry_ChestActivity) GetSourceTabId() int32 {
	if x != nil {
		return x.SourceTabId
	}
	return 0
}

func (x *GuildLogbookEntry_ChestActivity) GetDestinationTabId() int32 {
	if x != nil {
		return x.DestinationTabId
	}
	return 0
}

type GuildLogbookEntry_PaddockActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId                   int64                                                        `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	PlayerName                 string                                                       `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	PaddockCoordinates         *MapExtendedCoordinates                                      `protobuf:"bytes,3,opt,name=paddock_coordinates,json=paddockCoordinates,proto3" json:"paddock_coordinates,omitempty"`
	FarmId                     int64                                                        `protobuf:"varint,4,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`
	PaddockCommercialEventType GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType `protobuf:"varint,5,opt,name=paddock_commercial_event_type,json=paddockCommercialEventType,proto3,enum=com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType" json:"paddock_commercial_event_type,omitempty"`
}

func (x *GuildLogbookEntry_PaddockActivity) Reset() {
	*x = GuildLogbookEntry_PaddockActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildLogbookEntry_PaddockActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildLogbookEntry_PaddockActivity) ProtoMessage() {}

func (x *GuildLogbookEntry_PaddockActivity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildLogbookEntry_PaddockActivity.ProtoReflect.Descriptor instead.
func (*GuildLogbookEntry_PaddockActivity) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63, 1}
}

func (x *GuildLogbookEntry_PaddockActivity) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *GuildLogbookEntry_PaddockActivity) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *GuildLogbookEntry_PaddockActivity) GetPaddockCoordinates() *MapExtendedCoordinates {
	if x != nil {
		return x.PaddockCoordinates
	}
	return nil
}

func (x *GuildLogbookEntry_PaddockActivity) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *GuildLogbookEntry_PaddockActivity) GetPaddockCommercialEventType() GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType {
	if x != nil {
		return x.PaddockCommercialEventType
	}
	return GuildLogbookEntry_PaddockActivity_BUY
}

type GuildLogbookEntry_PlayerFlowActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId            int64                                                    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	PlayerName          string                                                   `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	PlayerFlowEventType GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType `protobuf:"varint,3,opt,name=player_flow_event_type,json=playerFlowEventType,proto3,enum=com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType" json:"player_flow_event_type,omitempty"`
}

func (x *GuildLogbookEntry_PlayerFlowActivity) Reset() {
	*x = GuildLogbookEntry_PlayerFlowActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildLogbookEntry_PlayerFlowActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildLogbookEntry_PlayerFlowActivity) ProtoMessage() {}

func (x *GuildLogbookEntry_PlayerFlowActivity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildLogbookEntry_PlayerFlowActivity.ProtoReflect.Descriptor instead.
func (*GuildLogbookEntry_PlayerFlowActivity) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63, 2}
}

func (x *GuildLogbookEntry_PlayerFlowActivity) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *GuildLogbookEntry_PlayerFlowActivity) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *GuildLogbookEntry_PlayerFlowActivity) GetPlayerFlowEventType() GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType {
	if x != nil {
		return x.PlayerFlowEventType
	}
	return GuildLogbookEntry_PlayerFlowActivity_JOIN
}

type GuildLogbookEntry_LevelUpActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewGuildLevel int32 `protobuf:"varint,1,opt,name=new_guild_level,json=newGuildLevel,proto3" json:"new_guild_level,omitempty"`
}

func (x *GuildLogbookEntry_LevelUpActivity) Reset() {
	*x = GuildLogbookEntry_LevelUpActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildLogbookEntry_LevelUpActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildLogbookEntry_LevelUpActivity) ProtoMessage() {}

func (x *GuildLogbookEntry_LevelUpActivity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildLogbookEntry_LevelUpActivity.ProtoReflect.Descriptor instead.
func (*GuildLogbookEntry_LevelUpActivity) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63, 3}
}

func (x *GuildLogbookEntry_LevelUpActivity) GetNewGuildLevel() int32 {
	if x != nil {
		return x.NewGuildLevel
	}
	return 0
}

type GuildLogbookEntry_UnlockNewTabActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GuildLogbookEntry_UnlockNewTabActivity) Reset() {
	*x = GuildLogbookEntry_UnlockNewTabActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildLogbookEntry_UnlockNewTabActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildLogbookEntry_UnlockNewTabActivity) ProtoMessage() {}

func (x *GuildLogbookEntry_UnlockNewTabActivity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildLogbookEntry_UnlockNewTabActivity.ProtoReflect.Descriptor instead.
func (*GuildLogbookEntry_UnlockNewTabActivity) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63, 4}
}

type GuildLogbookEntry_RankActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankActivityType GuildLogbookEntry_RankActivity_RankActivityType `protobuf:"varint,1,opt,name=rank_activity_type,json=rankActivityType,proto3,enum=com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry_RankActivity_RankActivityType" json:"rank_activity_type,omitempty"`
	RankInformation  *RankInformation                                `protobuf:"bytes,2,opt,name=rank_information,json=rankInformation,proto3" json:"rank_information,omitempty"`
}

func (x *GuildLogbookEntry_RankActivity) Reset() {
	*x = GuildLogbookEntry_RankActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildLogbookEntry_RankActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildLogbookEntry_RankActivity) ProtoMessage() {}

func (x *GuildLogbookEntry_RankActivity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildLogbookEntry_RankActivity.ProtoReflect.Descriptor instead.
func (*GuildLogbookEntry_RankActivity) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63, 5}
}

func (x *GuildLogbookEntry_RankActivity) GetRankActivityType() GuildLogbookEntry_RankActivity_RankActivityType {
	if x != nil {
		return x.RankActivityType
	}
	return GuildLogbookEntry_RankActivity_CREATION
}

func (x *GuildLogbookEntry_RankActivity) GetRankInformation() *RankInformation {
	if x != nil {
		return x.RankInformation
	}
	return nil
}

type GuildLogbookEntry_PlayerRankUpdateActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankInformation  *RankInformation `protobuf:"bytes,1,opt,name=rank_information,json=rankInformation,proto3" json:"rank_information,omitempty"`
	SourcePlayerId   int64            `protobuf:"varint,2,opt,name=source_player_id,json=sourcePlayerId,proto3" json:"source_player_id,omitempty"`
	TargetPlayerId   int64            `protobuf:"varint,3,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	SourcePlayerName string           `protobuf:"bytes,4,opt,name=source_player_name,json=sourcePlayerName,proto3" json:"source_player_name,omitempty"`
	TargetPlayerName string           `protobuf:"bytes,5,opt,name=target_player_name,json=targetPlayerName,proto3" json:"target_player_name,omitempty"`
}

func (x *GuildLogbookEntry_PlayerRankUpdateActivity) Reset() {
	*x = GuildLogbookEntry_PlayerRankUpdateActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildLogbookEntry_PlayerRankUpdateActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildLogbookEntry_PlayerRankUpdateActivity) ProtoMessage() {}

func (x *GuildLogbookEntry_PlayerRankUpdateActivity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildLogbookEntry_PlayerRankUpdateActivity.ProtoReflect.Descriptor instead.
func (*GuildLogbookEntry_PlayerRankUpdateActivity) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{63, 6}
}

func (x *GuildLogbookEntry_PlayerRankUpdateActivity) GetRankInformation() *RankInformation {
	if x != nil {
		return x.RankInformation
	}
	return nil
}

func (x *GuildLogbookEntry_PlayerRankUpdateActivity) GetSourcePlayerId() int64 {
	if x != nil {
		return x.SourcePlayerId
	}
	return 0
}

func (x *GuildLogbookEntry_PlayerRankUpdateActivity) GetTargetPlayerId() int64 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *GuildLogbookEntry_PlayerRankUpdateActivity) GetSourcePlayerName() string {
	if x != nil {
		return x.SourcePlayerName
	}
	return ""
}

func (x *GuildLogbookEntry_PlayerRankUpdateActivity) GetTargetPlayerName() string {
	if x != nil {
		return x.TargetPlayerName
	}
	return ""
}

type House_HouseAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HouseInformation *HouseInstance          `protobuf:"bytes,1,opt,name=house_information,json=houseInformation,proto3" json:"house_information,omitempty"`
	Coordinates      *MapExtendedCoordinates `protobuf:"bytes,2,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *House_HouseAccount) Reset() {
	*x = House_HouseAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *House_HouseAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*House_HouseAccount) ProtoMessage() {}

func (x *House_HouseAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use House_HouseAccount.ProtoReflect.Descriptor instead.
func (*House_HouseAccount) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{65, 0}
}

func (x *House_HouseAccount) GetHouseInformation() *HouseInstance {
	if x != nil {
		return x.HouseInformation
	}
	return nil
}

func (x *House_HouseAccount) GetCoordinates() *MapExtendedCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

type House_HouseOnMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoorsOnMap        []int32          `protobuf:"varint,1,rep,packed,name=doors_on_map,json=doorsOnMap,proto3" json:"doors_on_map,omitempty"`
	HousesInformation []*HouseInstance `protobuf:"bytes,2,rep,name=houses_information,json=housesInformation,proto3" json:"houses_information,omitempty"`
}

func (x *House_HouseOnMap) Reset() {
	*x = House_HouseOnMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *House_HouseOnMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*House_HouseOnMap) ProtoMessage() {}

func (x *House_HouseOnMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use House_HouseOnMap.ProtoReflect.Descriptor instead.
func (*House_HouseOnMap) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{65, 1}
}

func (x *House_HouseOnMap) GetDoorsOnMap() []int32 {
	if x != nil {
		return x.DoorsOnMap
	}
	return nil
}

func (x *House_HouseOnMap) GetHousesInformation() []*HouseInstance {
	if x != nil {
		return x.HousesInformation
	}
	return nil
}

type House_HouseInside struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HouseInformation *HouseInstance  `protobuf:"bytes,1,opt,name=house_information,json=houseInformation,proto3" json:"house_information,omitempty"`
	Coordinates      *MapCoordinates `protobuf:"bytes,2,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *House_HouseInside) Reset() {
	*x = House_HouseInside{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *House_HouseInside) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*House_HouseInside) ProtoMessage() {}

func (x *House_HouseInside) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use House_HouseInside.ProtoReflect.Descriptor instead.
func (*House_HouseInside) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{65, 2}
}

func (x *House_HouseInside) GetHouseInformation() *HouseInstance {
	if x != nil {
		return x.HouseInformation
	}
	return nil
}

func (x *House_HouseInside) GetCoordinates() *MapCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

type House_HouseGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HouseInformation *HouseInstance          `protobuf:"bytes,1,opt,name=house_information,json=houseInformation,proto3" json:"house_information,omitempty"`
	Coordinates      *MapExtendedCoordinates `protobuf:"bytes,2,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	SkillsId         []int32                 `protobuf:"varint,3,rep,packed,name=skills_id,json=skillsId,proto3" json:"skills_id,omitempty"`
	GuildShareParams int64                   `protobuf:"varint,4,opt,name=guild_share_params,json=guildShareParams,proto3" json:"guild_share_params,omitempty"`
}

func (x *House_HouseGuild) Reset() {
	*x = House_HouseGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *House_HouseGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*House_HouseGuild) ProtoMessage() {}

func (x *House_HouseGuild) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use House_HouseGuild.ProtoReflect.Descriptor instead.
func (*House_HouseGuild) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{65, 3}
}

func (x *House_HouseGuild) GetHouseInformation() *HouseInstance {
	if x != nil {
		return x.HouseInformation
	}
	return nil
}

func (x *House_HouseGuild) GetCoordinates() *MapExtendedCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *House_HouseGuild) GetSkillsId() []int32 {
	if x != nil {
		return x.SkillsId
	}
	return nil
}

func (x *House_HouseGuild) GetGuildShareParams() int64 {
	if x != nil {
		return x.GuildShareParams
	}
	return 0
}

type ItemMinimalInformation_ItemToSellInNpcShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price        int64  `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	BuyCriterion string `protobuf:"bytes,2,opt,name=buy_criterion,json=buyCriterion,proto3" json:"buy_criterion,omitempty"`
}

func (x *ItemMinimalInformation_ItemToSellInNpcShop) Reset() {
	*x = ItemMinimalInformation_ItemToSellInNpcShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemMinimalInformation_ItemToSellInNpcShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMinimalInformation_ItemToSellInNpcShop) ProtoMessage() {}

func (x *ItemMinimalInformation_ItemToSellInNpcShop) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMinimalInformation_ItemToSellInNpcShop.ProtoReflect.Descriptor instead.
func (*ItemMinimalInformation_ItemToSellInNpcShop) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{79, 0}
}

func (x *ItemMinimalInformation_ItemToSellInNpcShop) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ItemMinimalInformation_ItemToSellInNpcShop) GetBuyCriterion() string {
	if x != nil {
		return x.BuyCriterion
	}
	return ""
}

type ObjectGidWithQuantity_ObjectPriceDateEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price   int64           `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Effects []*ObjectEffect `protobuf:"bytes,2,rep,name=effects,proto3" json:"effects,omitempty"`
	Date    int64           `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ObjectGidWithQuantity_ObjectPriceDateEffect) Reset() {
	*x = ObjectGidWithQuantity_ObjectPriceDateEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectGidWithQuantity_ObjectPriceDateEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectGidWithQuantity_ObjectPriceDateEffect) ProtoMessage() {}

func (x *ObjectGidWithQuantity_ObjectPriceDateEffect) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectGidWithQuantity_ObjectPriceDateEffect.ProtoReflect.Descriptor instead.
func (*ObjectGidWithQuantity_ObjectPriceDateEffect) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{80, 0}
}

func (x *ObjectGidWithQuantity_ObjectPriceDateEffect) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ObjectGidWithQuantity_ObjectPriceDateEffect) GetEffects() []*ObjectEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *ObjectGidWithQuantity_ObjectPriceDateEffect) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type ObjectEffect_ObjectEffectMinMaxValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ObjectEffect_ObjectEffectMinMaxValue) Reset() {
	*x = ObjectEffect_ObjectEffectMinMaxValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectEffect_ObjectEffectMinMaxValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEffect_ObjectEffectMinMaxValue) ProtoMessage() {}

func (x *ObjectEffect_ObjectEffectMinMaxValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEffect_ObjectEffectMinMaxValue.ProtoReflect.Descriptor instead.
func (*ObjectEffect_ObjectEffectMinMaxValue) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{84, 0}
}

func (x *ObjectEffect_ObjectEffectMinMaxValue) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ObjectEffect_ObjectEffectMinMaxValue) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type ObjectEffect_ObjectEffectDiceValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num   int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Side  int32 `protobuf:"varint,2,opt,name=side,proto3" json:"side,omitempty"`
	Const int32 `protobuf:"varint,3,opt,name=const,proto3" json:"const,omitempty"`
}

func (x *ObjectEffect_ObjectEffectDiceValue) Reset() {
	*x = ObjectEffect_ObjectEffectDiceValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectEffect_ObjectEffectDiceValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEffect_ObjectEffectDiceValue) ProtoMessage() {}

func (x *ObjectEffect_ObjectEffectDiceValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEffect_ObjectEffectDiceValue.ProtoReflect.Descriptor instead.
func (*ObjectEffect_ObjectEffectDiceValue) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{84, 1}
}

func (x *ObjectEffect_ObjectEffectDiceValue) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ObjectEffect_ObjectEffectDiceValue) GetSide() int32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *ObjectEffect_ObjectEffectDiceValue) GetConst() int32 {
	if x != nil {
		return x.Const
	}
	return 0
}

type ObjectEffect_MonsterCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatureFamily int32 `protobuf:"varint,1,opt,name=creature_family,json=creatureFamily,proto3" json:"creature_family,omitempty"`
	Count          int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ObjectEffect_MonsterCount) Reset() {
	*x = ObjectEffect_MonsterCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectEffect_MonsterCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEffect_MonsterCount) ProtoMessage() {}

func (x *ObjectEffect_MonsterCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEffect_MonsterCount.ProtoReflect.Descriptor instead.
func (*ObjectEffect_MonsterCount) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{84, 2}
}

func (x *ObjectEffect_MonsterCount) GetCreatureFamily() int32 {
	if x != nil {
		return x.CreatureFamily
	}
	return 0
}

func (x *ObjectEffect_MonsterCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ObjectEffect_ObjectEffectMountValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId     int64           `protobuf:"varint,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	DateExpiration    string          `protobuf:"bytes,2,opt,name=date_expiration,json=dateExpiration,proto3" json:"date_expiration,omitempty"`
	ModelId           int32           `protobuf:"varint,3,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	MountName         string          `protobuf:"bytes,4,opt,name=mount_name,json=mountName,proto3" json:"mount_name,omitempty"`
	OwnerName         string          `protobuf:"bytes,5,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	MountLevel        int32           `protobuf:"varint,6,opt,name=mount_level,json=mountLevel,proto3" json:"mount_level,omitempty"`
	MountGender       Gender          `protobuf:"varint,7,opt,name=mount_gender,json=mountGender,proto3,enum=com.ankama.dofus.server.game.protocol.common.Gender" json:"mount_gender,omitempty"`
	Rideable          bool            `protobuf:"varint,8,opt,name=rideable,proto3" json:"rideable,omitempty"`
	Impregnated       bool            `protobuf:"varint,9,opt,name=impregnated,proto3" json:"impregnated,omitempty"`
	ImpregnateReady   bool            `protobuf:"varint,10,opt,name=impregnate_ready,json=impregnateReady,proto3" json:"impregnate_ready,omitempty"`
	ReproductionCount int32           `protobuf:"varint,11,opt,name=reproduction_count,json=reproductionCount,proto3" json:"reproduction_count,omitempty"`
	ReproductionMax   int32           `protobuf:"varint,12,opt,name=reproduction_max,json=reproductionMax,proto3" json:"reproduction_max,omitempty"`
	Effect            []*ObjectEffect `protobuf:"bytes,13,rep,name=effect,proto3" json:"effect,omitempty"`
	Capacity          []int32         `protobuf:"varint,14,rep,packed,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *ObjectEffect_ObjectEffectMountValue) Reset() {
	*x = ObjectEffect_ObjectEffectMountValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectEffect_ObjectEffectMountValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEffect_ObjectEffectMountValue) ProtoMessage() {}

func (x *ObjectEffect_ObjectEffectMountValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEffect_ObjectEffectMountValue.ProtoReflect.Descriptor instead.
func (*ObjectEffect_ObjectEffectMountValue) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{84, 3}
}

func (x *ObjectEffect_ObjectEffectMountValue) GetCertificateId() int64 {
	if x != nil {
		return x.CertificateId
	}
	return 0
}

func (x *ObjectEffect_ObjectEffectMountValue) GetDateExpiration() string {
	if x != nil {
		return x.DateExpiration
	}
	return ""
}

func (x *ObjectEffect_ObjectEffectMountValue) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *ObjectEffect_ObjectEffectMountValue) GetMountName() string {
	if x != nil {
		return x.MountName
	}
	return ""
}

func (x *ObjectEffect_ObjectEffectMountValue) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *ObjectEffect_ObjectEffectMountValue) GetMountLevel() int32 {
	if x != nil {
		return x.MountLevel
	}
	return 0
}

func (x *ObjectEffect_ObjectEffectMountValue) GetMountGender() Gender {
	if x != nil {
		return x.MountGender
	}
	return Gender_MALE
}

func (x *ObjectEffect_ObjectEffectMountValue) GetRideable() bool {
	if x != nil {
		return x.Rideable
	}
	return false
}

func (x *ObjectEffect_ObjectEffectMountValue) GetImpregnated() bool {
	if x != nil {
		return x.Impregnated
	}
	return false
}

func (x *ObjectEffect_ObjectEffectMountValue) GetImpregnateReady() bool {
	if x != nil {
		return x.ImpregnateReady
	}
	return false
}

func (x *ObjectEffect_ObjectEffectMountValue) GetReproductionCount() int32 {
	if x != nil {
		return x.ReproductionCount
	}
	return 0
}

func (x *ObjectEffect_ObjectEffectMountValue) GetReproductionMax() int32 {
	if x != nil {
		return x.ReproductionMax
	}
	return 0
}

func (x *ObjectEffect_ObjectEffectMountValue) GetEffect() []*ObjectEffect {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *ObjectEffect_ObjectEffectMountValue) GetCapacity() []int32 {
	if x != nil {
		return x.Capacity
	}
	return nil
}

type ObjectInRolePlay_WithLook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Look      *EntityLook `protobuf:"bytes,1,opt,name=look,proto3" json:"look,omitempty"`
	Direction *Direction  `protobuf:"varint,2,opt,name=direction,proto3,enum=com.ankama.dofus.server.game.protocol.common.Direction,oneof" json:"direction,omitempty"`
}

func (x *ObjectInRolePlay_WithLook) Reset() {
	*x = ObjectInRolePlay_WithLook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectInRolePlay_WithLook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectInRolePlay_WithLook) ProtoMessage() {}

func (x *ObjectInRolePlay_WithLook) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectInRolePlay_WithLook.ProtoReflect.Descriptor instead.
func (*ObjectInRolePlay_WithLook) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{85, 0}
}

func (x *ObjectInRolePlay_WithLook) GetLook() *EntityLook {
	if x != nil {
		return x.Look
	}
	return nil
}

func (x *ObjectInRolePlay_WithLook) GetDirection() Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return Direction_DIRECTION_EAST
}

type ObjectInRolePlay_PaddockItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Durability    int32 `protobuf:"varint,1,opt,name=durability,proto3" json:"durability,omitempty"`
	DurabilityMax int32 `protobuf:"varint,2,opt,name=durability_max,json=durabilityMax,proto3" json:"durability_max,omitempty"`
}

func (x *ObjectInRolePlay_PaddockItem) Reset() {
	*x = ObjectInRolePlay_PaddockItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectInRolePlay_PaddockItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectInRolePlay_PaddockItem) ProtoMessage() {}

func (x *ObjectInRolePlay_PaddockItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectInRolePlay_PaddockItem.ProtoReflect.Descriptor instead.
func (*ObjectInRolePlay_PaddockItem) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{85, 1}
}

func (x *ObjectInRolePlay_PaddockItem) GetDurability() int32 {
	if x != nil {
		return x.Durability
	}
	return 0
}

func (x *ObjectInRolePlay_PaddockItem) GetDurabilityMax() int32 {
	if x != nil {
		return x.DurabilityMax
	}
	return 0
}

type RankInformation_OrderAndGfx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order int32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	GfxId int32 `protobuf:"varint,2,opt,name=gfx_id,json=gfxId,proto3" json:"gfx_id,omitempty"`
}

func (x *RankInformation_OrderAndGfx) Reset() {
	*x = RankInformation_OrderAndGfx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankInformation_OrderAndGfx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankInformation_OrderAndGfx) ProtoMessage() {}

func (x *RankInformation_OrderAndGfx) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankInformation_OrderAndGfx.ProtoReflect.Descriptor instead.
func (*RankInformation_OrderAndGfx) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{95, 0}
}

func (x *RankInformation_OrderAndGfx) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *RankInformation_OrderAndGfx) GetGfxId() int32 {
	if x != nil {
		return x.GfxId
	}
	return 0
}

type RankInformation_PrivateInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modifiable bool    `protobuf:"varint,1,opt,name=modifiable,proto3" json:"modifiable,omitempty"`
	Rights     []int32 `protobuf:"varint,2,rep,packed,name=rights,proto3" json:"rights,omitempty"`
}

func (x *RankInformation_PrivateInformation) Reset() {
	*x = RankInformation_PrivateInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankInformation_PrivateInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankInformation_PrivateInformation) ProtoMessage() {}

func (x *RankInformation_PrivateInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankInformation_PrivateInformation.ProtoReflect.Descriptor instead.
func (*RankInformation_PrivateInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{95, 1}
}

func (x *RankInformation_PrivateInformation) GetModifiable() bool {
	if x != nil {
		return x.Modifiable
	}
	return false
}

func (x *RankInformation_PrivateInformation) GetRights() []int32 {
	if x != nil {
		return x.Rights
	}
	return nil
}

type PaddockInformation_PaddockContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaddockId         int64                                                `protobuf:"varint,1,opt,name=paddock_id,json=paddockId,proto3" json:"paddock_id,omitempty"`
	Coordinates       *MapExtendedCoordinates                              `protobuf:"bytes,2,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	Abandoned         bool                                                 `protobuf:"varint,3,opt,name=abandoned,proto3" json:"abandoned,omitempty"`
	MountsInformation []*PaddockInformation_PaddockContent_MountForPaddock `protobuf:"bytes,4,rep,name=mounts_information,json=mountsInformation,proto3" json:"mounts_information,omitempty"`
}

func (x *PaddockInformation_PaddockContent) Reset() {
	*x = PaddockInformation_PaddockContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaddockInformation_PaddockContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaddockInformation_PaddockContent) ProtoMessage() {}

func (x *PaddockInformation_PaddockContent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaddockInformation_PaddockContent.ProtoReflect.Descriptor instead.
func (*PaddockInformation_PaddockContent) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{104, 0}
}

func (x *PaddockInformation_PaddockContent) GetPaddockId() int64 {
	if x != nil {
		return x.PaddockId
	}
	return 0
}

func (x *PaddockInformation_PaddockContent) GetCoordinates() *MapExtendedCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *PaddockInformation_PaddockContent) GetAbandoned() bool {
	if x != nil {
		return x.Abandoned
	}
	return false
}

func (x *PaddockInformation_PaddockContent) GetMountsInformation() []*PaddockInformation_PaddockContent_MountForPaddock {
	if x != nil {
		return x.MountsInformation
	}
	return nil
}

type PaddockInformation_PaddockInstances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaddocksToSell []*PaddockInformation_PaddockInstances_PaddockToSell `protobuf:"bytes,1,rep,name=paddocks_to_sell,json=paddocksToSell,proto3" json:"paddocks_to_sell,omitempty"`
}

func (x *PaddockInformation_PaddockInstances) Reset() {
	*x = PaddockInformation_PaddockInstances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaddockInformation_PaddockInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaddockInformation_PaddockInstances) ProtoMessage() {}

func (x *PaddockInformation_PaddockInstances) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaddockInformation_PaddockInstances.ProtoReflect.Descriptor instead.
func (*PaddockInformation_PaddockInstances) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{104, 1}
}

func (x *PaddockInformation_PaddockInstances) GetPaddocksToSell() []*PaddockInformation_PaddockInstances_PaddockToSell {
	if x != nil {
		return x.PaddocksToSell
	}
	return nil
}

type PaddockInformation_PaddockContent_MountForPaddock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId   int32  `protobuf:"varint,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OwnerName string `protobuf:"bytes,3,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
}

func (x *PaddockInformation_PaddockContent_MountForPaddock) Reset() {
	*x = PaddockInformation_PaddockContent_MountForPaddock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaddockInformation_PaddockContent_MountForPaddock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaddockInformation_PaddockContent_MountForPaddock) ProtoMessage() {}

func (x *PaddockInformation_PaddockContent_MountForPaddock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaddockInformation_PaddockContent_MountForPaddock.ProtoReflect.Descriptor instead.
func (*PaddockInformation_PaddockContent_MountForPaddock) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{104, 0, 0}
}

func (x *PaddockInformation_PaddockContent_MountForPaddock) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *PaddockInformation_PaddockContent_MountForPaddock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaddockInformation_PaddockContent_MountForPaddock) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

type PaddockInformation_PaddockInstances_PaddockToSell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price            int64                                                                      `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Locked           bool                                                                       `protobuf:"varint,2,opt,name=locked,proto3" json:"locked,omitempty"`
	GuildInformation *PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation `protobuf:"bytes,3,opt,name=guild_information,json=guildInformation,proto3,oneof" json:"guild_information,omitempty"`
}

func (x *PaddockInformation_PaddockInstances_PaddockToSell) Reset() {
	*x = PaddockInformation_PaddockInstances_PaddockToSell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaddockInformation_PaddockInstances_PaddockToSell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaddockInformation_PaddockInstances_PaddockToSell) ProtoMessage() {}

func (x *PaddockInformation_PaddockInstances_PaddockToSell) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaddockInformation_PaddockInstances_PaddockToSell.ProtoReflect.Descriptor instead.
func (*PaddockInformation_PaddockInstances_PaddockToSell) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{104, 1, 0}
}

func (x *PaddockInformation_PaddockInstances_PaddockToSell) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PaddockInformation_PaddockInstances_PaddockToSell) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *PaddockInformation_PaddockInstances_PaddockToSell) GetGuildInformation() *PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation {
	if x != nil {
		return x.GuildInformation
	}
	return nil
}

type PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deserted         bool              `protobuf:"varint,1,opt,name=deserted,proto3" json:"deserted,omitempty"`
	GuildInformation *GuildInformation `protobuf:"bytes,2,opt,name=guild_information,json=guildInformation,proto3" json:"guild_information,omitempty"`
}

func (x *PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation) Reset() {
	*x = PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_common_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation) ProtoMessage() {}

func (x *PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_common_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation.ProtoReflect.Descriptor instead.
func (*PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation) Descriptor() ([]byte, []int) {
	return file_proto_game_common_proto_rawDescGZIP(), []int{104, 1, 0, 0}
}

func (x *PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation) GetDeserted() bool {
	if x != nil {
		return x.Deserted
	}
	return false
}

func (x *PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation) GetGuildInformation() *GuildInformation {
	if x != nil {
		return x.GuildInformation
	}
	return nil
}

var File_proto_game_common_proto protoreflect.FileDescriptor

var file_proto_game_common_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x22, 0xf1, 0x4d, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89,
	0x01, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0xb4, 0x4b, 0x0a, 0x10, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x6b, 0x12, 0x8f, 0x01,
	0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x8b, 0x01, 0x0a, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x1a, 0xee, 0x31,
	0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x93, 0x01, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0xa9, 0x01, 0x0a, 0x13, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x77, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x78, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11,
	0x74, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0xa9, 0x01, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x77, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x99, 0x01,
	0x0a, 0x09, 0x6e, 0x70, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x6e, 0x70, 0x63, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x61, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x73, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x69, 0x73, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x0c,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x68,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x48, 0x75, 0x6e, 0x74,
	0x4e, 0x70, 0x63, 0x49, 0x64, 0x1a, 0xee, 0x20, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x14, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x6f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x6f,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x13, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa5, 0x01, 0x0a, 0x11, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xab, 0x1d, 0x0a, 0x08, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x85, 0x01,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x7c, 0x0a,
	0x15, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x14, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0xc0, 0x01, 0x0a, 0x12,
	0x6d, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8b, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x6f, 0x69, 0x64, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x11, 0x6d, 0x75, 0x74, 0x61, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0xe8,
	0x16, 0x0a, 0x0b, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc0,
	0x01, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x9f, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x2e, 0x48,
	0x75, 0x6d, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x12, 0x6d, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xca, 0x01, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x94, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x2e, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb7, 0x01,
	0x0a, 0x0c, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x69, 0x64,
	0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x6f,
	0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb7, 0x01, 0x0a, 0x0c, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91,
	0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xc0, 0x01, 0x0a, 0x0f, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x94, 0x01, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48,
	0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc4, 0x01, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x95, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x2e, 0x48, 0x75, 0x6d,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc1, 0x01, 0x0a, 0x10,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x94, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x6f,
	0x69, 0x64, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a, 0x87, 0x03, 0x0a,
	0x19, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf0, 0x01, 0x0a, 0x1a, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0xb1, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x2e, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c,
	0x6f, 0x6f, 0x6b, 0x52, 0x18, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x73, 0x1a, 0x77, 0x0a,
	0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f,
	0x6f, 0x6b, 0x12, 0x4c, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xf3, 0x01, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x14, 0x61, 0x6c, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x6b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x52, 0x0a, 0x0b,
	0x45, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0x7c, 0x0a, 0x0b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0xdb,
	0x01, 0x0a, 0x0e, 0x4f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x0f, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0e, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x1a, 0xbe, 0x01, 0x0a,
	0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x69, 0x64, 0x1a, 0x70, 0x0a,
	0x0e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x53, 0x0a, 0x11, 0x4d, 0x75, 0x74,
	0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x75, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x3c, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xa0, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x78, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x73, 0x0a, 0x0e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0x86, 0x05, 0x0a, 0x11, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x73, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6f, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xb8, 0x01, 0x0a, 0x10, 0x77,
	0x61, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x87, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x57, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0f, 0x77, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0xb5, 0x01, 0x0a, 0x0f, 0x57, 0x61, 0x76, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x0c, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x61,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x09, 0x77, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xb0, 0x03, 0x0a, 0x14, 0x4e, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e,
	0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x70, 0x63,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x9f,
	0x01, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x81, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x1a, 0x58, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x54, 0x6f, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xb1,
	0x16, 0x0a, 0x17, 0x46, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x11, 0x73, 0x70,
	0x61, 0x77, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x61, 0x76, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x87, 0x01, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x12, 0xa6, 0x01, 0x0a, 0x0a, 0x61, 0x69, 0x5f, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x49,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x61, 0x69, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x12,
	0xb2, 0x01, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x1a, 0x90, 0x08, 0x0a, 0x17, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x64, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x12, 0xd9, 0x01, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xa1, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd0, 0x01, 0x0a,
	0x12, 0x6d, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9e, 0x01, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x75,
	0x74, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x93, 0x02, 0x0a, 0x19, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x77, 0x0a, 0x15, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x62, 0x72, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x16, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x75,
	0x74, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x42, 0x15, 0x0a, 0x13, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xda, 0x06, 0x0a, 0x14, 0x41, 0x49, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xd6, 0x01, 0x0a, 0x1b, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x93, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x49, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x19,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd7, 0x01, 0x0a, 0x19, 0x74, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x49, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x17, 0x74, 0x61, 0x78, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x97, 0x02, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x7c, 0x0a, 0x15, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5b, 0x0a,
	0x13, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x61, 0x69,
	0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x75, 0x0a, 0x18, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x01, 0x0a, 0x10, 0x53, 0x70, 0x61, 0x77,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x62, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91,
	0x05, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x06, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x48,
	0x01, 0x52, 0x06, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x89, 0x01, 0x0a,
	0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0xae, 0x02, 0x0a, 0x17, 0x41, 0x6c, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x72, 0x65,
	0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xd3, 0x05, 0x0a, 0x0c, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x5f, 0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x63, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x14,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x48, 0x00, 0x52, 0x13, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0xd7, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x54,
	0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x03, 0x0a, 0x0c, 0x42, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x68, 0x0a, 0x09, 0x62, 0x75, 0x79,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x08, 0x62, 0x75, 0x79, 0x4c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xdc, 0x01,
	0x0a, 0x10, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x55, 0x53, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x05, 0x22, 0xf7, 0x02, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x78, 0x70, 0x5f, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x78, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x12, 0x5c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x56,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x72, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x49, 0x64, 0x22, 0xd0, 0x23, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x93, 0x01, 0x0a, 0x1b, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x19, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x98,
	0x01, 0x0a, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf3, 0x20, 0x0a, 0x19, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x6b,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f,
	0x6b, 0x12, 0x53, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x85, 0x01, 0x0a, 0x0d, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xc2,
	0x09, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x72, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1b,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x18, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x61, 0x76, 0x61, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x01, 0x52, 0x0b, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x1a, 0xa2, 0x04,
	0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x55, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x6f, 0x6f,
	0x64, 0x5f, 0x73, 0x6d, 0x69, 0x6c, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6d, 0x6f, 0x6f, 0x64, 0x53, 0x6d, 0x69, 0x6c, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x42,
	0x61, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x1a, 0x4c, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x76, 0x61, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x1a, 0xe1, 0x13, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x12, 0x4c, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x6c,
	0x6f, 0x6f, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x6d,
	0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a,
	0x14, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x13, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0xa5, 0x01,
	0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb1, 0x0f, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0xbf, 0x01, 0x0a, 0x10, 0x65, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x45, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0f, 0x65, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xcc, 0x01, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8f, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xeb, 0x01, 0x0a, 0x23, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x99, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f,
	0x6b, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x8d, 0x03, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x70, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc2, 0x01, 0x0a,
	0x0b, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0xa0, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x6f, 0x6b, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x70, 0x69, 0x63, 0x44, 0x65, 0x61, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x63, 0x0a, 0x0e, 0x45, 0x70,
	0x69, 0x63, 0x44, 0x65, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x45, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x56,
	0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x41,
	0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a,
	0xc5, 0x04, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x66, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x1a, 0xe1, 0x01, 0x0a, 0x20, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0b,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42,
	0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbd, 0x04,
	0x0a, 0x1e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x49, 0x64, 0x12, 0xb8, 0x01, 0x0a, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x6a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1d,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x1a, 0x85, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x03,
	0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x4c, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x6b, 0x12, 0x70,
	0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x1a, 0xac, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x7c, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x4c, 0x69, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0xa2, 0x03, 0x0a, 0x17,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6b, 0x0a, 0x08, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x22, 0x34, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x8f, 0x02, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x35,
	0x0a, 0x17, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69,
	0x66, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x22, 0xa9, 0x02, 0x0a, 0x25, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x22, 0x8e, 0x03, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x46, 0x4b, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x06, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x8d, 0x03, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x8b, 0x01, 0x0a, 0x18, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x79,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x78, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x2b, 0x0a, 0x15, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x22, 0x96, 0x01, 0x0a, 0x19, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x59, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x76,
	0x61, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x1c, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x12, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xa2, 0x05, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x61,
	0x6d, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x61, 0x6d, 0x61, 0x73,
	0x12, 0x77, 0x0a, 0x15, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x48, 0x69, 0x74, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x64, 0x0a, 0x0f, 0x73, 0x70,
	0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0e, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x05, 0x0a, 0x14, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x55, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0xf5, 0x01, 0x0a,
	0x1c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x68, 0x6f,
	0x6e, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12,
	0x33, 0x0a, 0x16, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x04,
	0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x81, 0x01, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x61, 0x67, 0x65,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x8c, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f,
	0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x22, 0xe3, 0x01, 0x0a, 0x0a,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f,
	0x6e, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6f,
	0x6e, 0x65, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x22, 0xe1, 0x04, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x14, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x60,
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x6f,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f,
	0x6b, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b,
	0x22, 0xa2, 0x02, 0x0a, 0x18, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1e, 0x0a,
	0x1a, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x45, 0x54, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x4f,
	0x4f, 0x4b, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x25, 0x0a, 0x21, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x46, 0x54, 0x45, 0x44, 0x5f, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x4f, 0x4f, 0x4b, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04,
	0x12, 0x27, 0x0a, 0x23, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x4f, 0x4f,
	0x4b, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x42, 0x42,
	0x4c, 0x45, 0x53, 0x10, 0x07, 0x22, 0x97, 0x02, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x02, 0x52, 0x13, 0x63, 0x61, 0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x79, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0x77, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x16, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x68,
	0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22,
	0x24, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x58, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52,
	0x49, 0x53, 0x4d, 0x10, 0x01, 0x22, 0x81, 0x03, 0x0a, 0x0b, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x70, 0x0a, 0x11, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x55,
	0x0a, 0x09, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x09, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0e, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x68, 0x61, 0x73, 0x65, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x43, 0x0a, 0x0a, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x4f, 0x49, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x02,
	0x22, 0xb5, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69,
	0x73, 0x5f, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x73, 0x6b, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x22, 0xee, 0x05, 0x0a, 0x17, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x77, 0x61, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x62, 0x72, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x7f, 0x0a,
	0x13, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c,
	0x0a, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a,
	0x19, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79,
	0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x41, 0x0a, 0x1e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x47, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x1d,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x6b, 0x0a, 0x23, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54, 0x61, 0x78,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22,
	0x32, 0x0a, 0x1c, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x84, 0x03, 0x0a, 0x16, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a,
	0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa6, 0x04, 0x0a, 0x14, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x76, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x77, 0x61, 0x76, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x76, 0x0a, 0x11, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x12, 0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xee, 0x04, 0x0a, 0x18, 0x46, 0x69, 0x67, 0x68, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x18, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0xef, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x0a,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x73, 0x0a, 0x12, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x66, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x19, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x68, 0x61, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73,
	0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f,
	0x6d, 0x79, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x4d, 0x79, 0x54, 0x61, 0x78,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x92, 0x02, 0x0a, 0x1b, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x70, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x6c, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97,
	0x04, 0x0a, 0x1a, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x10, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x6a, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x0e, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x14, 0x74, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x12, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x89, 0x01, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x1a, 0x60, 0x0a, 0x18, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x67, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x72, 0x0a, 0x15, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x16, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x22,
	0x7e, 0x0a, 0x16, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xbf, 0x01, 0x0a, 0x27, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x22, 0xe9, 0x06, 0x0a, 0x14, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86,
	0x01, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x73, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x73, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x73, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x1f, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x53, 0x70, 0x65, 0x6c, 0x6c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x53, 0x70, 0x65, 0x6c, 0x6c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x6f, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x22, 0x7d, 0x0a, 0x16, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x69,
	0x73, 0x73, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x49, 0x53, 0x53, 0x49, 0x50, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x49, 0x53, 0x53, 0x49, 0x50, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f,
	0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x53, 0x49,
	0x50, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x53, 0x49, 0x50, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x8d, 0x03,
	0x0a, 0x19, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x6b, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a,
	0x6e, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42,
	0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4b, 0x0a,
	0x21, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x53,
	0x70, 0x65, 0x6c, 0x6c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6d, 0x6d,
	0x75, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x8a,
	0x06, 0x0a, 0x09, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x58, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x1a, 0x86, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x6f, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x43, 0x65, 0x6c, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x45, 0x4c, 0x4c, 0x53, 0x5f, 0x43,
	0x49, 0x52, 0x43, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x45, 0x4c, 0x4c, 0x53,
	0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x45, 0x4c, 0x4c,
	0x53, 0x5f, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x10, 0x02, 0x22, 0x3f, 0x0a, 0x08, 0x4d, 0x61,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x4c, 0x59, 0x50, 0x48, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x41, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57,
	0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x55, 0x4e, 0x45, 0x10, 0x04, 0x22, 0x69, 0x0a, 0x17, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x12, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x70, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x70, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6f, 0x6c, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6c,
	0x44, 0x6f, 0x77, 0x6e, 0x22, 0xdc, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6c,
	0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x6c,
	0x61, 0x76, 0x65, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77,
	0x6e, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xd3, 0x16, 0x0a, 0x14, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x77, 0x61, 0x76, 0x65, 0x12, 0x66, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x4c, 0x6f, 0x6f, 0x74, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x86,
	0x01, 0x0a, 0x12, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x1a, 0xeb, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x4c, 0x6f, 0x6f, 0x74, 0x12, 0x6d, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x4c, 0x6f, 0x6f, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x61, 0x6d, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x61, 0x6d, 0x61, 0x73, 0x1a, 0x59, 0x0a, 0x06, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x48, 0x69, 0x6e, 0x74, 0x1a, 0xda, 0x11, 0x0a, 0x10, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12,
	0x91, 0x01, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x6d, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0xa4, 0x01, 0x0a, 0x18, 0x74, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x15, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xfa,
	0x0b, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x9d, 0x01, 0x0a, 0x0a, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a, 0xb0, 0x0a, 0x0a, 0x19, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0xb8, 0x01, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x8c, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0xa3, 0x01, 0x0a, 0x08, 0x70, 0x76, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07,
	0x70, 0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xe7, 0x05, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x73, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12,
	0x34, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x68, 0x6f, 0x77,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x1d, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x72, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x1a, 0xb4, 0x01, 0x0a, 0x07, 0x50, 0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6e, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x6f,
	0x6e, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x11, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x27, 0x0a, 0x0f, 0x4d,
	0x75, 0x74, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x1a, 0x8d, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x74,
	0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xc3, 0x01, 0x0a, 0x19, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x54, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22,
	0xb4, 0x02, 0x0a, 0x14, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x6f, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65,
	0x64, 0x12, 0x73, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8c, 0x07, 0x0a, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x1a, 0x9a, 0x05, 0x0a, 0x16, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x06,
	0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x06, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d,
	0x12, 0xa6, 0x01, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x13, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0xe9, 0x02, 0x0a, 0x18, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x79, 0x12, 0x6b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x05, 0x0a, 0x1b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x6e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x66, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x46, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x66, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46,
	0x61, 0x63, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x88, 0x17, 0x0a, 0x11, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x62, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x76, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x62,
	0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x7c, 0x0a, 0x10, 0x70, 0x61, 0x64, 0x64, 0x6f,
	0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x62, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x86, 0x01, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x62, 0x6f, 0x6f, 0x6b,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x7d,
	0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f,
	0x67, 0x62, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x55, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x55, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x8d, 0x01,
	0x0a, 0x17, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x62, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x14, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x65, 0x77, 0x54, 0x61, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x73, 0x0a,
	0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x62, 0x6f, 0x6f, 0x6b,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x99, 0x01, 0x0a, 0x1b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67,
	0x62, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0xc5,
	0x03, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7b,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x62, 0x6f, 0x6f, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x0e, 0x43,
	0x68, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49,
	0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x10, 0x02, 0x1a, 0xd1, 0x03, 0x0a, 0x0f, 0x50, 0x61, 0x64, 0x64, 0x6f,
	0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x13, 0x70, 0x61, 0x64, 0x64,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x12, 0x70, 0x61, 0x64,
	0x64, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0xad, 0x01, 0x0a, 0x1d, 0x70, 0x61, 0x64,
	0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x6a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x62, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x70, 0x61,
	0x64, 0x64, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x1a, 0x50, 0x61, 0x64, 0x64,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x1a, 0xaf, 0x02, 0x0a, 0x12, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x9b, 0x01, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x62, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a,
	0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x39, 0x0a, 0x0f,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x16, 0x0a, 0x14, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a,
	0xc0, 0x02, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x8b, 0x01, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x62, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x68,
	0x0a, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x02, 0x1a, 0xb4, 0x02, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x68, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xc2, 0x04, 0x0a, 0x0d, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x61, 0x6c, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x49, 0x64, 0x12, 0x70, 0x0a,
	0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xe8, 0x0a, 0x0a, 0x05, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x0d, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x4f, 0x6e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x64, 0x0a, 0x0c, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x12, 0x61, 0x0a,
	0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x1a, 0xe0, 0x01, 0x0a, 0x0c, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x68, 0x0a, 0x11, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0b, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x1a, 0x9a, 0x01, 0x0a, 0x0a, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x6e, 0x4d,
	0x61, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x4f,
	0x6e, 0x4d, 0x61, 0x70, 0x12, 0x6a, 0x0a, 0x12, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xd7, 0x01, 0x0a, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x68, 0x0a, 0x11, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0b, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xa9, 0x02, 0x0a, 0x0a, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x68, 0x0a, 0x11, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x10, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x06, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x14, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x67, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x75, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x64, 0x0a, 0x0e, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x53, 0x70, 0x65, 0x6c, 0x6c,
	0x12, 0x67, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x73, 0x6d, 0x69,
	0x6c, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x53, 0x6d, 0x69, 0x6c, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x53, 0x6d, 0x69, 0x6c, 0x65, 0x79, 0x12, 0x64, 0x0a, 0x0e, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x12,
	0x80, 0x01, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x73,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74,
	0x69, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x67, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x6f,
	0x75, 0x74, 0x66, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x22, 0x4a, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x47, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x53,
	0x70, 0x65, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22,
	0x2d, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x53, 0x6d, 0x69, 0x6c, 0x65,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6d, 0x69, 0x6c, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6d, 0x69, 0x6c, 0x65, 0x79, 0x49, 0x64, 0x22, 0x2a,
	0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x16, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x47, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x66, 0x69,
	0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x66, 0x69, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x0e, 0x4d, 0x61, 0x70,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x59, 0x22, 0x81, 0x01,
	0x0a, 0x16, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x58, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x59, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x22, 0xef, 0x02, 0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x67, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x77, 0x0a, 0x0c, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x51, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x6b, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x22, 0xaf, 0x01, 0x0a, 0x25,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x9f, 0x03,
	0x0a, 0x16, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x18,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x5f,
	0x6e, 0x70, 0x63, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x49,
	0x6e, 0x4e, 0x70, 0x63, 0x53, 0x68, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x13, 0x69, 0x74, 0x65, 0x6d,
	0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x4e, 0x70, 0x63, 0x53, 0x68, 0x6f, 0x70, 0x1a,
	0x50, 0x0a, 0x13, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x4e,
	0x70, 0x63, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x8f, 0x03, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x69, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x69, 0x64, 0x57, 0x69, 0x74, 0x68, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x97, 0x01, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x54, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x22, 0x52, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x69, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x61, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x22,
	0xa2, 0x01, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x54,
	0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x22, 0xe6, 0x0b, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e,
	0x74, 0x12, 0x6d, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x69, 0x6e, 0x4d, 0x61,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x12, 0x66, 0x0a, 0x04, 0x64, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x6e, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x3d, 0x0a, 0x17, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d,
	0x69, 0x6e, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a, 0x53,
	0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x69,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x1a, 0x4d, 0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0xee, 0x04, 0x0a, 0x16, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x57, 0x0a, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x69, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x69, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6d, 0x70, 0x72, 0x65, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x78, 0x12, 0x52, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52,
	0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0xcc, 0x04,
	0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x69, 0x64, 0x12, 0x66, 0x0a, 0x09, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x6f,
	0x6f, 0x6b, 0x12, 0x6f, 0x0a, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x1a, 0xc2, 0x01, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x6f, 0x6b,
	0x12, 0x4c, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x6b, 0x12, 0x5a,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x54, 0x0a, 0x0b, 0x50, 0x61, 0x64, 0x64,
	0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x42, 0x0c,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe2, 0x01, 0x0a,
	0x0e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73,
	0x63, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x5a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x49, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x22, 0x90, 0x06, 0x0a,
	0x10, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x69, 0x73, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x67,
	0x67, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6e, 0x75, 0x67, 0x67, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x65, 0x78,
	0x74, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x79,
	0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x59, 0x0a, 0x07, 0x63, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x43, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x48, 0x02,
	0x52, 0x07, 0x63, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x63, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x11, 0x63, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x88, 0x01,
	0x01, 0x22, 0x54, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57,
	0x45, 0x41, 0x4b, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x55, 0x4c,
	0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f,
	0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x48, 0x49,
	0x42, 0x49, 0x54, 0x45, 0x44, 0x10, 0x04, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x6c, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x22,
	0xb2, 0x02, 0x0a, 0x19, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x65, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x54,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69,
	0x73, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x73, 0x6d, 0x22, 0x94, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x0f, 0x50,
	0x72, 0x69, 0x73, 0x6d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x52, 0x10, 0x02, 0x22, 0x9c, 0x02, 0x0a, 0x0c,
	0x50, 0x72, 0x69, 0x73, 0x6d, 0x43, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x12, 0x68, 0x0a, 0x0e,
	0x63, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x43, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6c,
	0x2e, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x43, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x73, 0x6d,
	0x43, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x4f, 0x5f, 0x43, 0x52, 0x49, 0x53, 0x54, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49,
	0x4e, 0x48, 0x49, 0x42, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xbe, 0x04, 0x0a, 0x1e, 0x41,
	0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x6e, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x72,
	0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x66,
	0x61, 0x63, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x61, 0x63, 0x75, 0x6c, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x0c,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe6, 0x03, 0x0a, 0x0f, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x66, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x66, 0x78, 0x48, 0x00,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x66, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x86, 0x01, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x3a, 0x0a, 0x0b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x66, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x67, 0x66, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x67, 0x66, 0x78, 0x49, 0x64, 0x1a, 0x4c, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x67, 0x66, 0x78, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd0, 0x08,
	0x0a, 0x17, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x5d, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x68, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a,
	0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x61, 0x70, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x12, 0x8f, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x18, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x61, 0x0a,
	0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x5e, 0x0a, 0x06, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73,
	0x22, 0xf3, 0x01, 0x0a, 0x1d, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x08, 0x61, 0x6c,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd4, 0x02, 0x0a, 0x24, 0x54, 0x61, 0x78, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x76, 0x0a, 0x10, 0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x77, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61,
	0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x48, 0x65, 0x6c, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1b, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a,
	0x1b, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6f,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6b, 0x61, 0x6d, 0x61, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x4b, 0x61, 0x6d, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbc, 0x01, 0x0a,
	0x25, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x4e, 0x0a, 0x18, 0x54,
	0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x12,
	0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x55, 0x69,
	0x64, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64,
	0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x73, 0x12, 0x6f, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x22, 0x94, 0x0a, 0x0a, 0x09, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x69, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x69, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77,
	0x69, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x69, 0x6c,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x65, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x65, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x65,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x65, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x6f, 0x76, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6c, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x65,
	0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f,
	0x66, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x65, 0x72,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x4d, 0x61,
	0x78, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x47, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x19, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x4e,
	0x65, 0x78, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xbe, 0x0a, 0x0a, 0x12, 0x50, 0x61,
	0x64, 0x64, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x5f,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x4f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x6b, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x64,
	0x64, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x64, 0x64,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xa7, 0x03, 0x0a, 0x0e, 0x50, 0x61,
	0x64, 0x64, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x0b, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65,
	0x64, 0x12, 0x8e, 0x01, 0x0a, 0x12, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x64, 0x64, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x52,
	0x11, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x5f, 0x0a, 0x0f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61,
	0x64, 0x64, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0xc5, 0x04, 0x0a, 0x10, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x70, 0x61, 0x64,
	0x64, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x54, 0x6f,
	0x53, 0x65, 0x6c, 0x6c, 0x52, 0x0e, 0x70, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x73, 0x54, 0x6f,
	0x53, 0x65, 0x6c, 0x6c, 0x1a, 0xa4, 0x03, 0x0a, 0x0d, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b,
	0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0xa9, 0x01, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x77, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x65, 0x6c,
	0x6c, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x1a, 0xa2, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x64, 0x64, 0x6f, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x64, 0x65, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x09, 0x53, 0x70,
	0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x66, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f,
	0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x70, 0x65, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x5e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x47, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4d, 0x4d, 0x55, 0x4e, 0x45, 0x10, 0x03, 0x2a, 0xd8, 0x01, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16,
	0x41, 0x4c, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x4c, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4c,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x4c,
	0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x4c, 0x4c, 0x59, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4c, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x45, 0x4d, 0x59,
	0x10, 0x06, 0x2a, 0x3a, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d,
	0x6f, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f,
	0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x01, 0x2a, 0x4a,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x58,
	0x50, 0x45, 0x52, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x0e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x03, 0x2a, 0x47, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x55,
	0x54, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4e, 0x47, 0x45, 0x4c, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x56, 0x49, 0x4c, 0x10, 0x04, 0x2a, 0x1e, 0x0a, 0x06, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x2a, 0xa9, 0x01, 0x0a, 0x09,
	0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x44, 0x41, 0x57, 0x41, 0x4e,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x06, 0x2a, 0xd5, 0x01, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x4e, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x56, 0x50, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x41, 0x56, 0x41, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x56, 0x41, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x56, 0x41, 0x5f,
	0x44, 0x49, 0x53, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1f,
	0x0a, 0x1b, 0x41, 0x56, 0x41, 0x5f, 0x50, 0x52, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x2a,
	0xc7, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4e, 0x4e, 0x4f,
	0x54, 0x5f, 0x42, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45,
	0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x4d, 0x55, 0x54,
	0x41, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f,
	0x52, 0x55, 0x4e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x53,
	0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x41, 0x4c, 0x4b, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41,
	0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x5a, 0x45, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x4e,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x41, 0x53, 0x5f, 0x4d, 0x55, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53,
	0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10,
	0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0f, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x5f, 0x54, 0x4f,
	0x5f, 0x4e, 0x50, 0x43, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x11, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x12, 0x2a, 0x97, 0x03, 0x0a, 0x0a, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x41, 0x4c,
	0x4f, 0x47, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x41,
	0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x55, 0x52, 0x43,
	0x48, 0x41, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x41,
	0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x41, 0x4c,
	0x4f, 0x47, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x1a, 0x0a,
	0x16, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x41,
	0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x50, 0x45, 0x4c, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x47, 0x45, 0x54,
	0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x45, 0x4c,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x41,
	0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x1e,
	0x0a, 0x1a, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49,
	0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47,
	0x5f, 0x48, 0x41, 0x56, 0x45, 0x4e, 0x42, 0x41, 0x47, 0x5f, 0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x0f, 0x2a, 0xd4, 0x04, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x50, 0x43, 0x5f, 0x53, 0x48, 0x4f, 0x50,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x50, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x52, 0x41, 0x46, 0x54, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x50, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x49, 0x44, 0x48, 0x4f, 0x55, 0x53, 0x45,
	0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x49, 0x44, 0x48, 0x4f,
	0x55, 0x53, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x43, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x43, 0x52, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10,
	0x0a, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x52, 0x41, 0x46, 0x54, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x4f,
	0x42, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x50, 0x43, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x45, 0x54, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15,
	0x4e, 0x50, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x54,
	0x55, 0x52, 0x4b, 0x45, 0x59, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x4c, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x11, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x45, 0x41, 0x4c, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x52, 0x4d,
	0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x55, 0x4e, 0x45, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x15,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x53, 0x48, 0x42, 0x49, 0x4e, 0x10, 0x16, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x53, 0x4d,
	0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x41, 0x56, 0x45, 0x4e, 0x42, 0x41, 0x47, 0x10, 0x18,
	0x12, 0x16, 0x0a, 0x12, 0x4e, 0x50, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x45,
	0x45, 0x4d, 0x59, 0x4f, 0x4f, 0x4c, 0x10, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x50, 0x43, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x48, 0x49, 0x4e, 0x45, 0x45, 0x54, 0x4c, 0x45, 0x10,
	0x1a, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x56, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x1b, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x50,
	0x43, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x1d, 0x2a, 0x81, 0x02, 0x0a, 0x09, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x76, 0x4d, 0x41,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x58, 0x76, 0x4d, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x76, 0x4d, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x76, 0x54, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x76,
	0x4d, 0x55, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x10, 0x07, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x4f, 0x48,
	0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x76, 0x50, 0x72, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x10, 0x0a, 0x2a, 0x99,
	0x01, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x53, 0x4d, 0x10, 0x05, 0x2a, 0x8a, 0x01, 0x0a, 0x0b, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53,
	0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x59, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x4f, 0x52,
	0x5f, 0x48, 0x45, 0x4c, 0x50, 0x10, 0x03, 0x2a, 0x6f, 0x0a, 0x0c, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x56, 0x49, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x41, 0x58, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x04, 0x2a, 0x42, 0x0a, 0x16, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x42, 0x0a, 0x04,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02,
	0x2a, 0x3f, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x42, 0x61, 0x72, 0x12,
	0x18, 0x0a, 0x14, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54,
	0x43, 0x55, 0x54, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50, 0x45,
	0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x42, 0x41, 0x52, 0x10,
	0x01, 0x2a, 0x32, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x46, 0x4f, 0x52, 0x47, 0x45, 0x54, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x50,
	0x45, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0xc5, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x41, 0x53, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x4f, 0x55, 0x54, 0x48, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x45,
	0x53, 0x54, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x52, 0x54, 0x48, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x52, 0x54,
	0x48, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x52, 0x54, 0x48, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x10, 0x07, 0x2a, 0xb7, 0x02,
	0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x5f, 0x54, 0x57, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x5f, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x06, 0x12, 0x1e, 0x0a,
	0x1a, 0x4c, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52,
	0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x07, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10,
	0x08, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x5f, 0x48, 0x45, 0x52, 0x45, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x49, 0x54,
	0x45, 0x52, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x59, 0x4d, 0x42,
	0x49, 0x4f, 0x54, 0x49, 0x43, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44,
	0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x0c, 0x2a, 0x36, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x2a,
	0x40, 0x0a, 0x15, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41,
	0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10,
	0x02, 0x2a, 0x61, 0x0a, 0x16, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x4f, 0x4c, 0x49, 0x5a, 0x45, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x45, 0x50, 0x49, 0x43, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x4d, 0x50,
	0x4f, 0x52, 0x49, 0x53, 0x10, 0x05, 0x2a, 0xb2, 0x03, 0x0a, 0x1a, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4f, 0x43,
	0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x53,
	0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e,
	0x4d, 0x45, 0x54, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x4d, 0x42, 0x4c,
	0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x08,
	0x12, 0x29, 0x0a, 0x25, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0a, 0x2a, 0x72, 0x0a, 0x11, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54,
	0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a,
	0xa8, 0x01, 0x0a, 0x1a, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4b, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x11, 0x54, 0x61,
	0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57,
	0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x8b, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x52,
	0x45, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x4d, 0x49,
	0x4e, 0x41, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x49, 0x52, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x45, 0x52, 0x54,
	0x49, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x47, 0x4e, 0x41, 0x4e,
	0x54, 0x10, 0x08, 0x2a, 0x68, 0x0a, 0x17, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x03, 0x2a, 0xe6, 0x02,
	0x0a, 0x11, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x42, 0x4f,
	0x4e, 0x55, 0x53, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x5f, 0x43, 0x4f, 0x53, 0x54,
	0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x07, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x4f, 0x53, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x41, 0x53,
	0x54, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x41, 0x58, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x49, 0x45, 0x44, 0x5f,
	0x43, 0x45, 0x4c, 0x4c, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x43,
	0x45, 0x4c, 0x4c, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x52,
	0x54, 0x41, 0x4c, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x11, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x2a, 0x2f, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x6c, 0x45, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x44, 0x53, 0x43, 0x10, 0x01, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x6f, 0x2d, 0x78, 0x70,
	0x2d, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_game_common_proto_rawDescOnce sync.Once
	file_proto_game_common_proto_rawDescData = file_proto_game_common_proto_rawDesc
)

func file_proto_game_common_proto_rawDescGZIP() []byte {
	file_proto_game_common_proto_rawDescOnce.Do(func() {
		file_proto_game_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_game_common_proto_rawDescData)
	})
	return file_proto_game_common_proto_rawDescData
}

var file_proto_game_common_proto_enumTypes = make([]protoimpl.EnumInfo, 51)
var file_proto_game_common_proto_msgTypes = make([]protoimpl.MessageInfo, 193)
var file_proto_game_common_proto_goTypes = []any{
	(DelayedActionType)(0),             // 0: com.ankama.dofus.server.game.protocol.common.DelayedActionType
	(AllianceRelation)(0),              // 1: com.ankama.dofus.server.game.protocol.common.AllianceRelation
	(ChallengeMod)(0),                  // 2: com.ankama.dofus.server.game.protocol.common.ChallengeMod
	(ChallengeBonus)(0),                // 3: com.ankama.dofus.server.game.protocol.common.ChallengeBonus
	(CharacterState)(0),                // 4: com.ankama.dofus.server.game.protocol.common.CharacterState
	(Alignment)(0),                     // 5: com.ankama.dofus.server.game.protocol.common.Alignment
	(Gender)(0),                        // 6: com.ankama.dofus.server.game.protocol.common.Gender
	(Hierarchy)(0),                     // 7: com.ankama.dofus.server.game.protocol.common.Hierarchy
	(AttackableStatus)(0),              // 8: com.ankama.dofus.server.game.protocol.common.AttackableStatus
	(Restriction)(0),                   // 9: com.ankama.dofus.server.game.protocol.common.Restriction
	(DialogType)(0),                    // 10: com.ankama.dofus.server.game.protocol.common.DialogType
	(ExchangeType)(0),                  // 11: com.ankama.dofus.server.game.protocol.common.ExchangeType
	(FightType)(0),                     // 12: com.ankama.dofus.server.game.protocol.common.FightType
	(TeamType)(0),                      // 13: com.ankama.dofus.server.game.protocol.common.TeamType
	(FightOption)(0),                   // 14: com.ankama.dofus.server.game.protocol.common.FightOption
	(FightOutcome)(0),                  // 15: com.ankama.dofus.server.game.protocol.common.FightOutcome
	(FightInvisibilityState)(0),        // 16: com.ankama.dofus.server.game.protocol.common.FightInvisibilityState
	(Team)(0),                          // 17: com.ankama.dofus.server.game.protocol.common.Team
	(ShortcutBar)(0),                   // 18: com.ankama.dofus.server.game.protocol.common.ShortcutBar
	(PresetType)(0),                    // 19: com.ankama.dofus.server.game.protocol.common.PresetType
	(Direction)(0),                     // 20: com.ankama.dofus.server.game.protocol.common.Direction
	(ObjectError)(0),                   // 21: com.ankama.dofus.server.game.protocol.common.ObjectError
	(ObjectOrigin)(0),                  // 22: com.ankama.dofus.server.game.protocol.common.ObjectOrigin
	(SocialRecruitmentType)(0),         // 23: com.ankama.dofus.server.game.protocol.common.SocialRecruitmentType
	(SocialApplicationState)(0),        // 24: com.ankama.dofus.server.game.protocol.common.SocialApplicationState
	(ServerType)(0),                    // 25: com.ankama.dofus.server.game.protocol.common.ServerType
	(SocialGroupOperationResult)(0),    // 26: com.ankama.dofus.server.game.protocol.common.SocialGroupOperationResult
	(SocialNoticeError)(0),             // 27: com.ankama.dofus.server.game.protocol.common.SocialNoticeError
	(SocialGroupInvitationState)(0),    // 28: com.ankama.dofus.server.game.protocol.common.SocialGroupInvitationState
	(TaxCollectorState)(0),             // 29: com.ankama.dofus.server.game.protocol.common.TaxCollectorState
	(MountCharacteristic)(0),           // 30: com.ankama.dofus.server.game.protocol.common.MountCharacteristic
	(SpellModifierActionType)(0),       // 31: com.ankama.dofus.server.game.protocol.common.SpellModifierActionType
	(SpellModifierType)(0),             // 32: com.ankama.dofus.server.game.protocol.common.SpellModifierType
	(RealEstateOrder)(0),               // 33: com.ankama.dofus.server.game.protocol.common.RealEstateOrder
	(BreachReward_BreachRewardLock)(0), // 34: com.ankama.dofus.server.game.protocol.common.BreachReward.BreachRewardLock
	(Challenge_ChallengeState)(0),      // 35: com.ankama.dofus.server.game.protocol.common.Challenge.ChallengeState
	(Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation_EpicDeathState)(0), // 36: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.CharacterEpicInformation.EpicDeathState
	(CharacterStatus_Status)(0),                                       // 37: com.ankama.dofus.server.game.protocol.common.CharacterStatus.Status
	(SubEntityInformation_BindingPointCategoryEnum)(0),                // 38: com.ankama.dofus.server.game.protocol.common.SubEntityInformation.BindingPointCategoryEnum
	(SocialFightInformation_Type)(0),                                  // 39: com.ankama.dofus.server.game.protocol.common.SocialFightInformation.Type
	(FightPhaseInfo_FightPhase)(0),                                    // 40: com.ankama.dofus.server.game.protocol.common.FightPhaseInfo.FightPhase
	(FightRemovableEffect_EffectDissipationState)(0),                  // 41: com.ankama.dofus.server.game.protocol.common.FightRemovableEffect.EffectDissipationState
	(FightMark_MarkType)(0),                                           // 42: com.ankama.dofus.server.game.protocol.common.FightMark.MarkType
	(FightMark_MarkedCell_MarkCellsType)(0),                           // 43: com.ankama.dofus.server.game.protocol.common.FightMark.MarkedCell.MarkCellsType
	(GuildLogbookEntry_ChestActivity_ChestEventType)(0),               // 44: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.ChestActivity.ChestEventType
	(GuildLogbookEntry_PaddockActivity_PaddockCommercialEventType)(0), // 45: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PaddockActivity.PaddockCommercialEventType
	(GuildLogbookEntry_PlayerFlowActivity_PlayerFlowEventType)(0),     // 46: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PlayerFlowActivity.PlayerFlowEventType
	(GuildLogbookEntry_RankActivity_RankActivityType)(0),              // 47: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.RankActivity.RankActivityType
	(PrismInformation_PrismState)(0),                                  // 48: com.ankama.dofus.server.game.protocol.common.PrismInformation.PrismState
	(PrismModule_PrismModuleType)(0),                                  // 49: com.ankama.dofus.server.game.protocol.common.PrismModule.PrismModuleType
	(PrismCristal_PrismCristalType)(0),                                // 50: com.ankama.dofus.server.game.protocol.common.PrismCristal.PrismCristalType
	(*AccountTag)(nil),                                                // 51: com.ankama.dofus.server.game.protocol.common.AccountTag
	(*ActorPositionInformation)(nil),                                  // 52: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation
	(*SpawnInformation)(nil),                                          // 53: com.ankama.dofus.server.game.protocol.common.SpawnInformation
	(*AllianceInformation)(nil),                                       // 54: com.ankama.dofus.server.game.protocol.common.AllianceInformation
	(*BreachBranch)(nil),                                              // 55: com.ankama.dofus.server.game.protocol.common.BreachBranch
	(*BreachReward)(nil),                                              // 56: com.ankama.dofus.server.game.protocol.common.BreachReward
	(*Challenge)(nil),                                                 // 57: com.ankama.dofus.server.game.protocol.common.Challenge
	(*ChallengeTarget)(nil),                                           // 58: com.ankama.dofus.server.game.protocol.common.ChallengeTarget
	(*Character)(nil),                                                 // 59: com.ankama.dofus.server.game.protocol.common.Character
	(*CharacterRemodelingInformation)(nil),                            // 60: com.ankama.dofus.server.game.protocol.common.CharacterRemodelingInformation
	(*PartyEntity)(nil),                                               // 61: com.ankama.dofus.server.game.protocol.common.PartyEntity
	(*PartyUpdateCommonsInformation)(nil),                             // 62: com.ankama.dofus.server.game.protocol.common.PartyUpdateCommonsInformation
	(*CharacterCharacteristic)(nil),                                   // 63: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristic
	(*CharacterCharacteristicValue)(nil),                              // 64: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristicValue
	(*CharacterCharacteristicDetailed)(nil),                           // 65: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristicDetailed
	(*CharacterCharacteristicDetailedUsable)(nil),                     // 66: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristicDetailedUsable
	(*CharacterInformation)(nil),                                      // 67: com.ankama.dofus.server.game.protocol.common.CharacterInformation
	(*CharacterStatus)(nil),                                           // 68: com.ankama.dofus.server.game.protocol.common.CharacterStatus
	(*PlayerSearch)(nil),                                              // 69: com.ankama.dofus.server.game.protocol.common.PlayerSearch
	(*AllianceMemberInformation)(nil),                                 // 70: com.ankama.dofus.server.game.protocol.common.AllianceMemberInformation
	(*SocialApplicationInformation)(nil),                              // 71: com.ankama.dofus.server.game.protocol.common.SocialApplicationInformation
	(*CharacterCharacteristics)(nil),                                  // 72: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristics
	(*AlignmentInformation)(nil),                                      // 73: com.ankama.dofus.server.game.protocol.common.AlignmentInformation
	(*InteractiveElement)(nil),                                        // 74: com.ankama.dofus.server.game.protocol.common.InteractiveElement
	(*StatedElement)(nil),                                             // 75: com.ankama.dofus.server.game.protocol.common.StatedElement
	(*EntityLook)(nil),                                                // 76: com.ankama.dofus.server.game.protocol.common.EntityLook
	(*SubEntityInformation)(nil),                                      // 77: com.ankama.dofus.server.game.protocol.common.SubEntityInformation
	(*EntityDisposition)(nil),                                         // 78: com.ankama.dofus.server.game.protocol.common.EntityDisposition
	(*NamedPartyTeam)(nil),                                            // 79: com.ankama.dofus.server.game.protocol.common.NamedPartyTeam
	(*SocialFightInformation)(nil),                                    // 80: com.ankama.dofus.server.game.protocol.common.SocialFightInformation
	(*SocialFight)(nil),                                               // 81: com.ankama.dofus.server.game.protocol.common.SocialFight
	(*FightPhaseInfo)(nil),                                            // 82: com.ankama.dofus.server.game.protocol.common.FightPhaseInfo
	(*FightOptionsInformation)(nil),                                   // 83: com.ankama.dofus.server.game.protocol.common.FightOptionsInformation
	(*FighterLightInformation)(nil),                                   // 84: com.ankama.dofus.server.game.protocol.common.FighterLightInformation
	(*FighterMonsterLightInformation)(nil),                            // 85: com.ankama.dofus.server.game.protocol.common.FighterMonsterLightInformation
	(*FighterEntityLightInformation)(nil),                             // 86: com.ankama.dofus.server.game.protocol.common.FighterEntityLightInformation
	(*FighterTaxCollectorLightInformation)(nil),                       // 87: com.ankama.dofus.server.game.protocol.common.FighterTaxCollectorLightInformation
	(*FighterNamedLightInformation)(nil),                              // 88: com.ankama.dofus.server.game.protocol.common.FighterNamedLightInformation
	(*FightCommonInformation)(nil),                                    // 89: com.ankama.dofus.server.game.protocol.common.FightCommonInformation
	(*FightTeamInformation)(nil),                                      // 90: com.ankama.dofus.server.game.protocol.common.FightTeamInformation
	(*FightExternalInformation)(nil),                                  // 91: com.ankama.dofus.server.game.protocol.common.FightExternalInformation
	(*FightTeamLightInformation)(nil),                                 // 92: com.ankama.dofus.server.game.protocol.common.FightTeamLightInformation
	(*FightTeamMembersInformation)(nil),                               // 93: com.ankama.dofus.server.game.protocol.common.FightTeamMembersInformation
	(*FightTeamMemberInformation)(nil),                                // 94: com.ankama.dofus.server.game.protocol.common.FightTeamMemberInformation
	(*FightTeamMemberCharacter)(nil),                                  // 95: com.ankama.dofus.server.game.protocol.common.FightTeamMemberCharacter
	(*FightTeamMemberEntity)(nil),                                     // 96: com.ankama.dofus.server.game.protocol.common.FightTeamMemberEntity
	(*FightTeamMemberMonster)(nil),                                    // 97: com.ankama.dofus.server.game.protocol.common.FightTeamMemberMonster
	(*FightTeamMemberTaxCollector)(nil),                               // 98: com.ankama.dofus.server.game.protocol.common.FightTeamMemberTaxCollector
	(*FightStartingPositions)(nil),                                    // 99: com.ankama.dofus.server.game.protocol.common.FightStartingPositions
	(*FightRemovableEffectExtendedInformation)(nil),                   // 100: com.ankama.dofus.server.game.protocol.common.FightRemovableEffectExtendedInformation
	(*FightRemovableEffect)(nil),                                      // 101: com.ankama.dofus.server.game.protocol.common.FightRemovableEffect
	(*FightTemporaryBoostEffect)(nil),                                 // 102: com.ankama.dofus.server.game.protocol.common.FightTemporaryBoostEffect
	(*FightTemporarySpellImmunityEffect)(nil),                         // 103: com.ankama.dofus.server.game.protocol.common.FightTemporarySpellImmunityEffect
	(*FightTriggeredEffect)(nil),                                      // 104: com.ankama.dofus.server.game.protocol.common.FightTriggeredEffect
	(*FightMark)(nil),                                                 // 105: com.ankama.dofus.server.game.protocol.common.FightMark
	(*FightEffectTriggerCount)(nil),                                   // 106: com.ankama.dofus.server.game.protocol.common.FightEffectTriggerCount
	(*FightSpellCoolDown)(nil),                                        // 107: com.ankama.dofus.server.game.protocol.common.FightSpellCoolDown
	(*FightResumeSlaves)(nil),                                         // 108: com.ankama.dofus.server.game.protocol.common.FightResumeSlaves
	(*FightResultListEntry)(nil),                                      // 109: com.ankama.dofus.server.game.protocol.common.FightResultListEntry
	(*NamedPartyTeamWithOutcome)(nil),                                 // 110: com.ankama.dofus.server.game.protocol.common.NamedPartyTeamWithOutcome
	(*FightCharacteristics)(nil),                                      // 111: com.ankama.dofus.server.game.protocol.common.FightCharacteristics
	(*GuildInformation)(nil),                                          // 112: com.ankama.dofus.server.game.protocol.common.GuildInformation
	(*GuildRecruitmentInformation)(nil),                               // 113: com.ankama.dofus.server.game.protocol.common.GuildRecruitmentInformation
	(*GuildLogbookEntry)(nil),                                         // 114: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry
	(*HouseInstance)(nil),                                             // 115: com.ankama.dofus.server.game.protocol.common.HouseInstance
	(*House)(nil),                                                     // 116: com.ankama.dofus.server.game.protocol.common.House
	(*Shortcut)(nil),                                                  // 117: com.ankama.dofus.server.game.protocol.common.Shortcut
	(*ShortcutObjectItem)(nil),                                        // 118: com.ankama.dofus.server.game.protocol.common.ShortcutObjectItem
	(*ShortcutSpell)(nil),                                             // 119: com.ankama.dofus.server.game.protocol.common.ShortcutSpell
	(*ShortcutSmiley)(nil),                                            // 120: com.ankama.dofus.server.game.protocol.common.ShortcutSmiley
	(*ShortcutEmote)(nil),                                             // 121: com.ankama.dofus.server.game.protocol.common.ShortcutEmote
	(*ShortcutCosmeticObject)(nil),                                    // 122: com.ankama.dofus.server.game.protocol.common.ShortcutCosmeticObject
	(*ShortcutOutfit)(nil),                                            // 123: com.ankama.dofus.server.game.protocol.common.ShortcutOutfit
	(*ShortcutPreset)(nil),                                            // 124: com.ankama.dofus.server.game.protocol.common.ShortcutPreset
	(*MapCoordinates)(nil),                                            // 125: com.ankama.dofus.server.game.protocol.common.MapCoordinates
	(*MapExtendedCoordinates)(nil),                                    // 126: com.ankama.dofus.server.game.protocol.common.MapExtendedCoordinates
	(*MonsterGroupStaticInformation)(nil),                             // 127: com.ankama.dofus.server.game.protocol.common.MonsterGroupStaticInformation
	(*MonsterInGroupInformation)(nil),                                 // 128: com.ankama.dofus.server.game.protocol.common.MonsterInGroupInformation
	(*MonstersInGroupAlternativeInformation)(nil),                     // 129: com.ankama.dofus.server.game.protocol.common.MonstersInGroupAlternativeInformation
	(*ItemMinimalInformation)(nil),                                    // 130: com.ankama.dofus.server.game.protocol.common.ItemMinimalInformation
	(*ObjectGidWithQuantity)(nil),                                     // 131: com.ankama.dofus.server.game.protocol.common.ObjectGidWithQuantity
	(*ObjectUidWithQuantity)(nil),                                     // 132: com.ankama.dofus.server.game.protocol.common.ObjectUidWithQuantity
	(*ObjectItemInventory)(nil),                                       // 133: com.ankama.dofus.server.game.protocol.common.ObjectItemInventory
	(*ObjectItem)(nil),                                                // 134: com.ankama.dofus.server.game.protocol.common.ObjectItem
	(*ObjectEffect)(nil),                                              // 135: com.ankama.dofus.server.game.protocol.common.ObjectEffect
	(*ObjectInRolePlay)(nil),                                          // 136: com.ankama.dofus.server.game.protocol.common.ObjectInRolePlay
	(*GameActionItem)(nil),                                            // 137: com.ankama.dofus.server.game.protocol.common.GameActionItem
	(*PortalInformation)(nil),                                         // 138: com.ankama.dofus.server.game.protocol.common.PortalInformation
	(*PrismInformation)(nil),                                          // 139: com.ankama.dofus.server.game.protocol.common.PrismInformation
	(*PrismLocalizedInformation)(nil),                                 // 140: com.ankama.dofus.server.game.protocol.common.PrismLocalizedInformation
	(*PrismModule)(nil),                                               // 141: com.ankama.dofus.server.game.protocol.common.PrismModule
	(*PrismCristal)(nil),                                              // 142: com.ankama.dofus.server.game.protocol.common.PrismCristal
	(*AllianceRecruitmentInformation)(nil),                            // 143: com.ankama.dofus.server.game.protocol.common.AllianceRecruitmentInformation
	(*SocialEmblem)(nil),                                              // 144: com.ankama.dofus.server.game.protocol.common.SocialEmblem
	(*SocialNoticeInformation)(nil),                                   // 145: com.ankama.dofus.server.game.protocol.common.SocialNoticeInformation
	(*RankInformation)(nil),                                           // 146: com.ankama.dofus.server.game.protocol.common.RankInformation
	(*TaxCollectorInformation)(nil),                                   // 147: com.ankama.dofus.server.game.protocol.common.TaxCollectorInformation
	(*TaxCollectorStaticInformation)(nil),                             // 148: com.ankama.dofus.server.game.protocol.common.TaxCollectorStaticInformation
	(*TaxCollectorComplementaryInformation)(nil),                      // 149: com.ankama.dofus.server.game.protocol.common.TaxCollectorComplementaryInformation
	(*TaxCollectorLootInformation)(nil),                               // 150: com.ankama.dofus.server.game.protocol.common.TaxCollectorLootInformation
	(*TaxCollectorWaitingForHelpInformation)(nil),                     // 151: com.ankama.dofus.server.game.protocol.common.TaxCollectorWaitingForHelpInformation
	(*TaxCollectorOrderedSpell)(nil),                                  // 152: com.ankama.dofus.server.game.protocol.common.TaxCollectorOrderedSpell
	(*TaxCollectorPreset)(nil),                                        // 153: com.ankama.dofus.server.game.protocol.common.TaxCollectorPreset
	(*MountData)(nil),                                                 // 154: com.ankama.dofus.server.game.protocol.common.MountData
	(*PaddockInformation)(nil),                                        // 155: com.ankama.dofus.server.game.protocol.common.PaddockInformation
	(*SpellItem)(nil),                                                 // 156: com.ankama.dofus.server.game.protocol.common.SpellItem
	(*SpellModifier)(nil),                                             // 157: com.ankama.dofus.server.game.protocol.common.SpellModifier
	(*ActorPositionInformation_ActorInformation)(nil),                 // 158: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation
	(*ActorPositionInformation_ActorInformation_RolePlayActor)(nil),   // 159: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor
	(*ActorPositionInformation_ActorInformation_FightFighterInformation)(nil),                                                                   // 160: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor)(nil),                                                                  // 161: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor
	(*ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor)(nil),                                                           // 162: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.TaxCollectorActor
	(*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor)(nil),                                                           // 163: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.MonsterGroupActor
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation)(nil),                                                        // 164: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NpcStaticInformation
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid)(nil),                                                         // 165: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount)(nil),                                                            // 166: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Mount
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption)(nil),                                             // 167: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation)(nil),                                       // 168: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.MutantInformation
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption)(nil),                   // 169: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.FollowingCharactersOption
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption)(nil),                              // 170: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.AllianceOption
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption)(nil),                                 // 171: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.EmoteOption
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption)(nil),                                 // 172: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.TitleOption
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption)(nil),                              // 173: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.OrnamentOption
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption)(nil),                             // 174: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.ObjectUseOption
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption)(nil),                              // 175: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.SkillUseOption
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook)(nil), // 176: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.FollowingCharactersOption.IndexedEntityLook
	(*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation)(nil),                                           // 177: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.MonsterGroupActor.WaveInformation
	(*ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests)(nil),                                                 // 178: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NpcStaticInformation.Quests
	(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation)(nil),                                           // 179: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.NamedFighterInformation
	(*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation)(nil),                                              // 180: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.AIFighterInformation
	(*ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation)(nil),                                          // 181: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.EntityFighterInformation
	(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation)(nil),                 // 182: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.NamedFighterInformation.FightCharacterInformation
	(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation)(nil),                    // 183: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.NamedFighterInformation.FightMutantInformation
	(*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter)(nil),                               // 184: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.AIFighterInformation.MonsterFighter
	(*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter)(nil),                          // 185: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.AIFighterInformation.TaxCollectorFighter
	(*AllianceInformation_AllianceCardInformation)(nil),                                                                                         // 186: com.ankama.dofus.server.game.protocol.common.AllianceInformation.AllianceCardInformation
	(*BreachBranch_ExtendedBreachBranch)(nil),                                                                                                   // 187: com.ankama.dofus.server.game.protocol.common.BreachBranch.ExtendedBreachBranch
	(*Character_CharacterBasicInformation)(nil),                                                                                                 // 188: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation
	(*Character_CharacterBasicInformation_SocialMember)(nil),                                                                                    // 189: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember
	(*Character_CharacterBasicInformation_CharacterLook)(nil),                                                                                   // 190: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook
	(*Character_CharacterBasicInformation_SocialMember_GuildMember)(nil),                                                                        // 191: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember.GuildMember
	(*Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote)(nil),                                                             // 192: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember.GuildMember.PlayerNote
	(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation)(nil),                                                          // 193: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation
	(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation)(nil),                                 // 194: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.CharacterEpicInformation
	(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation)(nil),                                   // 195: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.PartyMemberInformation
	(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation)(nil),                         // 196: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.PartyInvitationMemberInformation
	(*CharacterRemodelingInformation_CharacterToRemodelInformation)(nil),                                                                        // 197: com.ankama.dofus.server.game.protocol.common.CharacterRemodelingInformation.CharacterToRemodelInformation
	(*PartyEntity_EntityMember)(nil),                                                                       // 198: com.ankama.dofus.server.game.protocol.common.PartyEntity.EntityMember
	(*PlayerSearch_SearchByCharacterName)(nil),                                                             // 199: com.ankama.dofus.server.game.protocol.common.PlayerSearch.SearchByCharacterName
	(*PlayerSearch_SearchByAccount)(nil),                                                                   // 200: com.ankama.dofus.server.game.protocol.common.PlayerSearch.SearchByAccount
	(*AlignmentInformation_AlignmentExtendedInformation)(nil),                                              // 201: com.ankama.dofus.server.game.protocol.common.AlignmentInformation.AlignmentExtendedInformation
	(*InteractiveElement_InteractiveElementSkill)(nil),                                                     // 202: com.ankama.dofus.server.game.protocol.common.InteractiveElement.InteractiveElementSkill
	(*FightExternalInformation_FightTeamsWithOptions)(nil),                                                 // 203: com.ankama.dofus.server.game.protocol.common.FightExternalInformation.FightTeamsWithOptions
	(*FightTeamMemberCharacter_BasicAllianceInformation)(nil),                                              // 204: com.ankama.dofus.server.game.protocol.common.FightTeamMemberCharacter.BasicAllianceInformation
	(*FightTemporaryBoostEffect_Details)(nil),                                                              // 205: com.ankama.dofus.server.game.protocol.common.FightTemporaryBoostEffect.Details
	(*FightMark_MarkedCell)(nil),                                                                           // 206: com.ankama.dofus.server.game.protocol.common.FightMark.MarkedCell
	(*FightResultListEntry_FightLoot)(nil),                                                                 // 207: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FightLoot
	(*FightResultListEntry_FighterListEntry)(nil),                                                          // 208: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry
	(*FightResultListEntry_FightLoot_Object)(nil),                                                          // 209: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FightLoot.Object
	(*FightResultListEntry_FighterListEntry_PlayerListEntry)(nil),                                          // 210: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.PlayerListEntry
	(*FightResultListEntry_FighterListEntry_MutantListEntry)(nil),                                          // 211: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.MutantListEntry
	(*FightResultListEntry_FighterListEntry_TaxCollectorListEntry)(nil),                                    // 212: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.TaxCollectorListEntry
	(*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData)(nil),                // 213: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.PlayerListEntry.FightResultAdditionalData
	(*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData)(nil), // 214: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.PlayerListEntry.FightResultAdditionalData.ExperienceData
	(*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData)(nil),        // 215: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.PlayerListEntry.FightResultAdditionalData.PvpData
	(*GuildInformation_GuildSocialInformation)(nil),                                                        // 216: com.ankama.dofus.server.game.protocol.common.GuildInformation.GuildSocialInformation
	(*GuildInformation_GuildSocialInformation_GuildDetailedInformation)(nil),                               // 217: com.ankama.dofus.server.game.protocol.common.GuildInformation.GuildSocialInformation.GuildDetailedInformation
	(*GuildLogbookEntry_ChestActivity)(nil),                                                                // 218: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.ChestActivity
	(*GuildLogbookEntry_PaddockActivity)(nil),                                                              // 219: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PaddockActivity
	(*GuildLogbookEntry_PlayerFlowActivity)(nil),                                                           // 220: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PlayerFlowActivity
	(*GuildLogbookEntry_LevelUpActivity)(nil),                                                              // 221: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.LevelUpActivity
	(*GuildLogbookEntry_UnlockNewTabActivity)(nil),                                                         // 222: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.UnlockNewTabActivity
	(*GuildLogbookEntry_RankActivity)(nil),                                                                 // 223: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.RankActivity
	(*GuildLogbookEntry_PlayerRankUpdateActivity)(nil),                                                     // 224: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PlayerRankUpdateActivity
	(*House_HouseAccount)(nil),                                                                             // 225: com.ankama.dofus.server.game.protocol.common.House.HouseAccount
	(*House_HouseOnMap)(nil),                                                                               // 226: com.ankama.dofus.server.game.protocol.common.House.HouseOnMap
	(*House_HouseInside)(nil),                                                                              // 227: com.ankama.dofus.server.game.protocol.common.House.HouseInside
	(*House_HouseGuild)(nil),                                                                               // 228: com.ankama.dofus.server.game.protocol.common.House.HouseGuild
	(*ItemMinimalInformation_ItemToSellInNpcShop)(nil),                                                     // 229: com.ankama.dofus.server.game.protocol.common.ItemMinimalInformation.ItemToSellInNpcShop
	(*ObjectGidWithQuantity_ObjectPriceDateEffect)(nil),                                                    // 230: com.ankama.dofus.server.game.protocol.common.ObjectGidWithQuantity.ObjectPriceDateEffect
	(*ObjectEffect_ObjectEffectMinMaxValue)(nil),                                                           // 231: com.ankama.dofus.server.game.protocol.common.ObjectEffect.ObjectEffectMinMaxValue
	(*ObjectEffect_ObjectEffectDiceValue)(nil),                                                             // 232: com.ankama.dofus.server.game.protocol.common.ObjectEffect.ObjectEffectDiceValue
	(*ObjectEffect_MonsterCount)(nil),                                                                      // 233: com.ankama.dofus.server.game.protocol.common.ObjectEffect.MonsterCount
	(*ObjectEffect_ObjectEffectMountValue)(nil),                                                            // 234: com.ankama.dofus.server.game.protocol.common.ObjectEffect.ObjectEffectMountValue
	(*ObjectInRolePlay_WithLook)(nil),                                                                      // 235: com.ankama.dofus.server.game.protocol.common.ObjectInRolePlay.WithLook
	(*ObjectInRolePlay_PaddockItem)(nil),                                                                   // 236: com.ankama.dofus.server.game.protocol.common.ObjectInRolePlay.PaddockItem
	(*RankInformation_OrderAndGfx)(nil),                                                                    // 237: com.ankama.dofus.server.game.protocol.common.RankInformation.OrderAndGfx
	(*RankInformation_PrivateInformation)(nil),                                                             // 238: com.ankama.dofus.server.game.protocol.common.RankInformation.PrivateInformation
	(*PaddockInformation_PaddockContent)(nil),                                                              // 239: com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockContent
	(*PaddockInformation_PaddockInstances)(nil),                                                            // 240: com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockInstances
	(*PaddockInformation_PaddockContent_MountForPaddock)(nil),                                              // 241: com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockContent.MountForPaddock
	(*PaddockInformation_PaddockInstances_PaddockToSell)(nil),                                              // 242: com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockInstances.PaddockToSell
	(*PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation)(nil),                      // 243: com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockInstances.PaddockToSell.PaddockGuildInformation
}
var file_proto_game_common_proto_depIdxs = []int32{
	78,  // 0: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.disposition:type_name -> com.ankama.dofus.server.game.protocol.common.EntityDisposition
	158, // 1: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.actor_information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation
	17,  // 2: com.ankama.dofus.server.game.protocol.common.SpawnInformation.team:type_name -> com.ankama.dofus.server.game.protocol.common.Team
	52,  // 3: com.ankama.dofus.server.game.protocol.common.SpawnInformation.position:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation
	144, // 4: com.ankama.dofus.server.game.protocol.common.AllianceInformation.emblem:type_name -> com.ankama.dofus.server.game.protocol.common.SocialEmblem
	186, // 5: com.ankama.dofus.server.game.protocol.common.AllianceInformation.card_information:type_name -> com.ankama.dofus.server.game.protocol.common.AllianceInformation.AllianceCardInformation
	128, // 6: com.ankama.dofus.server.game.protocol.common.BreachBranch.bosses:type_name -> com.ankama.dofus.server.game.protocol.common.MonsterInGroupInformation
	128, // 7: com.ankama.dofus.server.game.protocol.common.BreachBranch.monsters:type_name -> com.ankama.dofus.server.game.protocol.common.MonsterInGroupInformation
	187, // 8: com.ankama.dofus.server.game.protocol.common.BreachBranch.extended_information:type_name -> com.ankama.dofus.server.game.protocol.common.BreachBranch.ExtendedBreachBranch
	34,  // 9: com.ankama.dofus.server.game.protocol.common.BreachReward.buy_locks:type_name -> com.ankama.dofus.server.game.protocol.common.BreachReward.BreachRewardLock
	58,  // 10: com.ankama.dofus.server.game.protocol.common.Challenge.targets:type_name -> com.ankama.dofus.server.game.protocol.common.ChallengeTarget
	35,  // 11: com.ankama.dofus.server.game.protocol.common.Challenge.state:type_name -> com.ankama.dofus.server.game.protocol.common.Challenge.ChallengeState
	188, // 12: com.ankama.dofus.server.game.protocol.common.Character.character_basic_information:type_name -> com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation
	60,  // 13: com.ankama.dofus.server.game.protocol.common.Character.character_remodeling_information:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterRemodelingInformation
	6,   // 14: com.ankama.dofus.server.game.protocol.common.CharacterRemodelingInformation.gender:type_name -> com.ankama.dofus.server.game.protocol.common.Gender
	197, // 15: com.ankama.dofus.server.game.protocol.common.CharacterRemodelingInformation.character_to_remodel_information:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterRemodelingInformation.CharacterToRemodelInformation
	76,  // 16: com.ankama.dofus.server.game.protocol.common.PartyEntity.look:type_name -> com.ankama.dofus.server.game.protocol.common.EntityLook
	198, // 17: com.ankama.dofus.server.game.protocol.common.PartyEntity.entity_member:type_name -> com.ankama.dofus.server.game.protocol.common.PartyEntity.EntityMember
	64,  // 18: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristic.value:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterCharacteristicValue
	65,  // 19: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristic.detailed:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterCharacteristicDetailed
	66,  // 20: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristic.usable:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterCharacteristicDetailedUsable
	6,   // 21: com.ankama.dofus.server.game.protocol.common.CharacterInformation.gender:type_name -> com.ankama.dofus.server.game.protocol.common.Gender
	68,  // 22: com.ankama.dofus.server.game.protocol.common.CharacterInformation.status:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterStatus
	37,  // 23: com.ankama.dofus.server.game.protocol.common.CharacterStatus.status:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterStatus.Status
	199, // 24: com.ankama.dofus.server.game.protocol.common.PlayerSearch.search_by_character_name:type_name -> com.ankama.dofus.server.game.protocol.common.PlayerSearch.SearchByCharacterName
	200, // 25: com.ankama.dofus.server.game.protocol.common.PlayerSearch.search_by_account:type_name -> com.ankama.dofus.server.game.protocol.common.PlayerSearch.SearchByAccount
	59,  // 26: com.ankama.dofus.server.game.protocol.common.AllianceMemberInformation.information:type_name -> com.ankama.dofus.server.game.protocol.common.Character
	67,  // 27: com.ankama.dofus.server.game.protocol.common.SocialApplicationInformation.player_information:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterInformation
	73,  // 28: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristics.alignment_information:type_name -> com.ankama.dofus.server.game.protocol.common.AlignmentInformation
	63,  // 29: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristics.characteristics:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterCharacteristic
	157, // 30: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristics.spell_modifiers:type_name -> com.ankama.dofus.server.game.protocol.common.SpellModifier
	5,   // 31: com.ankama.dofus.server.game.protocol.common.AlignmentInformation.alignment:type_name -> com.ankama.dofus.server.game.protocol.common.Alignment
	201, // 32: com.ankama.dofus.server.game.protocol.common.AlignmentInformation.extended_information:type_name -> com.ankama.dofus.server.game.protocol.common.AlignmentInformation.AlignmentExtendedInformation
	202, // 33: com.ankama.dofus.server.game.protocol.common.InteractiveElement.enabled_skills:type_name -> com.ankama.dofus.server.game.protocol.common.InteractiveElement.InteractiveElementSkill
	202, // 34: com.ankama.dofus.server.game.protocol.common.InteractiveElement.disabled_skills:type_name -> com.ankama.dofus.server.game.protocol.common.InteractiveElement.InteractiveElementSkill
	77,  // 35: com.ankama.dofus.server.game.protocol.common.EntityLook.sub_entities:type_name -> com.ankama.dofus.server.game.protocol.common.SubEntityInformation
	38,  // 36: com.ankama.dofus.server.game.protocol.common.SubEntityInformation.binding_point_category:type_name -> com.ankama.dofus.server.game.protocol.common.SubEntityInformation.BindingPointCategoryEnum
	76,  // 37: com.ankama.dofus.server.game.protocol.common.SubEntityInformation.sub_entity_look:type_name -> com.ankama.dofus.server.game.protocol.common.EntityLook
	20,  // 38: com.ankama.dofus.server.game.protocol.common.EntityDisposition.direction:type_name -> com.ankama.dofus.server.game.protocol.common.Direction
	17,  // 39: com.ankama.dofus.server.game.protocol.common.NamedPartyTeam.team:type_name -> com.ankama.dofus.server.game.protocol.common.Team
	39,  // 40: com.ankama.dofus.server.game.protocol.common.SocialFightInformation.fight_type:type_name -> com.ankama.dofus.server.game.protocol.common.SocialFightInformation.Type
	80,  // 41: com.ankama.dofus.server.game.protocol.common.SocialFight.social_fight_info:type_name -> com.ankama.dofus.server.game.protocol.common.SocialFightInformation
	59,  // 42: com.ankama.dofus.server.game.protocol.common.SocialFight.attackers:type_name -> com.ankama.dofus.server.game.protocol.common.Character
	59,  // 43: com.ankama.dofus.server.game.protocol.common.SocialFight.defenders:type_name -> com.ankama.dofus.server.game.protocol.common.Character
	82,  // 44: com.ankama.dofus.server.game.protocol.common.SocialFight.phase:type_name -> com.ankama.dofus.server.game.protocol.common.FightPhaseInfo
	40,  // 45: com.ankama.dofus.server.game.protocol.common.FightPhaseInfo.phase:type_name -> com.ankama.dofus.server.game.protocol.common.FightPhaseInfo.FightPhase
	6,   // 46: com.ankama.dofus.server.game.protocol.common.FighterLightInformation.gender:type_name -> com.ankama.dofus.server.game.protocol.common.Gender
	85,  // 47: com.ankama.dofus.server.game.protocol.common.FighterLightInformation.monster_information:type_name -> com.ankama.dofus.server.game.protocol.common.FighterMonsterLightInformation
	86,  // 48: com.ankama.dofus.server.game.protocol.common.FighterLightInformation.entity_information:type_name -> com.ankama.dofus.server.game.protocol.common.FighterEntityLightInformation
	87,  // 49: com.ankama.dofus.server.game.protocol.common.FighterLightInformation.tax_collector_information:type_name -> com.ankama.dofus.server.game.protocol.common.FighterTaxCollectorLightInformation
	88,  // 50: com.ankama.dofus.server.game.protocol.common.FighterLightInformation.named_information:type_name -> com.ankama.dofus.server.game.protocol.common.FighterNamedLightInformation
	12,  // 51: com.ankama.dofus.server.game.protocol.common.FightCommonInformation.type:type_name -> com.ankama.dofus.server.game.protocol.common.FightType
	90,  // 52: com.ankama.dofus.server.game.protocol.common.FightCommonInformation.teams_information:type_name -> com.ankama.dofus.server.game.protocol.common.FightTeamInformation
	83,  // 53: com.ankama.dofus.server.game.protocol.common.FightCommonInformation.teams_options:type_name -> com.ankama.dofus.server.game.protocol.common.FightOptionsInformation
	17,  // 54: com.ankama.dofus.server.game.protocol.common.FightTeamInformation.team:type_name -> com.ankama.dofus.server.game.protocol.common.Team
	5,   // 55: com.ankama.dofus.server.game.protocol.common.FightTeamInformation.side:type_name -> com.ankama.dofus.server.game.protocol.common.Alignment
	13,  // 56: com.ankama.dofus.server.game.protocol.common.FightTeamInformation.type:type_name -> com.ankama.dofus.server.game.protocol.common.TeamType
	93,  // 57: com.ankama.dofus.server.game.protocol.common.FightTeamInformation.team_members:type_name -> com.ankama.dofus.server.game.protocol.common.FightTeamMembersInformation
	92,  // 58: com.ankama.dofus.server.game.protocol.common.FightTeamInformation.light_information:type_name -> com.ankama.dofus.server.game.protocol.common.FightTeamLightInformation
	12,  // 59: com.ankama.dofus.server.game.protocol.common.FightExternalInformation.fight_type:type_name -> com.ankama.dofus.server.game.protocol.common.FightType
	203, // 60: com.ankama.dofus.server.game.protocol.common.FightExternalInformation.fight_teams_with_options:type_name -> com.ankama.dofus.server.game.protocol.common.FightExternalInformation.FightTeamsWithOptions
	94,  // 61: com.ankama.dofus.server.game.protocol.common.FightTeamMembersInformation.team_members:type_name -> com.ankama.dofus.server.game.protocol.common.FightTeamMemberInformation
	1,   // 62: com.ankama.dofus.server.game.protocol.common.FightTeamMembersInformation.alliance_relation:type_name -> com.ankama.dofus.server.game.protocol.common.AllianceRelation
	95,  // 63: com.ankama.dofus.server.game.protocol.common.FightTeamMemberInformation.character_member:type_name -> com.ankama.dofus.server.game.protocol.common.FightTeamMemberCharacter
	96,  // 64: com.ankama.dofus.server.game.protocol.common.FightTeamMemberInformation.entity_member:type_name -> com.ankama.dofus.server.game.protocol.common.FightTeamMemberEntity
	97,  // 65: com.ankama.dofus.server.game.protocol.common.FightTeamMemberInformation.monster_member:type_name -> com.ankama.dofus.server.game.protocol.common.FightTeamMemberMonster
	98,  // 66: com.ankama.dofus.server.game.protocol.common.FightTeamMemberInformation.tax_collector_member:type_name -> com.ankama.dofus.server.game.protocol.common.FightTeamMemberTaxCollector
	204, // 67: com.ankama.dofus.server.game.protocol.common.FightTeamMemberCharacter.alliance_info:type_name -> com.ankama.dofus.server.game.protocol.common.FightTeamMemberCharacter.BasicAllianceInformation
	101, // 68: com.ankama.dofus.server.game.protocol.common.FightRemovableEffectExtendedInformation.effect:type_name -> com.ankama.dofus.server.game.protocol.common.FightRemovableEffect
	41,  // 69: com.ankama.dofus.server.game.protocol.common.FightRemovableEffect.dissipation_state:type_name -> com.ankama.dofus.server.game.protocol.common.FightRemovableEffect.EffectDissipationState
	102, // 70: com.ankama.dofus.server.game.protocol.common.FightRemovableEffect.temporary_boost_effect:type_name -> com.ankama.dofus.server.game.protocol.common.FightTemporaryBoostEffect
	103, // 71: com.ankama.dofus.server.game.protocol.common.FightRemovableEffect.temporary_spell_immunity_effect:type_name -> com.ankama.dofus.server.game.protocol.common.FightTemporarySpellImmunityEffect
	104, // 72: com.ankama.dofus.server.game.protocol.common.FightRemovableEffect.triggered_effect:type_name -> com.ankama.dofus.server.game.protocol.common.FightTriggeredEffect
	205, // 73: com.ankama.dofus.server.game.protocol.common.FightTemporaryBoostEffect.details:type_name -> com.ankama.dofus.server.game.protocol.common.FightTemporaryBoostEffect.Details
	17,  // 74: com.ankama.dofus.server.game.protocol.common.FightMark.team:type_name -> com.ankama.dofus.server.game.protocol.common.Team
	42,  // 75: com.ankama.dofus.server.game.protocol.common.FightMark.mark_type:type_name -> com.ankama.dofus.server.game.protocol.common.FightMark.MarkType
	206, // 76: com.ankama.dofus.server.game.protocol.common.FightMark.cells:type_name -> com.ankama.dofus.server.game.protocol.common.FightMark.MarkedCell
	107, // 77: com.ankama.dofus.server.game.protocol.common.FightResumeSlaves.spell_cool_downs:type_name -> com.ankama.dofus.server.game.protocol.common.FightSpellCoolDown
	15,  // 78: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.outcome:type_name -> com.ankama.dofus.server.game.protocol.common.FightOutcome
	207, // 79: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.rewards:type_name -> com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FightLoot
	208, // 80: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.fighter_list_entry:type_name -> com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry
	79,  // 81: com.ankama.dofus.server.game.protocol.common.NamedPartyTeamWithOutcome.team:type_name -> com.ankama.dofus.server.game.protocol.common.NamedPartyTeam
	15,  // 82: com.ankama.dofus.server.game.protocol.common.NamedPartyTeamWithOutcome.outcome:type_name -> com.ankama.dofus.server.game.protocol.common.FightOutcome
	63,  // 83: com.ankama.dofus.server.game.protocol.common.FightCharacteristics.characteristics:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterCharacteristic
	16,  // 84: com.ankama.dofus.server.game.protocol.common.FightCharacteristics.invisibility_state:type_name -> com.ankama.dofus.server.game.protocol.common.FightInvisibilityState
	216, // 85: com.ankama.dofus.server.game.protocol.common.GuildInformation.social_information:type_name -> com.ankama.dofus.server.game.protocol.common.GuildInformation.GuildSocialInformation
	23,  // 86: com.ankama.dofus.server.game.protocol.common.GuildRecruitmentInformation.recruitment_type:type_name -> com.ankama.dofus.server.game.protocol.common.SocialRecruitmentType
	218, // 87: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.chest_activity:type_name -> com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.ChestActivity
	219, // 88: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.paddock_activity:type_name -> com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PaddockActivity
	220, // 89: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.player_flow_activity:type_name -> com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PlayerFlowActivity
	221, // 90: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.level_up_activity:type_name -> com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.LevelUpActivity
	222, // 91: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.Unlock_new_tab_activity:type_name -> com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.UnlockNewTabActivity
	223, // 92: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.rank_activity:type_name -> com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.RankActivity
	224, // 93: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.player_rank_update_activity:type_name -> com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PlayerRankUpdateActivity
	51,  // 94: com.ankama.dofus.server.game.protocol.common.HouseInstance.account_tag:type_name -> com.ankama.dofus.server.game.protocol.common.AccountTag
	112, // 95: com.ankama.dofus.server.game.protocol.common.HouseInstance.guild_information:type_name -> com.ankama.dofus.server.game.protocol.common.GuildInformation
	225, // 96: com.ankama.dofus.server.game.protocol.common.House.house_account:type_name -> com.ankama.dofus.server.game.protocol.common.House.HouseAccount
	226, // 97: com.ankama.dofus.server.game.protocol.common.House.house_on_map:type_name -> com.ankama.dofus.server.game.protocol.common.House.HouseOnMap
	227, // 98: com.ankama.dofus.server.game.protocol.common.House.house_inside:type_name -> com.ankama.dofus.server.game.protocol.common.House.HouseInside
	228, // 99: com.ankama.dofus.server.game.protocol.common.House.house_guild:type_name -> com.ankama.dofus.server.game.protocol.common.House.HouseGuild
	118, // 100: com.ankama.dofus.server.game.protocol.common.Shortcut.shortcut_object_item:type_name -> com.ankama.dofus.server.game.protocol.common.ShortcutObjectItem
	124, // 101: com.ankama.dofus.server.game.protocol.common.Shortcut.shortcut_preset:type_name -> com.ankama.dofus.server.game.protocol.common.ShortcutPreset
	119, // 102: com.ankama.dofus.server.game.protocol.common.Shortcut.shortcut_spell:type_name -> com.ankama.dofus.server.game.protocol.common.ShortcutSpell
	120, // 103: com.ankama.dofus.server.game.protocol.common.Shortcut.shortcut_smiley:type_name -> com.ankama.dofus.server.game.protocol.common.ShortcutSmiley
	121, // 104: com.ankama.dofus.server.game.protocol.common.Shortcut.shortcut_emote:type_name -> com.ankama.dofus.server.game.protocol.common.ShortcutEmote
	122, // 105: com.ankama.dofus.server.game.protocol.common.Shortcut.shortcut_cosmetic_object:type_name -> com.ankama.dofus.server.game.protocol.common.ShortcutCosmeticObject
	123, // 106: com.ankama.dofus.server.game.protocol.common.Shortcut.shortcut_outfit:type_name -> com.ankama.dofus.server.game.protocol.common.ShortcutOutfit
	19,  // 107: com.ankama.dofus.server.game.protocol.common.ShortcutPreset.type:type_name -> com.ankama.dofus.server.game.protocol.common.PresetType
	128, // 108: com.ankama.dofus.server.game.protocol.common.MonsterGroupStaticInformation.main_creature:type_name -> com.ankama.dofus.server.game.protocol.common.MonsterInGroupInformation
	128, // 109: com.ankama.dofus.server.game.protocol.common.MonsterGroupStaticInformation.underlings:type_name -> com.ankama.dofus.server.game.protocol.common.MonsterInGroupInformation
	129, // 110: com.ankama.dofus.server.game.protocol.common.MonsterGroupStaticInformation.alternatives:type_name -> com.ankama.dofus.server.game.protocol.common.MonstersInGroupAlternativeInformation
	76,  // 111: com.ankama.dofus.server.game.protocol.common.MonsterInGroupInformation.look:type_name -> com.ankama.dofus.server.game.protocol.common.EntityLook
	128, // 112: com.ankama.dofus.server.game.protocol.common.MonstersInGroupAlternativeInformation.monsters:type_name -> com.ankama.dofus.server.game.protocol.common.MonsterInGroupInformation
	135, // 113: com.ankama.dofus.server.game.protocol.common.ItemMinimalInformation.effects:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectEffect
	229, // 114: com.ankama.dofus.server.game.protocol.common.ItemMinimalInformation.item_to_sell_in_npc_shop:type_name -> com.ankama.dofus.server.game.protocol.common.ItemMinimalInformation.ItemToSellInNpcShop
	230, // 115: com.ankama.dofus.server.game.protocol.common.ObjectGidWithQuantity.price_date_effect:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectGidWithQuantity.ObjectPriceDateEffect
	134, // 116: com.ankama.dofus.server.game.protocol.common.ObjectItemInventory.item:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectItem
	135, // 117: com.ankama.dofus.server.game.protocol.common.ObjectItem.effects:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectEffect
	231, // 118: com.ankama.dofus.server.game.protocol.common.ObjectEffect.min_max:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectEffect.ObjectEffectMinMaxValue
	232, // 119: com.ankama.dofus.server.game.protocol.common.ObjectEffect.dice:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectEffect.ObjectEffectDiceValue
	233, // 120: com.ankama.dofus.server.game.protocol.common.ObjectEffect.monster_count:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectEffect.MonsterCount
	234, // 121: com.ankama.dofus.server.game.protocol.common.ObjectEffect.mount:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectEffect.ObjectEffectMountValue
	235, // 122: com.ankama.dofus.server.game.protocol.common.ObjectInRolePlay.with_look:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectInRolePlay.WithLook
	236, // 123: com.ankama.dofus.server.game.protocol.common.ObjectInRolePlay.paddock_item:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectInRolePlay.PaddockItem
	130, // 124: com.ankama.dofus.server.game.protocol.common.GameActionItem.items:type_name -> com.ankama.dofus.server.game.protocol.common.ItemMinimalInformation
	48,  // 125: com.ankama.dofus.server.game.protocol.common.PrismInformation.state:type_name -> com.ankama.dofus.server.game.protocol.common.PrismInformation.PrismState
	54,  // 126: com.ankama.dofus.server.game.protocol.common.PrismInformation.alliance_information:type_name -> com.ankama.dofus.server.game.protocol.common.AllianceInformation
	141, // 127: com.ankama.dofus.server.game.protocol.common.PrismInformation.module:type_name -> com.ankama.dofus.server.game.protocol.common.PrismModule
	142, // 128: com.ankama.dofus.server.game.protocol.common.PrismInformation.cristal:type_name -> com.ankama.dofus.server.game.protocol.common.PrismCristal
	125, // 129: com.ankama.dofus.server.game.protocol.common.PrismLocalizedInformation.map_coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapCoordinates
	139, // 130: com.ankama.dofus.server.game.protocol.common.PrismLocalizedInformation.prism:type_name -> com.ankama.dofus.server.game.protocol.common.PrismInformation
	133, // 131: com.ankama.dofus.server.game.protocol.common.PrismModule.module_object:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectItemInventory
	49,  // 132: com.ankama.dofus.server.game.protocol.common.PrismModule.type:type_name -> com.ankama.dofus.server.game.protocol.common.PrismModule.PrismModuleType
	133, // 133: com.ankama.dofus.server.game.protocol.common.PrismCristal.cristal_object:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectItemInventory
	50,  // 134: com.ankama.dofus.server.game.protocol.common.PrismCristal.type:type_name -> com.ankama.dofus.server.game.protocol.common.PrismCristal.PrismCristalType
	23,  // 135: com.ankama.dofus.server.game.protocol.common.AllianceRecruitmentInformation.recruitment_type:type_name -> com.ankama.dofus.server.game.protocol.common.SocialRecruitmentType
	237, // 136: com.ankama.dofus.server.game.protocol.common.RankInformation.order_and_gfx:type_name -> com.ankama.dofus.server.game.protocol.common.RankInformation.OrderAndGfx
	238, // 137: com.ankama.dofus.server.game.protocol.common.RankInformation.private_information:type_name -> com.ankama.dofus.server.game.protocol.common.RankInformation.PrivateInformation
	54,  // 138: com.ankama.dofus.server.game.protocol.common.TaxCollectorInformation.alliance:type_name -> com.ankama.dofus.server.game.protocol.common.AllianceInformation
	125, // 139: com.ankama.dofus.server.game.protocol.common.TaxCollectorInformation.coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapCoordinates
	29,  // 140: com.ankama.dofus.server.game.protocol.common.TaxCollectorInformation.state:type_name -> com.ankama.dofus.server.game.protocol.common.TaxCollectorState
	76,  // 141: com.ankama.dofus.server.game.protocol.common.TaxCollectorInformation.entity_look:type_name -> com.ankama.dofus.server.game.protocol.common.EntityLook
	149, // 142: com.ankama.dofus.server.game.protocol.common.TaxCollectorInformation.complementary_information:type_name -> com.ankama.dofus.server.game.protocol.common.TaxCollectorComplementaryInformation
	63,  // 143: com.ankama.dofus.server.game.protocol.common.TaxCollectorInformation.character_characteristics:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterCharacteristic
	133, // 144: com.ankama.dofus.server.game.protocol.common.TaxCollectorInformation.equipments:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectItemInventory
	152, // 145: com.ankama.dofus.server.game.protocol.common.TaxCollectorInformation.spells:type_name -> com.ankama.dofus.server.game.protocol.common.TaxCollectorOrderedSpell
	54,  // 146: com.ankama.dofus.server.game.protocol.common.TaxCollectorStaticInformation.alliance:type_name -> com.ankama.dofus.server.game.protocol.common.AllianceInformation
	150, // 147: com.ankama.dofus.server.game.protocol.common.TaxCollectorComplementaryInformation.loot_information:type_name -> com.ankama.dofus.server.game.protocol.common.TaxCollectorLootInformation
	151, // 148: com.ankama.dofus.server.game.protocol.common.TaxCollectorComplementaryInformation.waiting_for_help_information:type_name -> com.ankama.dofus.server.game.protocol.common.TaxCollectorWaitingForHelpInformation
	152, // 149: com.ankama.dofus.server.game.protocol.common.TaxCollectorPreset.spells:type_name -> com.ankama.dofus.server.game.protocol.common.TaxCollectorOrderedSpell
	63,  // 150: com.ankama.dofus.server.game.protocol.common.TaxCollectorPreset.characteristics:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterCharacteristic
	6,   // 151: com.ankama.dofus.server.game.protocol.common.MountData.gender:type_name -> com.ankama.dofus.server.game.protocol.common.Gender
	135, // 152: com.ankama.dofus.server.game.protocol.common.MountData.effects:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectEffect
	239, // 153: com.ankama.dofus.server.game.protocol.common.PaddockInformation.content:type_name -> com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockContent
	240, // 154: com.ankama.dofus.server.game.protocol.common.PaddockInformation.instances:type_name -> com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockInstances
	31,  // 155: com.ankama.dofus.server.game.protocol.common.SpellModifier.action_type:type_name -> com.ankama.dofus.server.game.protocol.common.SpellModifierActionType
	32,  // 156: com.ankama.dofus.server.game.protocol.common.SpellModifier.modifier_type:type_name -> com.ankama.dofus.server.game.protocol.common.SpellModifierType
	76,  // 157: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.look:type_name -> com.ankama.dofus.server.game.protocol.common.EntityLook
	159, // 158: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.role_play_actor:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor
	160, // 159: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.fighter:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation
	161, // 160: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.named_actor:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor
	162, // 161: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.tax_collector_actor:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.TaxCollectorActor
	163, // 162: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.monster_group_actor:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.MonsterGroupActor
	164, // 163: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.npc_actor:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NpcStaticInformation
	139, // 164: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.prism_actor:type_name -> com.ankama.dofus.server.game.protocol.common.PrismInformation
	138, // 165: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.portal_actor:type_name -> com.ankama.dofus.server.game.protocol.common.PortalInformation
	53,  // 166: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.spawn_information:type_name -> com.ankama.dofus.server.game.protocol.common.SpawnInformation
	111, // 167: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.stats:type_name -> com.ankama.dofus.server.game.protocol.common.FightCharacteristics
	179, // 168: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.named_fighter:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.NamedFighterInformation
	180, // 169: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.ai_fighter:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.AIFighterInformation
	181, // 170: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.entity_fighter:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.EntityFighterInformation
	165, // 171: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.humanoid_information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid
	166, // 172: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.mount_information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Mount
	148, // 173: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.TaxCollectorActor.identification:type_name -> com.ankama.dofus.server.game.protocol.common.TaxCollectorStaticInformation
	127, // 174: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.MonsterGroupActor.identification:type_name -> com.ankama.dofus.server.game.protocol.common.MonsterGroupStaticInformation
	5,   // 175: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.MonsterGroupActor.alignment:type_name -> com.ankama.dofus.server.game.protocol.common.Alignment
	177, // 176: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.MonsterGroupActor.wave_information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.MonsterGroupActor.WaveInformation
	6,   // 177: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NpcStaticInformation.gender:type_name -> com.ankama.dofus.server.game.protocol.common.Gender
	178, // 178: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NpcStaticInformation.quests:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NpcStaticInformation.Quests
	9,   // 179: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.restrictions:type_name -> com.ankama.dofus.server.game.protocol.common.Restriction
	6,   // 180: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.gender:type_name -> com.ankama.dofus.server.game.protocol.common.Gender
	167, // 181: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.options:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption
	73,  // 182: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.alignment_information:type_name -> com.ankama.dofus.server.game.protocol.common.AlignmentInformation
	168, // 183: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.mutant_information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.MutantInformation
	169, // 184: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.followers:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.FollowingCharactersOption
	112, // 185: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.guild_information:type_name -> com.ankama.dofus.server.game.protocol.common.GuildInformation
	170, // 186: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.alliance_information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.AllianceOption
	171, // 187: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.emote_option:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.EmoteOption
	172, // 188: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.title_option:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.TitleOption
	173, // 189: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.ornament_option:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.OrnamentOption
	174, // 190: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.object_use_option:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.ObjectUseOption
	175, // 191: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.skill_use_option:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.SkillUseOption
	176, // 192: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.FollowingCharactersOption.following_characters_looks:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.FollowingCharactersOption.IndexedEntityLook
	54,  // 193: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.AllianceOption.alliance_information:type_name -> com.ankama.dofus.server.game.protocol.common.AllianceInformation
	8,   // 194: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.AllianceOption.attackable_status:type_name -> com.ankama.dofus.server.game.protocol.common.AttackableStatus
	0,   // 195: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.ObjectUseOption.delayed_action_type:type_name -> com.ankama.dofus.server.game.protocol.common.DelayedActionType
	76,  // 196: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.NamedActor.Humanoid.HumanOption.FollowingCharactersOption.IndexedEntityLook.look:type_name -> com.ankama.dofus.server.game.protocol.common.EntityLook
	127, // 197: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.RolePlayActor.MonsterGroupActor.WaveInformation.alternatives:type_name -> com.ankama.dofus.server.game.protocol.common.MonsterGroupStaticInformation
	68,  // 198: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.NamedFighterInformation.status:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterStatus
	182, // 199: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.NamedFighterInformation.character_information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.NamedFighterInformation.FightCharacterInformation
	183, // 200: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.NamedFighterInformation.mutant_information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.NamedFighterInformation.FightMutantInformation
	184, // 201: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.AIFighterInformation.monster_fighter_information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.AIFighterInformation.MonsterFighter
	185, // 202: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.AIFighterInformation.tax_collector_information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.AIFighterInformation.TaxCollectorFighter
	73,  // 203: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.NamedFighterInformation.FightCharacterInformation.alignment_information:type_name -> com.ankama.dofus.server.game.protocol.common.AlignmentInformation
	6,   // 204: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.NamedFighterInformation.FightCharacterInformation.gender:type_name -> com.ankama.dofus.server.game.protocol.common.Gender
	73,  // 205: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation.ActorInformation.FightFighterInformation.AIFighterInformation.MonsterFighter.alignment_information:type_name -> com.ankama.dofus.server.game.protocol.common.AlignmentInformation
	143, // 206: com.ankama.dofus.server.game.protocol.common.AllianceInformation.AllianceCardInformation.recruitment:type_name -> com.ankama.dofus.server.game.protocol.common.AllianceRecruitmentInformation
	56,  // 207: com.ankama.dofus.server.game.protocol.common.BreachBranch.ExtendedBreachBranch.rewards:type_name -> com.ankama.dofus.server.game.protocol.common.BreachReward
	190, // 208: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.character_look:type_name -> com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook
	146, // 209: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.rank:type_name -> com.ankama.dofus.server.game.protocol.common.RankInformation
	189, // 210: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.social_member:type_name -> com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember
	6,   // 211: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember.gender:type_name -> com.ankama.dofus.server.game.protocol.common.Gender
	4,   // 212: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember.state:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterState
	68,  // 213: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember.status:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterStatus
	191, // 214: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember.guild_member:type_name -> com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember.GuildMember
	76,  // 215: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.look:type_name -> com.ankama.dofus.server.game.protocol.common.EntityLook
	112, // 216: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.guild_information:type_name -> com.ankama.dofus.server.game.protocol.common.GuildInformation
	54,  // 217: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.alliance_information:type_name -> com.ankama.dofus.server.game.protocol.common.AllianceInformation
	193, // 218: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.base_information:type_name -> com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation
	5,   // 219: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember.GuildMember.alignment:type_name -> com.ankama.dofus.server.game.protocol.common.Alignment
	192, // 220: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember.GuildMember.note:type_name -> com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.SocialMember.GuildMember.PlayerNote
	6,   // 221: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.gender:type_name -> com.ankama.dofus.server.game.protocol.common.Gender
	194, // 222: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.epic_information:type_name -> com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.CharacterEpicInformation
	195, // 223: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.party_member_information:type_name -> com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.PartyMemberInformation
	196, // 224: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.party_invitation_member_information:type_name -> com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.PartyInvitationMemberInformation
	36,  // 225: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.CharacterEpicInformation.death_state:type_name -> com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.CharacterEpicInformation.EpicDeathState
	62,  // 226: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.PartyMemberInformation.commons_information:type_name -> com.ankama.dofus.server.game.protocol.common.PartyUpdateCommonsInformation
	5,   // 227: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.PartyMemberInformation.alignment:type_name -> com.ankama.dofus.server.game.protocol.common.Alignment
	126, // 228: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.PartyMemberInformation.coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapExtendedCoordinates
	68,  // 229: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.PartyMemberInformation.status:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterStatus
	61,  // 230: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.PartyMemberInformation.entities:type_name -> com.ankama.dofus.server.game.protocol.common.PartyEntity
	126, // 231: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.PartyInvitationMemberInformation.coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapExtendedCoordinates
	61,  // 232: com.ankama.dofus.server.game.protocol.common.Character.CharacterBasicInformation.CharacterLook.CharacterBaseInformation.PartyInvitationMemberInformation.entities:type_name -> com.ankama.dofus.server.game.protocol.common.PartyEntity
	62,  // 233: com.ankama.dofus.server.game.protocol.common.PartyEntity.EntityMember.commons_information:type_name -> com.ankama.dofus.server.game.protocol.common.PartyUpdateCommonsInformation
	8,   // 234: com.ankama.dofus.server.game.protocol.common.AlignmentInformation.AlignmentExtendedInformation.attackable:type_name -> com.ankama.dofus.server.game.protocol.common.AttackableStatus
	90,  // 235: com.ankama.dofus.server.game.protocol.common.FightExternalInformation.FightTeamsWithOptions.fight_team:type_name -> com.ankama.dofus.server.game.protocol.common.FightTeamInformation
	83,  // 236: com.ankama.dofus.server.game.protocol.common.FightExternalInformation.FightTeamsWithOptions.fight_team_options:type_name -> com.ankama.dofus.server.game.protocol.common.FightOptionsInformation
	43,  // 237: com.ankama.dofus.server.game.protocol.common.FightMark.MarkedCell.cells_type:type_name -> com.ankama.dofus.server.game.protocol.common.FightMark.MarkedCell.MarkCellsType
	209, // 238: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FightLoot.objects:type_name -> com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FightLoot.Object
	210, // 239: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.player_list_entry:type_name -> com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.PlayerListEntry
	211, // 240: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.mutant_list_entry:type_name -> com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.MutantListEntry
	212, // 241: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.tax_collector_list_entry:type_name -> com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.TaxCollectorListEntry
	213, // 242: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.PlayerListEntry.additional:type_name -> com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.PlayerListEntry.FightResultAdditionalData
	54,  // 243: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.TaxCollectorListEntry.alliance_information:type_name -> com.ankama.dofus.server.game.protocol.common.AllianceInformation
	214, // 244: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.PlayerListEntry.FightResultAdditionalData.experience_data:type_name -> com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.PlayerListEntry.FightResultAdditionalData.ExperienceData
	215, // 245: com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.PlayerListEntry.FightResultAdditionalData.pvp_data:type_name -> com.ankama.dofus.server.game.protocol.common.FightResultListEntry.FighterListEntry.PlayerListEntry.FightResultAdditionalData.PvpData
	144, // 246: com.ankama.dofus.server.game.protocol.common.GuildInformation.GuildSocialInformation.emblem:type_name -> com.ankama.dofus.server.game.protocol.common.SocialEmblem
	217, // 247: com.ankama.dofus.server.game.protocol.common.GuildInformation.GuildSocialInformation.detailed_information:type_name -> com.ankama.dofus.server.game.protocol.common.GuildInformation.GuildSocialInformation.GuildDetailedInformation
	113, // 248: com.ankama.dofus.server.game.protocol.common.GuildInformation.GuildSocialInformation.GuildDetailedInformation.recruitment:type_name -> com.ankama.dofus.server.game.protocol.common.GuildRecruitmentInformation
	44,  // 249: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.ChestActivity.event_type:type_name -> com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.ChestActivity.ChestEventType
	134, // 250: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.ChestActivity.object:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectItem
	126, // 251: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PaddockActivity.paddock_coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapExtendedCoordinates
	45,  // 252: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PaddockActivity.paddock_commercial_event_type:type_name -> com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PaddockActivity.PaddockCommercialEventType
	46,  // 253: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PlayerFlowActivity.player_flow_event_type:type_name -> com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PlayerFlowActivity.PlayerFlowEventType
	47,  // 254: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.RankActivity.rank_activity_type:type_name -> com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.RankActivity.RankActivityType
	146, // 255: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.RankActivity.rank_information:type_name -> com.ankama.dofus.server.game.protocol.common.RankInformation
	146, // 256: com.ankama.dofus.server.game.protocol.common.GuildLogbookEntry.PlayerRankUpdateActivity.rank_information:type_name -> com.ankama.dofus.server.game.protocol.common.RankInformation
	115, // 257: com.ankama.dofus.server.game.protocol.common.House.HouseAccount.house_information:type_name -> com.ankama.dofus.server.game.protocol.common.HouseInstance
	126, // 258: com.ankama.dofus.server.game.protocol.common.House.HouseAccount.coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapExtendedCoordinates
	115, // 259: com.ankama.dofus.server.game.protocol.common.House.HouseOnMap.houses_information:type_name -> com.ankama.dofus.server.game.protocol.common.HouseInstance
	115, // 260: com.ankama.dofus.server.game.protocol.common.House.HouseInside.house_information:type_name -> com.ankama.dofus.server.game.protocol.common.HouseInstance
	125, // 261: com.ankama.dofus.server.game.protocol.common.House.HouseInside.coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapCoordinates
	115, // 262: com.ankama.dofus.server.game.protocol.common.House.HouseGuild.house_information:type_name -> com.ankama.dofus.server.game.protocol.common.HouseInstance
	126, // 263: com.ankama.dofus.server.game.protocol.common.House.HouseGuild.coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapExtendedCoordinates
	135, // 264: com.ankama.dofus.server.game.protocol.common.ObjectGidWithQuantity.ObjectPriceDateEffect.effects:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectEffect
	6,   // 265: com.ankama.dofus.server.game.protocol.common.ObjectEffect.ObjectEffectMountValue.mount_gender:type_name -> com.ankama.dofus.server.game.protocol.common.Gender
	135, // 266: com.ankama.dofus.server.game.protocol.common.ObjectEffect.ObjectEffectMountValue.effect:type_name -> com.ankama.dofus.server.game.protocol.common.ObjectEffect
	76,  // 267: com.ankama.dofus.server.game.protocol.common.ObjectInRolePlay.WithLook.look:type_name -> com.ankama.dofus.server.game.protocol.common.EntityLook
	20,  // 268: com.ankama.dofus.server.game.protocol.common.ObjectInRolePlay.WithLook.direction:type_name -> com.ankama.dofus.server.game.protocol.common.Direction
	126, // 269: com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockContent.coordinates:type_name -> com.ankama.dofus.server.game.protocol.common.MapExtendedCoordinates
	241, // 270: com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockContent.mounts_information:type_name -> com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockContent.MountForPaddock
	242, // 271: com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockInstances.paddocks_to_sell:type_name -> com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockInstances.PaddockToSell
	243, // 272: com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockInstances.PaddockToSell.guild_information:type_name -> com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockInstances.PaddockToSell.PaddockGuildInformation
	112, // 273: com.ankama.dofus.server.game.protocol.common.PaddockInformation.PaddockInstances.PaddockToSell.PaddockGuildInformation.guild_information:type_name -> com.ankama.dofus.server.game.protocol.common.GuildInformation
	274, // [274:274] is the sub-list for method output_type
	274, // [274:274] is the sub-list for method input_type
	274, // [274:274] is the sub-list for extension type_name
	274, // [274:274] is the sub-list for extension extendee
	0,   // [0:274] is the sub-list for field type_name
}

func init() { file_proto_game_common_proto_init() }
func file_proto_game_common_proto_init() {
	if File_proto_game_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_game_common_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AccountTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SpawnInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AllianceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BreachBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BreachReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CharacterRemodelingInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PartyEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PartyUpdateCommonsInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CharacterCharacteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CharacterCharacteristicValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CharacterCharacteristicDetailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CharacterCharacteristicDetailedUsable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CharacterInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CharacterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*AllianceMemberInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SocialApplicationInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CharacterCharacteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*AlignmentInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*InteractiveElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*StatedElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*EntityLook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SubEntityInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*EntityDisposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*NamedPartyTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*SocialFightInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*SocialFight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*FightPhaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*FightOptionsInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*FighterLightInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*FighterMonsterLightInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*FighterEntityLightInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*FighterTaxCollectorLightInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*FighterNamedLightInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*FightCommonInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*FightTeamInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*FightExternalInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*FightTeamLightInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*FightTeamMembersInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*FightTeamMemberInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*FightTeamMemberCharacter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*FightTeamMemberEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*FightTeamMemberMonster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*FightTeamMemberTaxCollector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*FightStartingPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*FightRemovableEffectExtendedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*FightRemovableEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*FightTemporaryBoostEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*FightTemporarySpellImmunityEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*FightTriggeredEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*FightMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*FightEffectTriggerCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*FightSpellCoolDown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*FightResumeSlaves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*FightResultListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*NamedPartyTeamWithOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*FightCharacteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*GuildInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*GuildRecruitmentInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*GuildLogbookEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*HouseInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*House); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*Shortcut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*ShortcutObjectItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*ShortcutSpell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*ShortcutSmiley); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*ShortcutEmote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*ShortcutCosmeticObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*ShortcutOutfit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*ShortcutPreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*MapCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*MapExtendedCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*MonsterGroupStaticInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*MonsterInGroupInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*MonstersInGroupAlternativeInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*ItemMinimalInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectGidWithQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectUidWithQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectItemInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectInRolePlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*GameActionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*PortalInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*PrismInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*PrismLocalizedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*PrismModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*PrismCristal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*AllianceRecruitmentInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*SocialEmblem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*SocialNoticeInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*RankInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*TaxCollectorInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*TaxCollectorStaticInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*TaxCollectorComplementaryInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*TaxCollectorLootInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*TaxCollectorWaitingForHelpInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*TaxCollectorOrderedSpell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*TaxCollectorPreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*MountData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*PaddockInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*SpellItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*SpellModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_FightFighterInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_MutantInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_FollowingCharactersOption_IndexedEntityLook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_WaveInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_RolePlayActor_NpcStaticInformation_Quests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighterInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightCharacterInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_FightMutantInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorFighter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*AllianceInformation_AllianceCardInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*BreachBranch_ExtendedBreachBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*Character_CharacterBasicInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*Character_CharacterBasicInformation_SocialMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*Character_CharacterBasicInformation_CharacterLook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*Character_CharacterBasicInformation_SocialMember_GuildMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*Character_CharacterBasicInformation_SocialMember_GuildMember_PlayerNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_CharacterEpicInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*CharacterRemodelingInformation_CharacterToRemodelInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*PartyEntity_EntityMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerSearch_SearchByCharacterName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[149].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerSearch_SearchByAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[150].Exporter = func(v any, i int) any {
			switch v := v.(*AlignmentInformation_AlignmentExtendedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[151].Exporter = func(v any, i int) any {
			switch v := v.(*InteractiveElement_InteractiveElementSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[152].Exporter = func(v any, i int) any {
			switch v := v.(*FightExternalInformation_FightTeamsWithOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[153].Exporter = func(v any, i int) any {
			switch v := v.(*FightTeamMemberCharacter_BasicAllianceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[154].Exporter = func(v any, i int) any {
			switch v := v.(*FightTemporaryBoostEffect_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[155].Exporter = func(v any, i int) any {
			switch v := v.(*FightMark_MarkedCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[156].Exporter = func(v any, i int) any {
			switch v := v.(*FightResultListEntry_FightLoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[157].Exporter = func(v any, i int) any {
			switch v := v.(*FightResultListEntry_FighterListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[158].Exporter = func(v any, i int) any {
			switch v := v.(*FightResultListEntry_FightLoot_Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[159].Exporter = func(v any, i int) any {
			switch v := v.(*FightResultListEntry_FighterListEntry_PlayerListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[160].Exporter = func(v any, i int) any {
			switch v := v.(*FightResultListEntry_FighterListEntry_MutantListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[161].Exporter = func(v any, i int) any {
			switch v := v.(*FightResultListEntry_FighterListEntry_TaxCollectorListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[162].Exporter = func(v any, i int) any {
			switch v := v.(*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[163].Exporter = func(v any, i int) any {
			switch v := v.(*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[164].Exporter = func(v any, i int) any {
			switch v := v.(*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[165].Exporter = func(v any, i int) any {
			switch v := v.(*GuildInformation_GuildSocialInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[166].Exporter = func(v any, i int) any {
			switch v := v.(*GuildInformation_GuildSocialInformation_GuildDetailedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[167].Exporter = func(v any, i int) any {
			switch v := v.(*GuildLogbookEntry_ChestActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[168].Exporter = func(v any, i int) any {
			switch v := v.(*GuildLogbookEntry_PaddockActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[169].Exporter = func(v any, i int) any {
			switch v := v.(*GuildLogbookEntry_PlayerFlowActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[170].Exporter = func(v any, i int) any {
			switch v := v.(*GuildLogbookEntry_LevelUpActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[171].Exporter = func(v any, i int) any {
			switch v := v.(*GuildLogbookEntry_UnlockNewTabActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[172].Exporter = func(v any, i int) any {
			switch v := v.(*GuildLogbookEntry_RankActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[173].Exporter = func(v any, i int) any {
			switch v := v.(*GuildLogbookEntry_PlayerRankUpdateActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[174].Exporter = func(v any, i int) any {
			switch v := v.(*House_HouseAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[175].Exporter = func(v any, i int) any {
			switch v := v.(*House_HouseOnMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[176].Exporter = func(v any, i int) any {
			switch v := v.(*House_HouseInside); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[177].Exporter = func(v any, i int) any {
			switch v := v.(*House_HouseGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[178].Exporter = func(v any, i int) any {
			switch v := v.(*ItemMinimalInformation_ItemToSellInNpcShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[179].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectGidWithQuantity_ObjectPriceDateEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[180].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectEffect_ObjectEffectMinMaxValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[181].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectEffect_ObjectEffectDiceValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[182].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectEffect_MonsterCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[183].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectEffect_ObjectEffectMountValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[184].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectInRolePlay_WithLook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[185].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectInRolePlay_PaddockItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[186].Exporter = func(v any, i int) any {
			switch v := v.(*RankInformation_OrderAndGfx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[187].Exporter = func(v any, i int) any {
			switch v := v.(*RankInformation_PrivateInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[188].Exporter = func(v any, i int) any {
			switch v := v.(*PaddockInformation_PaddockContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[189].Exporter = func(v any, i int) any {
			switch v := v.(*PaddockInformation_PaddockInstances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[190].Exporter = func(v any, i int) any {
			switch v := v.(*PaddockInformation_PaddockContent_MountForPaddock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[191].Exporter = func(v any, i int) any {
			switch v := v.(*PaddockInformation_PaddockInstances_PaddockToSell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_common_proto_msgTypes[192].Exporter = func(v any, i int) any {
			switch v := v.(*PaddockInformation_PaddockInstances_PaddockToSell_PaddockGuildInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_game_common_proto_msgTypes[1].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[3].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[4].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[8].OneofWrappers = []any{
		(*Character_CharacterBasicInformation_)(nil),
		(*Character_CharacterRemodelingInformation)(nil),
	}
	file_proto_game_common_proto_msgTypes[9].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[10].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[12].OneofWrappers = []any{
		(*CharacterCharacteristic_Value)(nil),
		(*CharacterCharacteristic_Detailed)(nil),
		(*CharacterCharacteristic_Usable)(nil),
	}
	file_proto_game_common_proto_msgTypes[17].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[18].OneofWrappers = []any{
		(*PlayerSearch_SearchByCharacterName_)(nil),
		(*PlayerSearch_SearchByAccount_)(nil),
	}
	file_proto_game_common_proto_msgTypes[22].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[23].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[27].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[33].OneofWrappers = []any{
		(*FighterLightInformation_MonsterInformation)(nil),
		(*FighterLightInformation_EntityInformation)(nil),
		(*FighterLightInformation_TaxCollectorInformation)(nil),
		(*FighterLightInformation_NamedInformation)(nil),
	}
	file_proto_game_common_proto_msgTypes[39].OneofWrappers = []any{
		(*FightTeamInformation_TeamMembers)(nil),
		(*FightTeamInformation_LightInformation)(nil),
	}
	file_proto_game_common_proto_msgTypes[42].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[43].OneofWrappers = []any{
		(*FightTeamMemberInformation_CharacterMember)(nil),
		(*FightTeamMemberInformation_EntityMember)(nil),
		(*FightTeamMemberInformation_MonsterMember)(nil),
		(*FightTeamMemberInformation_TaxCollectorMember)(nil),
	}
	file_proto_game_common_proto_msgTypes[44].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[50].OneofWrappers = []any{
		(*FightRemovableEffect_TemporaryBoostEffect)(nil),
		(*FightRemovableEffect_TemporarySpellImmunityEffect)(nil),
		(*FightRemovableEffect_TriggeredEffect)(nil),
	}
	file_proto_game_common_proto_msgTypes[51].OneofWrappers = []any{
		(*FightTemporaryBoostEffect_BoostedSpellId)(nil),
		(*FightTemporaryBoostEffect_WeaponTypeId)(nil),
		(*FightTemporaryBoostEffect_StateId)(nil),
		(*FightTemporaryBoostEffect_Details_)(nil),
	}
	file_proto_game_common_proto_msgTypes[58].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[61].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[63].OneofWrappers = []any{
		(*GuildLogbookEntry_ChestActivity_)(nil),
		(*GuildLogbookEntry_PaddockActivity_)(nil),
		(*GuildLogbookEntry_PlayerFlowActivity_)(nil),
		(*GuildLogbookEntry_LevelUpActivity_)(nil),
		(*GuildLogbookEntry_UnlockNewTabActivity_)(nil),
		(*GuildLogbookEntry_RankActivity_)(nil),
		(*GuildLogbookEntry_PlayerRankUpdateActivity_)(nil),
	}
	file_proto_game_common_proto_msgTypes[64].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[65].OneofWrappers = []any{
		(*House_HouseAccount_)(nil),
		(*House_HouseOnMap_)(nil),
		(*House_HouseInside_)(nil),
		(*House_HouseGuild_)(nil),
	}
	file_proto_game_common_proto_msgTypes[66].OneofWrappers = []any{
		(*Shortcut_ShortcutObjectItem)(nil),
		(*Shortcut_ShortcutPreset)(nil),
		(*Shortcut_ShortcutSpell)(nil),
		(*Shortcut_ShortcutSmiley)(nil),
		(*Shortcut_ShortcutEmote)(nil),
		(*Shortcut_ShortcutCosmeticObject)(nil),
		(*Shortcut_ShortcutOutfit)(nil),
	}
	file_proto_game_common_proto_msgTypes[71].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[77].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[79].OneofWrappers = []any{
		(*ItemMinimalInformation_Quantity)(nil),
		(*ItemMinimalInformation_ItemToSellInNpcShop_)(nil),
	}
	file_proto_game_common_proto_msgTypes[80].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[84].OneofWrappers = []any{
		(*ObjectEffect_ValueString)(nil),
		(*ObjectEffect_ValueInt)(nil),
		(*ObjectEffect_MinMax)(nil),
		(*ObjectEffect_Dice)(nil),
		(*ObjectEffect_Date)(nil),
		(*ObjectEffect_DurationMinute)(nil),
		(*ObjectEffect_CreatureFamily)(nil),
		(*ObjectEffect_MonsterCount_)(nil),
		(*ObjectEffect_Mount)(nil),
	}
	file_proto_game_common_proto_msgTypes[85].OneofWrappers = []any{
		(*ObjectInRolePlay_WithLook_)(nil),
		(*ObjectInRolePlay_PaddockItem_)(nil),
	}
	file_proto_game_common_proto_msgTypes[88].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[95].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[98].OneofWrappers = []any{
		(*TaxCollectorComplementaryInformation_LootInformation)(nil),
		(*TaxCollectorComplementaryInformation_WaitingForHelpInformation)(nil),
	}
	file_proto_game_common_proto_msgTypes[103].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[104].OneofWrappers = []any{
		(*PaddockInformation_Content)(nil),
		(*PaddockInformation_Instances)(nil),
	}
	file_proto_game_common_proto_msgTypes[105].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[107].OneofWrappers = []any{
		(*ActorPositionInformation_ActorInformation_RolePlayActor_)(nil),
		(*ActorPositionInformation_ActorInformation_Fighter)(nil),
	}
	file_proto_game_common_proto_msgTypes[108].OneofWrappers = []any{
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_TaxCollectorActor_)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_MonsterGroupActor_)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NpcActor)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_PrismActor)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_PortalActor)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_TreasureHuntNpcId)(nil),
	}
	file_proto_game_common_proto_msgTypes[109].OneofWrappers = []any{
		(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighter)(nil),
		(*ActorPositionInformation_ActorInformation_FightFighterInformation_AiFighter)(nil),
		(*ActorPositionInformation_ActorInformation_FightFighterInformation_EntityFighter)(nil),
	}
	file_proto_game_common_proto_msgTypes[110].OneofWrappers = []any{
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_HumanoidInformation)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_MountInformation)(nil),
	}
	file_proto_game_common_proto_msgTypes[112].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[113].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[114].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[116].OneofWrappers = []any{
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_Followers)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_GuildInformation)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_AllianceInformation)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_EmoteOption_)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_TitleOption_)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_OrnamentOption_)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_ObjectUseOption_)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SkillUseOption_)(nil),
		(*ActorPositionInformation_ActorInformation_RolePlayActor_NamedActor_Humanoid_HumanOption_SpeedMultiplier)(nil),
	}
	file_proto_game_common_proto_msgTypes[121].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[122].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[126].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[128].OneofWrappers = []any{
		(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_CharacterInformation)(nil),
		(*ActorPositionInformation_ActorInformation_FightFighterInformation_NamedFighterInformation_MutantInformation)(nil),
	}
	file_proto_game_common_proto_msgTypes[129].OneofWrappers = []any{
		(*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_MonsterFighterInformation)(nil),
		(*ActorPositionInformation_ActorInformation_FightFighterInformation_AIFighterInformation_TaxCollectorInformation)(nil),
	}
	file_proto_game_common_proto_msgTypes[133].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[136].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[137].OneofWrappers = []any{
		(*Character_CharacterBasicInformation_CharacterLook_)(nil),
		(*Character_CharacterBasicInformation_Rank)(nil),
		(*Character_CharacterBasicInformation_SocialMember_)(nil),
	}
	file_proto_game_common_proto_msgTypes[138].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[139].OneofWrappers = []any{
		(*Character_CharacterBasicInformation_CharacterLook_GuildInformation)(nil),
		(*Character_CharacterBasicInformation_CharacterLook_AllianceInformation)(nil),
		(*Character_CharacterBasicInformation_CharacterLook_Grade)(nil),
		(*Character_CharacterBasicInformation_CharacterLook_BaseInformation)(nil),
	}
	file_proto_game_common_proto_msgTypes[142].OneofWrappers = []any{
		(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_EpicInformation)(nil),
		(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyMemberInformation_)(nil),
		(*Character_CharacterBasicInformation_CharacterLook_CharacterBaseInformation_PartyInvitationMemberInformation_)(nil),
	}
	file_proto_game_common_proto_msgTypes[144].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[151].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[157].OneofWrappers = []any{
		(*FightResultListEntry_FighterListEntry_PlayerListEntry_)(nil),
		(*FightResultListEntry_FighterListEntry_MutantListEntry_)(nil),
		(*FightResultListEntry_FighterListEntry_TaxCollectorListEntry_)(nil),
	}
	file_proto_game_common_proto_msgTypes[162].OneofWrappers = []any{
		(*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_ExperienceData_)(nil),
		(*FightResultListEntry_FighterListEntry_PlayerListEntry_FightResultAdditionalData_PvpData_)(nil),
	}
	file_proto_game_common_proto_msgTypes[165].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[166].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[184].OneofWrappers = []any{}
	file_proto_game_common_proto_msgTypes[191].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_game_common_proto_rawDesc,
			NumEnums:      51,
			NumMessages:   193,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_game_common_proto_goTypes,
		DependencyIndexes: file_proto_game_common_proto_depIdxs,
		EnumInfos:         file_proto_game_common_proto_enumTypes,
		MessageInfos:      file_proto_game_common_proto_msgTypes,
	}.Build()
	File_proto_game_common_proto = out.File
	file_proto_game_common_proto_rawDesc = nil
	file_proto_game_common_proto_goTypes = nil
	file_proto_game_common_proto_depIdxs = nil
}
