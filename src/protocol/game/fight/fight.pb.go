// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: proto/game/fight.proto

package fight

import (
	common "go-xp-dofus-unity-proto-builder/src/protocol/game/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FightChallengeJoinRefuseEvent_FighterRefusedReason int32

const (
	FightChallengeJoinRefuseEvent_FIGHTER_REFUSED                FightChallengeJoinRefuseEvent_FighterRefusedReason = 0
	FightChallengeJoinRefuseEvent_FIGHTER_ACCEPTED               FightChallengeJoinRefuseEvent_FighterRefusedReason = 1
	FightChallengeJoinRefuseEvent_CHALLENGE_FULL                 FightChallengeJoinRefuseEvent_FighterRefusedReason = 2
	FightChallengeJoinRefuseEvent_TEAM_FULL                      FightChallengeJoinRefuseEvent_FighterRefusedReason = 3
	FightChallengeJoinRefuseEvent_WRONG_ALIGNMENT                FightChallengeJoinRefuseEvent_FighterRefusedReason = 4
	FightChallengeJoinRefuseEvent_WRONG_GUILD                    FightChallengeJoinRefuseEvent_FighterRefusedReason = 5
	FightChallengeJoinRefuseEvent_TOO_LATE                       FightChallengeJoinRefuseEvent_FighterRefusedReason = 6
	FightChallengeJoinRefuseEvent_MUTANT_REFUSED                 FightChallengeJoinRefuseEvent_FighterRefusedReason = 7
	FightChallengeJoinRefuseEvent_WRONG_MAP                      FightChallengeJoinRefuseEvent_FighterRefusedReason = 8
	FightChallengeJoinRefuseEvent_JUST_RESPAWNED                 FightChallengeJoinRefuseEvent_FighterRefusedReason = 9
	FightChallengeJoinRefuseEvent_IM_OCCUPIED                    FightChallengeJoinRefuseEvent_FighterRefusedReason = 10
	FightChallengeJoinRefuseEvent_OPPONENT_OCCUPIED              FightChallengeJoinRefuseEvent_FighterRefusedReason = 11
	FightChallengeJoinRefuseEvent_FIGHT_MYSELF                   FightChallengeJoinRefuseEvent_FighterRefusedReason = 12
	FightChallengeJoinRefuseEvent_INSUFFICIENT_RIGHTS            FightChallengeJoinRefuseEvent_FighterRefusedReason = 13
	FightChallengeJoinRefuseEvent_MEMBER_ACCOUNT_NEEDED          FightChallengeJoinRefuseEvent_FighterRefusedReason = 14
	FightChallengeJoinRefuseEvent_OPPONENT_NOT_MEMBER            FightChallengeJoinRefuseEvent_FighterRefusedReason = 15
	FightChallengeJoinRefuseEvent_TEAM_LIMITED_BY_MAIN_CHARACTER FightChallengeJoinRefuseEvent_FighterRefusedReason = 16
	FightChallengeJoinRefuseEvent_MULTI_ACCOUNT_NOT_ALLOWED      FightChallengeJoinRefuseEvent_FighterRefusedReason = 17
	FightChallengeJoinRefuseEvent_GHOST_REFUSED                  FightChallengeJoinRefuseEvent_FighterRefusedReason = 18
	FightChallengeJoinRefuseEvent_WRONG_ALLIANCE                 FightChallengeJoinRefuseEvent_FighterRefusedReason = 19
	FightChallengeJoinRefuseEvent_AVA_ZONE                       FightChallengeJoinRefuseEvent_FighterRefusedReason = 20
	FightChallengeJoinRefuseEvent_ENTITY_REFUSED                 FightChallengeJoinRefuseEvent_FighterRefusedReason = 21
	FightChallengeJoinRefuseEvent_NOT_ENOUGH_ROOM                FightChallengeJoinRefuseEvent_FighterRefusedReason = 22
	FightChallengeJoinRefuseEvent_GUEST_ACCOUNT                  FightChallengeJoinRefuseEvent_FighterRefusedReason = 23
)

// Enum value maps for FightChallengeJoinRefuseEvent_FighterRefusedReason.
var (
	FightChallengeJoinRefuseEvent_FighterRefusedReason_name = map[int32]string{
		0:  "FIGHTER_REFUSED",
		1:  "FIGHTER_ACCEPTED",
		2:  "CHALLENGE_FULL",
		3:  "TEAM_FULL",
		4:  "WRONG_ALIGNMENT",
		5:  "WRONG_GUILD",
		6:  "TOO_LATE",
		7:  "MUTANT_REFUSED",
		8:  "WRONG_MAP",
		9:  "JUST_RESPAWNED",
		10: "IM_OCCUPIED",
		11: "OPPONENT_OCCUPIED",
		12: "FIGHT_MYSELF",
		13: "INSUFFICIENT_RIGHTS",
		14: "MEMBER_ACCOUNT_NEEDED",
		15: "OPPONENT_NOT_MEMBER",
		16: "TEAM_LIMITED_BY_MAIN_CHARACTER",
		17: "MULTI_ACCOUNT_NOT_ALLOWED",
		18: "GHOST_REFUSED",
		19: "WRONG_ALLIANCE",
		20: "AVA_ZONE",
		21: "ENTITY_REFUSED",
		22: "NOT_ENOUGH_ROOM",
		23: "GUEST_ACCOUNT",
	}
	FightChallengeJoinRefuseEvent_FighterRefusedReason_value = map[string]int32{
		"FIGHTER_REFUSED":                0,
		"FIGHTER_ACCEPTED":               1,
		"CHALLENGE_FULL":                 2,
		"TEAM_FULL":                      3,
		"WRONG_ALIGNMENT":                4,
		"WRONG_GUILD":                    5,
		"TOO_LATE":                       6,
		"MUTANT_REFUSED":                 7,
		"WRONG_MAP":                      8,
		"JUST_RESPAWNED":                 9,
		"IM_OCCUPIED":                    10,
		"OPPONENT_OCCUPIED":              11,
		"FIGHT_MYSELF":                   12,
		"INSUFFICIENT_RIGHTS":            13,
		"MEMBER_ACCOUNT_NEEDED":          14,
		"OPPONENT_NOT_MEMBER":            15,
		"TEAM_LIMITED_BY_MAIN_CHARACTER": 16,
		"MULTI_ACCOUNT_NOT_ALLOWED":      17,
		"GHOST_REFUSED":                  18,
		"WRONG_ALLIANCE":                 19,
		"AVA_ZONE":                       20,
		"ENTITY_REFUSED":                 21,
		"NOT_ENOUGH_ROOM":                22,
		"GUEST_ACCOUNT":                  23,
	}
)

func (x FightChallengeJoinRefuseEvent_FighterRefusedReason) Enum() *FightChallengeJoinRefuseEvent_FighterRefusedReason {
	p := new(FightChallengeJoinRefuseEvent_FighterRefusedReason)
	*p = x
	return p
}

func (x FightChallengeJoinRefuseEvent_FighterRefusedReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FightChallengeJoinRefuseEvent_FighterRefusedReason) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_fight_proto_enumTypes[0].Descriptor()
}

func (FightChallengeJoinRefuseEvent_FighterRefusedReason) Type() protoreflect.EnumType {
	return &file_proto_game_fight_proto_enumTypes[0]
}

func (x FightChallengeJoinRefuseEvent_FighterRefusedReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FightChallengeJoinRefuseEvent_FighterRefusedReason.Descriptor instead.
func (FightChallengeJoinRefuseEvent_FighterRefusedReason) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{19, 0}
}

type FightTurnReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady bool `protobuf:"varint,1,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
}

func (x *FightTurnReadyRequest) Reset() {
	*x = FightTurnReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTurnReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTurnReadyRequest) ProtoMessage() {}

func (x *FightTurnReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTurnReadyRequest.ProtoReflect.Descriptor instead.
func (*FightTurnReadyRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{0}
}

func (x *FightTurnReadyRequest) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type FightTurnFinishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAfk bool `protobuf:"varint,1,opt,name=is_afk,json=isAfk,proto3" json:"is_afk,omitempty"`
}

func (x *FightTurnFinishRequest) Reset() {
	*x = FightTurnFinishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTurnFinishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTurnFinishRequest) ProtoMessage() {}

func (x *FightTurnFinishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTurnFinishRequest.ProtoReflect.Descriptor instead.
func (*FightTurnFinishRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{1}
}

func (x *FightTurnFinishRequest) GetIsAfk() bool {
	if x != nil {
		return x.IsAfk
	}
	return false
}

type FightJoinRunningEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Effects         []*common.FightRemovableEffectExtendedInformation `protobuf:"bytes,1,rep,name=effects,proto3" json:"effects,omitempty"`
	Marks           []*common.FightMark                               `protobuf:"bytes,2,rep,name=marks,proto3" json:"marks,omitempty"`
	GameTurn        int32                                             `protobuf:"varint,3,opt,name=game_turn,json=gameTurn,proto3" json:"game_turn,omitempty"`
	FightStart      int32                                             `protobuf:"varint,4,opt,name=fight_start,json=fightStart,proto3" json:"fight_start,omitempty"`
	FxTriggerCounts []*common.FightEffectTriggerCount                 `protobuf:"bytes,5,rep,name=fx_trigger_counts,json=fxTriggerCounts,proto3" json:"fx_trigger_counts,omitempty"`
	Resume          *FightResume                                      `protobuf:"bytes,6,opt,name=resume,proto3,oneof" json:"resume,omitempty"`
}

func (x *FightJoinRunningEvent) Reset() {
	*x = FightJoinRunningEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightJoinRunningEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightJoinRunningEvent) ProtoMessage() {}

func (x *FightJoinRunningEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightJoinRunningEvent.ProtoReflect.Descriptor instead.
func (*FightJoinRunningEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{2}
}

func (x *FightJoinRunningEvent) GetEffects() []*common.FightRemovableEffectExtendedInformation {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *FightJoinRunningEvent) GetMarks() []*common.FightMark {
	if x != nil {
		return x.Marks
	}
	return nil
}

func (x *FightJoinRunningEvent) GetGameTurn() int32 {
	if x != nil {
		return x.GameTurn
	}
	return 0
}

func (x *FightJoinRunningEvent) GetFightStart() int32 {
	if x != nil {
		return x.FightStart
	}
	return 0
}

func (x *FightJoinRunningEvent) GetFxTriggerCounts() []*common.FightEffectTriggerCount {
	if x != nil {
		return x.FxTriggerCounts
	}
	return nil
}

func (x *FightJoinRunningEvent) GetResume() *FightResume {
	if x != nil {
		return x.Resume
	}
	return nil
}

type FightEndEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration                int32                               `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	RewardRate              int32                               `protobuf:"varint,2,opt,name=reward_rate,json=rewardRate,proto3" json:"reward_rate,omitempty"`
	LootShareLimitMalus     int32                               `protobuf:"varint,3,opt,name=loot_share_limit_malus,json=lootShareLimitMalus,proto3" json:"loot_share_limit_malus,omitempty"`
	Results                 []*common.FightResultListEntry      `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
	NamedPartyTeamsOutcomes []*common.NamedPartyTeamWithOutcome `protobuf:"bytes,5,rep,name=named_party_teams_outcomes,json=namedPartyTeamsOutcomes,proto3" json:"named_party_teams_outcomes,omitempty"`
	Budget                  *int32                              `protobuf:"varint,6,opt,name=budget,proto3,oneof" json:"budget,omitempty"`
}

func (x *FightEndEvent) Reset() {
	*x = FightEndEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightEndEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightEndEvent) ProtoMessage() {}

func (x *FightEndEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightEndEvent.ProtoReflect.Descriptor instead.
func (*FightEndEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{3}
}

func (x *FightEndEvent) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *FightEndEvent) GetRewardRate() int32 {
	if x != nil {
		return x.RewardRate
	}
	return 0
}

func (x *FightEndEvent) GetLootShareLimitMalus() int32 {
	if x != nil {
		return x.LootShareLimitMalus
	}
	return 0
}

func (x *FightEndEvent) GetResults() []*common.FightResultListEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *FightEndEvent) GetNamedPartyTeamsOutcomes() []*common.NamedPartyTeamWithOutcome {
	if x != nil {
		return x.NamedPartyTeamsOutcomes
	}
	return nil
}

func (x *FightEndEvent) GetBudget() int32 {
	if x != nil && x.Budget != nil {
		return *x.Budget
	}
	return 0
}

type FightStatisticsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DamageDone    int32 `protobuf:"varint,1,opt,name=damage_done,json=damageDone,proto3" json:"damage_done,omitempty"`
	DamageTaken   int32 `protobuf:"varint,2,opt,name=damage_taken,json=damageTaken,proto3" json:"damage_taken,omitempty"`
	BlockedDamage int32 `protobuf:"varint,3,opt,name=blocked_damage,json=blockedDamage,proto3" json:"blocked_damage,omitempty"`
	AppliedShield int32 `protobuf:"varint,4,opt,name=applied_shield,json=appliedShield,proto3" json:"applied_shield,omitempty"`
	HealDone      int32 `protobuf:"varint,5,opt,name=heal_done,json=healDone,proto3" json:"heal_done,omitempty"`
	HealTaken     int32 `protobuf:"varint,6,opt,name=heal_taken,json=healTaken,proto3" json:"heal_taken,omitempty"`
	KillCount     int32 `protobuf:"varint,7,opt,name=kill_count,json=killCount,proto3" json:"kill_count,omitempty"`
}

func (x *FightStatisticsEvent) Reset() {
	*x = FightStatisticsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightStatisticsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightStatisticsEvent) ProtoMessage() {}

func (x *FightStatisticsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightStatisticsEvent.ProtoReflect.Descriptor instead.
func (*FightStatisticsEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{4}
}

func (x *FightStatisticsEvent) GetDamageDone() int32 {
	if x != nil {
		return x.DamageDone
	}
	return 0
}

func (x *FightStatisticsEvent) GetDamageTaken() int32 {
	if x != nil {
		return x.DamageTaken
	}
	return 0
}

func (x *FightStatisticsEvent) GetBlockedDamage() int32 {
	if x != nil {
		return x.BlockedDamage
	}
	return 0
}

func (x *FightStatisticsEvent) GetAppliedShield() int32 {
	if x != nil {
		return x.AppliedShield
	}
	return 0
}

func (x *FightStatisticsEvent) GetHealDone() int32 {
	if x != nil {
		return x.HealDone
	}
	return 0
}

func (x *FightStatisticsEvent) GetHealTaken() int32 {
	if x != nil {
		return x.HealTaken
	}
	return 0
}

func (x *FightStatisticsEvent) GetKillCount() int32 {
	if x != nil {
		return x.KillCount
	}
	return 0
}

type FightNewRoundEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber int32 `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
}

func (x *FightNewRoundEvent) Reset() {
	*x = FightNewRoundEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightNewRoundEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightNewRoundEvent) ProtoMessage() {}

func (x *FightNewRoundEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightNewRoundEvent.ProtoReflect.Descriptor instead.
func (*FightNewRoundEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{5}
}

func (x *FightNewRoundEvent) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

type FightTurnListEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids   []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Slain []int64 `protobuf:"varint,2,rep,packed,name=slain,proto3" json:"slain,omitempty"`
}

func (x *FightTurnListEvent) Reset() {
	*x = FightTurnListEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTurnListEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTurnListEvent) ProtoMessage() {}

func (x *FightTurnListEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTurnListEvent.ProtoReflect.Descriptor instead.
func (*FightTurnListEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{6}
}

func (x *FightTurnListEvent) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FightTurnListEvent) GetSlain() []int64 {
	if x != nil {
		return x.Slain
	}
	return nil
}

type FightTurnEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId   int64  `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	WaitTime      int32  `protobuf:"varint,2,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	RemainingTime *int32 `protobuf:"varint,3,opt,name=remaining_time,json=remainingTime,proto3,oneof" json:"remaining_time,omitempty"`
}

func (x *FightTurnEvent) Reset() {
	*x = FightTurnEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTurnEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTurnEvent) ProtoMessage() {}

func (x *FightTurnEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTurnEvent.ProtoReflect.Descriptor instead.
func (*FightTurnEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{7}
}

func (x *FightTurnEvent) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *FightTurnEvent) GetWaitTime() int32 {
	if x != nil {
		return x.WaitTime
	}
	return 0
}

func (x *FightTurnEvent) GetRemainingTime() int32 {
	if x != nil && x.RemainingTime != nil {
		return *x.RemainingTime
	}
	return 0
}

type FightNewWaveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaveId                 int32       `protobuf:"varint,1,opt,name=wave_id,json=waveId,proto3" json:"wave_id,omitempty"`
	Team                   common.Team `protobuf:"varint,2,opt,name=team,proto3,enum=com.ankama.dofus.server.game.protocol.common.Team" json:"team,omitempty"`
	TurnLeftBeforeNextWave int32       `protobuf:"varint,3,opt,name=turn_left_before_next_wave,json=turnLeftBeforeNextWave,proto3" json:"turn_left_before_next_wave,omitempty"`
}

func (x *FightNewWaveEvent) Reset() {
	*x = FightNewWaveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightNewWaveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightNewWaveEvent) ProtoMessage() {}

func (x *FightNewWaveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightNewWaveEvent.ProtoReflect.Descriptor instead.
func (*FightNewWaveEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{8}
}

func (x *FightNewWaveEvent) GetWaveId() int32 {
	if x != nil {
		return x.WaveId
	}
	return 0
}

func (x *FightNewWaveEvent) GetTeam() common.Team {
	if x != nil {
		return x.Team
	}
	return common.Team(0)
}

func (x *FightNewWaveEvent) GetTurnLeftBeforeNextWave() int32 {
	if x != nil {
		return x.TurnLeftBeforeNextWave
	}
	return 0
}

type FightTurnStartPlayingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FightTurnStartPlayingEvent) Reset() {
	*x = FightTurnStartPlayingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTurnStartPlayingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTurnStartPlayingEvent) ProtoMessage() {}

func (x *FightTurnStartPlayingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTurnStartPlayingEvent.ProtoReflect.Descriptor instead.
func (*FightTurnStartPlayingEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{9}
}

type FightPauseEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPaused bool `protobuf:"varint,1,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
}

func (x *FightPauseEvent) Reset() {
	*x = FightPauseEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPauseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPauseEvent) ProtoMessage() {}

func (x *FightPauseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPauseEvent.ProtoReflect.Descriptor instead.
func (*FightPauseEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{10}
}

func (x *FightPauseEvent) GetIsPaused() bool {
	if x != nil {
		return x.IsPaused
	}
	return false
}

type FightSlaveSwitchContextEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterId    int64                            `protobuf:"varint,1,opt,name=master_id,json=masterId,proto3" json:"master_id,omitempty"`
	SlaveId     int64                            `protobuf:"varint,2,opt,name=slave_id,json=slaveId,proto3" json:"slave_id,omitempty"`
	SlaveTurn   int32                            `protobuf:"varint,3,opt,name=slave_turn,json=slaveTurn,proto3" json:"slave_turn,omitempty"`
	SlaveSpells []*common.SpellItem              `protobuf:"bytes,4,rep,name=slave_spells,json=slaveSpells,proto3" json:"slave_spells,omitempty"`
	SlaveStats  *common.CharacterCharacteristics `protobuf:"bytes,5,opt,name=slave_stats,json=slaveStats,proto3" json:"slave_stats,omitempty"`
	Shortcuts   []*common.Shortcut               `protobuf:"bytes,6,rep,name=shortcuts,proto3" json:"shortcuts,omitempty"`
}

func (x *FightSlaveSwitchContextEvent) Reset() {
	*x = FightSlaveSwitchContextEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightSlaveSwitchContextEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightSlaveSwitchContextEvent) ProtoMessage() {}

func (x *FightSlaveSwitchContextEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightSlaveSwitchContextEvent.ProtoReflect.Descriptor instead.
func (*FightSlaveSwitchContextEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{11}
}

func (x *FightSlaveSwitchContextEvent) GetMasterId() int64 {
	if x != nil {
		return x.MasterId
	}
	return 0
}

func (x *FightSlaveSwitchContextEvent) GetSlaveId() int64 {
	if x != nil {
		return x.SlaveId
	}
	return 0
}

func (x *FightSlaveSwitchContextEvent) GetSlaveTurn() int32 {
	if x != nil {
		return x.SlaveTurn
	}
	return 0
}

func (x *FightSlaveSwitchContextEvent) GetSlaveSpells() []*common.SpellItem {
	if x != nil {
		return x.SlaveSpells
	}
	return nil
}

func (x *FightSlaveSwitchContextEvent) GetSlaveStats() *common.CharacterCharacteristics {
	if x != nil {
		return x.SlaveStats
	}
	return nil
}

func (x *FightSlaveSwitchContextEvent) GetShortcuts() []*common.Shortcut {
	if x != nil {
		return x.Shortcuts
	}
	return nil
}

type FightSlaveNoLongerControlledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterId int64 `protobuf:"varint,1,opt,name=master_id,json=masterId,proto3" json:"master_id,omitempty"`
	SlaveId  int64 `protobuf:"varint,2,opt,name=slave_id,json=slaveId,proto3" json:"slave_id,omitempty"`
}

func (x *FightSlaveNoLongerControlledEvent) Reset() {
	*x = FightSlaveNoLongerControlledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightSlaveNoLongerControlledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightSlaveNoLongerControlledEvent) ProtoMessage() {}

func (x *FightSlaveNoLongerControlledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightSlaveNoLongerControlledEvent.ProtoReflect.Descriptor instead.
func (*FightSlaveNoLongerControlledEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{12}
}

func (x *FightSlaveNoLongerControlledEvent) GetMasterId() int64 {
	if x != nil {
		return x.MasterId
	}
	return 0
}

func (x *FightSlaveNoLongerControlledEvent) GetSlaveId() int64 {
	if x != nil {
		return x.SlaveId
	}
	return 0
}

type FightRefreshCharacterStatsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FighterId int64                        `protobuf:"varint,1,opt,name=fighter_id,json=fighterId,proto3" json:"fighter_id,omitempty"`
	Stats     *common.FightCharacteristics `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *FightRefreshCharacterStatsEvent) Reset() {
	*x = FightRefreshCharacterStatsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightRefreshCharacterStatsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightRefreshCharacterStatsEvent) ProtoMessage() {}

func (x *FightRefreshCharacterStatsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightRefreshCharacterStatsEvent.ProtoReflect.Descriptor instead.
func (*FightRefreshCharacterStatsEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{13}
}

func (x *FightRefreshCharacterStatsEvent) GetFighterId() int64 {
	if x != nil {
		return x.FighterId
	}
	return 0
}

func (x *FightRefreshCharacterStatsEvent) GetStats() *common.FightCharacteristics {
	if x != nil {
		return x.Stats
	}
	return nil
}

type FightIsTurnReadyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId int64 `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
}

func (x *FightIsTurnReadyEvent) Reset() {
	*x = FightIsTurnReadyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightIsTurnReadyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightIsTurnReadyEvent) ProtoMessage() {}

func (x *FightIsTurnReadyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightIsTurnReadyEvent.ProtoReflect.Descriptor instead.
func (*FightIsTurnReadyEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{14}
}

func (x *FightIsTurnReadyEvent) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

type FightSynchronizeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fighters []*common.ActorPositionInformation `protobuf:"bytes,1,rep,name=fighters,proto3" json:"fighters,omitempty"`
}

func (x *FightSynchronizeEvent) Reset() {
	*x = FightSynchronizeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightSynchronizeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightSynchronizeEvent) ProtoMessage() {}

func (x *FightSynchronizeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightSynchronizeEvent.ProtoReflect.Descriptor instead.
func (*FightSynchronizeEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{15}
}

func (x *FightSynchronizeEvent) GetFighters() []*common.ActorPositionInformation {
	if x != nil {
		return x.Fighters
	}
	return nil
}

type FightTurnEndEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId int64 `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
}

func (x *FightTurnEndEvent) Reset() {
	*x = FightTurnEndEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTurnEndEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTurnEndEvent) ProtoMessage() {}

func (x *FightTurnEndEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTurnEndEvent.ProtoReflect.Descriptor instead.
func (*FightTurnEndEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{16}
}

func (x *FightTurnEndEvent) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

type FightFighterShowEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Information *common.ActorPositionInformation `protobuf:"bytes,1,opt,name=information,proto3" json:"information,omitempty"`
	StaticPose  bool                             `protobuf:"varint,2,opt,name=static_pose,json=staticPose,proto3" json:"static_pose,omitempty"`
}

func (x *FightFighterShowEvent) Reset() {
	*x = FightFighterShowEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightFighterShowEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightFighterShowEvent) ProtoMessage() {}

func (x *FightFighterShowEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightFighterShowEvent.ProtoReflect.Descriptor instead.
func (*FightFighterShowEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{17}
}

func (x *FightFighterShowEvent) GetInformation() *common.ActorPositionInformation {
	if x != nil {
		return x.Information
	}
	return nil
}

func (x *FightFighterShowEvent) GetStaticPose() bool {
	if x != nil {
		return x.StaticPose
	}
	return false
}

type FightFighterRefreshEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Information *common.ActorPositionInformation `protobuf:"bytes,1,opt,name=information,proto3" json:"information,omitempty"`
}

func (x *FightFighterRefreshEvent) Reset() {
	*x = FightFighterRefreshEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightFighterRefreshEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightFighterRefreshEvent) ProtoMessage() {}

func (x *FightFighterRefreshEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightFighterRefreshEvent.ProtoReflect.Descriptor instead.
func (*FightFighterRefreshEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{18}
}

func (x *FightFighterRefreshEvent) GetInformation() *common.ActorPositionInformation {
	if x != nil {
		return x.Information
	}
	return nil
}

type FightChallengeJoinRefuseEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId int64                                              `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Reason   FightChallengeJoinRefuseEvent_FighterRefusedReason `protobuf:"varint,2,opt,name=reason,proto3,enum=com.ankama.dofus.server.game.protocol.fight.FightChallengeJoinRefuseEvent_FighterRefusedReason" json:"reason,omitempty"`
}

func (x *FightChallengeJoinRefuseEvent) Reset() {
	*x = FightChallengeJoinRefuseEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightChallengeJoinRefuseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightChallengeJoinRefuseEvent) ProtoMessage() {}

func (x *FightChallengeJoinRefuseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightChallengeJoinRefuseEvent.ProtoReflect.Descriptor instead.
func (*FightChallengeJoinRefuseEvent) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{19}
}

func (x *FightChallengeJoinRefuseEvent) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *FightChallengeJoinRefuseEvent) GetReason() FightChallengeJoinRefuseEvent_FighterRefusedReason {
	if x != nil {
		return x.Reason
	}
	return FightChallengeJoinRefuseEvent_FIGHTER_REFUSED
}

type FightResume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpellsCoolDown    []*common.FightSpellCoolDown `protobuf:"bytes,1,rep,name=spells_cool_down,json=spellsCoolDown,proto3" json:"spells_cool_down,omitempty"`
	SummonCount       int32                        `protobuf:"varint,2,opt,name=summon_count,json=summonCount,proto3" json:"summon_count,omitempty"`
	BombCount         int32                        `protobuf:"varint,3,opt,name=bomb_count,json=bombCount,proto3" json:"bomb_count,omitempty"`
	SlavesInformation []*common.FightResumeSlaves  `protobuf:"bytes,4,rep,name=slaves_information,json=slavesInformation,proto3" json:"slaves_information,omitempty"`
}

func (x *FightResume) Reset() {
	*x = FightResume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResume) ProtoMessage() {}

func (x *FightResume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResume.ProtoReflect.Descriptor instead.
func (*FightResume) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{20}
}

func (x *FightResume) GetSpellsCoolDown() []*common.FightSpellCoolDown {
	if x != nil {
		return x.SpellsCoolDown
	}
	return nil
}

func (x *FightResume) GetSummonCount() int32 {
	if x != nil {
		return x.SummonCount
	}
	return 0
}

func (x *FightResume) GetBombCount() int32 {
	if x != nil {
		return x.BombCount
	}
	return 0
}

func (x *FightResume) GetSlavesInformation() []*common.FightResumeSlaves {
	if x != nil {
		return x.SlavesInformation
	}
	return nil
}

type FightMapInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId               int64                          `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	FightMapId          int64                          `protobuf:"varint,2,opt,name=fight_map_id,json=fightMapId,proto3" json:"fight_map_id,omitempty"`
	FightStartPositions *common.FightStartingPositions `protobuf:"bytes,3,opt,name=fight_start_positions,json=fightStartPositions,proto3" json:"fight_start_positions,omitempty"`
}

func (x *FightMapInformationResponse) Reset() {
	*x = FightMapInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_game_fight_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightMapInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightMapInformationResponse) ProtoMessage() {}

func (x *FightMapInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_fight_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightMapInformationResponse.ProtoReflect.Descriptor instead.
func (*FightMapInformationResponse) Descriptor() ([]byte, []int) {
	return file_proto_game_fight_proto_rawDescGZIP(), []int{21}
}

func (x *FightMapInformationResponse) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *FightMapInformationResponse) GetFightMapId() int64 {
	if x != nil {
		return x.FightMapId
	}
	return 0
}

func (x *FightMapInformationResponse) GetFightStartPositions() *common.FightStartingPositions {
	if x != nil {
		return x.FightStartPositions
	}
	return nil
}

var File_proto_game_fight_proto protoreflect.FileDescriptor

var file_proto_game_fight_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x15, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x75, 0x72, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x2f, 0x0a, 0x16, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x66, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x66, 0x6b, 0x22, 0xea, 0x03, 0x0a, 0x15, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x05, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x71, 0x0a, 0x11, 0x66, 0x78, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0f, 0x66, 0x78, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x0d, 0x46, 0x69, 0x67, 0x68, 0x74, 0x45,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6c, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6c, 0x6f, 0x6f, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x6c, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x1a, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x17, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x12,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x12, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x75,
	0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6c,
	0x61, 0x69, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x75, 0x72,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4e,
	0x65, 0x77, 0x57, 0x61, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x77,
	0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61,
	0x76, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x1a,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x65, 0x66, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x57, 0x61, 0x76, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x0f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x22, 0x90, 0x03, 0x0a, 0x1c, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x6c, 0x61, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x5a,
	0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x73,
	0x6c, 0x61, 0x76, 0x65, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x67, 0x0a, 0x0b, 0x73, 0x6c,
	0x61, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x21, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x1f, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x15, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x73, 0x54, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x7b, 0x0a, 0x15, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x08, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x22, 0x36, 0x0a, 0x11,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x45, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x68,
	0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xc2, 0x05, 0x0a, 0x1d, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x77, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x5f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x66, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x8a, 0x04, 0x0a, 0x14, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46,
	0x55, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x47, 0x48, 0x54, 0x45,
	0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x54,
	0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x55, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x52, 0x4f, 0x4e, 0x47,
	0x5f, 0x4d, 0x41, 0x50, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d,
	0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x49, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x50, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x49, 0x45, 0x44,
	0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x59, 0x53, 0x45,
	0x4c, 0x46, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53, 0x10, 0x0d, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45,
	0x44, 0x5f, 0x42, 0x59, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43,
	0x54, 0x45, 0x52, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x52, 0x4f, 0x4e, 0x47,
	0x5f, 0x41, 0x4c, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x56, 0x41, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x15, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x17, 0x22, 0xab, 0x02, 0x0a, 0x0b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x5f,
	0x63, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77,
	0x6e, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73,
	0x52, 0x11, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x15,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x64, 0x6f, 0x66, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x13, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x6f, 0x2d, 0x78, 0x70, 0x2d,
	0x64, 0x6f, 0x66, 0x75, 0x73, 0x2d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_game_fight_proto_rawDescOnce sync.Once
	file_proto_game_fight_proto_rawDescData = file_proto_game_fight_proto_rawDesc
)

func file_proto_game_fight_proto_rawDescGZIP() []byte {
	file_proto_game_fight_proto_rawDescOnce.Do(func() {
		file_proto_game_fight_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_game_fight_proto_rawDescData)
	})
	return file_proto_game_fight_proto_rawDescData
}

var file_proto_game_fight_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_game_fight_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_game_fight_proto_goTypes = []any{
	(FightChallengeJoinRefuseEvent_FighterRefusedReason)(0), // 0: com.ankama.dofus.server.game.protocol.fight.FightChallengeJoinRefuseEvent.FighterRefusedReason
	(*FightTurnReadyRequest)(nil),                           // 1: com.ankama.dofus.server.game.protocol.fight.FightTurnReadyRequest
	(*FightTurnFinishRequest)(nil),                          // 2: com.ankama.dofus.server.game.protocol.fight.FightTurnFinishRequest
	(*FightJoinRunningEvent)(nil),                           // 3: com.ankama.dofus.server.game.protocol.fight.FightJoinRunningEvent
	(*FightEndEvent)(nil),                                   // 4: com.ankama.dofus.server.game.protocol.fight.FightEndEvent
	(*FightStatisticsEvent)(nil),                            // 5: com.ankama.dofus.server.game.protocol.fight.FightStatisticsEvent
	(*FightNewRoundEvent)(nil),                              // 6: com.ankama.dofus.server.game.protocol.fight.FightNewRoundEvent
	(*FightTurnListEvent)(nil),                              // 7: com.ankama.dofus.server.game.protocol.fight.FightTurnListEvent
	(*FightTurnEvent)(nil),                                  // 8: com.ankama.dofus.server.game.protocol.fight.FightTurnEvent
	(*FightNewWaveEvent)(nil),                               // 9: com.ankama.dofus.server.game.protocol.fight.FightNewWaveEvent
	(*FightTurnStartPlayingEvent)(nil),                      // 10: com.ankama.dofus.server.game.protocol.fight.FightTurnStartPlayingEvent
	(*FightPauseEvent)(nil),                                 // 11: com.ankama.dofus.server.game.protocol.fight.FightPauseEvent
	(*FightSlaveSwitchContextEvent)(nil),                    // 12: com.ankama.dofus.server.game.protocol.fight.FightSlaveSwitchContextEvent
	(*FightSlaveNoLongerControlledEvent)(nil),               // 13: com.ankama.dofus.server.game.protocol.fight.FightSlaveNoLongerControlledEvent
	(*FightRefreshCharacterStatsEvent)(nil),                 // 14: com.ankama.dofus.server.game.protocol.fight.FightRefreshCharacterStatsEvent
	(*FightIsTurnReadyEvent)(nil),                           // 15: com.ankama.dofus.server.game.protocol.fight.FightIsTurnReadyEvent
	(*FightSynchronizeEvent)(nil),                           // 16: com.ankama.dofus.server.game.protocol.fight.FightSynchronizeEvent
	(*FightTurnEndEvent)(nil),                               // 17: com.ankama.dofus.server.game.protocol.fight.FightTurnEndEvent
	(*FightFighterShowEvent)(nil),                           // 18: com.ankama.dofus.server.game.protocol.fight.FightFighterShowEvent
	(*FightFighterRefreshEvent)(nil),                        // 19: com.ankama.dofus.server.game.protocol.fight.FightFighterRefreshEvent
	(*FightChallengeJoinRefuseEvent)(nil),                   // 20: com.ankama.dofus.server.game.protocol.fight.FightChallengeJoinRefuseEvent
	(*FightResume)(nil),                                     // 21: com.ankama.dofus.server.game.protocol.fight.FightResume
	(*FightMapInformationResponse)(nil),                     // 22: com.ankama.dofus.server.game.protocol.fight.FightMapInformationResponse
	(*common.FightRemovableEffectExtendedInformation)(nil),  // 23: com.ankama.dofus.server.game.protocol.common.FightRemovableEffectExtendedInformation
	(*common.FightMark)(nil),                                // 24: com.ankama.dofus.server.game.protocol.common.FightMark
	(*common.FightEffectTriggerCount)(nil),                  // 25: com.ankama.dofus.server.game.protocol.common.FightEffectTriggerCount
	(*common.FightResultListEntry)(nil),                     // 26: com.ankama.dofus.server.game.protocol.common.FightResultListEntry
	(*common.NamedPartyTeamWithOutcome)(nil),                // 27: com.ankama.dofus.server.game.protocol.common.NamedPartyTeamWithOutcome
	(common.Team)(0),                                        // 28: com.ankama.dofus.server.game.protocol.common.Team
	(*common.SpellItem)(nil),                                // 29: com.ankama.dofus.server.game.protocol.common.SpellItem
	(*common.CharacterCharacteristics)(nil),                 // 30: com.ankama.dofus.server.game.protocol.common.CharacterCharacteristics
	(*common.Shortcut)(nil),                                 // 31: com.ankama.dofus.server.game.protocol.common.Shortcut
	(*common.FightCharacteristics)(nil),                     // 32: com.ankama.dofus.server.game.protocol.common.FightCharacteristics
	(*common.ActorPositionInformation)(nil),                 // 33: com.ankama.dofus.server.game.protocol.common.ActorPositionInformation
	(*common.FightSpellCoolDown)(nil),                       // 34: com.ankama.dofus.server.game.protocol.common.FightSpellCoolDown
	(*common.FightResumeSlaves)(nil),                        // 35: com.ankama.dofus.server.game.protocol.common.FightResumeSlaves
	(*common.FightStartingPositions)(nil),                   // 36: com.ankama.dofus.server.game.protocol.common.FightStartingPositions
}
var file_proto_game_fight_proto_depIdxs = []int32{
	23, // 0: com.ankama.dofus.server.game.protocol.fight.FightJoinRunningEvent.effects:type_name -> com.ankama.dofus.server.game.protocol.common.FightRemovableEffectExtendedInformation
	24, // 1: com.ankama.dofus.server.game.protocol.fight.FightJoinRunningEvent.marks:type_name -> com.ankama.dofus.server.game.protocol.common.FightMark
	25, // 2: com.ankama.dofus.server.game.protocol.fight.FightJoinRunningEvent.fx_trigger_counts:type_name -> com.ankama.dofus.server.game.protocol.common.FightEffectTriggerCount
	21, // 3: com.ankama.dofus.server.game.protocol.fight.FightJoinRunningEvent.resume:type_name -> com.ankama.dofus.server.game.protocol.fight.FightResume
	26, // 4: com.ankama.dofus.server.game.protocol.fight.FightEndEvent.results:type_name -> com.ankama.dofus.server.game.protocol.common.FightResultListEntry
	27, // 5: com.ankama.dofus.server.game.protocol.fight.FightEndEvent.named_party_teams_outcomes:type_name -> com.ankama.dofus.server.game.protocol.common.NamedPartyTeamWithOutcome
	28, // 6: com.ankama.dofus.server.game.protocol.fight.FightNewWaveEvent.team:type_name -> com.ankama.dofus.server.game.protocol.common.Team
	29, // 7: com.ankama.dofus.server.game.protocol.fight.FightSlaveSwitchContextEvent.slave_spells:type_name -> com.ankama.dofus.server.game.protocol.common.SpellItem
	30, // 8: com.ankama.dofus.server.game.protocol.fight.FightSlaveSwitchContextEvent.slave_stats:type_name -> com.ankama.dofus.server.game.protocol.common.CharacterCharacteristics
	31, // 9: com.ankama.dofus.server.game.protocol.fight.FightSlaveSwitchContextEvent.shortcuts:type_name -> com.ankama.dofus.server.game.protocol.common.Shortcut
	32, // 10: com.ankama.dofus.server.game.protocol.fight.FightRefreshCharacterStatsEvent.stats:type_name -> com.ankama.dofus.server.game.protocol.common.FightCharacteristics
	33, // 11: com.ankama.dofus.server.game.protocol.fight.FightSynchronizeEvent.fighters:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation
	33, // 12: com.ankama.dofus.server.game.protocol.fight.FightFighterShowEvent.information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation
	33, // 13: com.ankama.dofus.server.game.protocol.fight.FightFighterRefreshEvent.information:type_name -> com.ankama.dofus.server.game.protocol.common.ActorPositionInformation
	0,  // 14: com.ankama.dofus.server.game.protocol.fight.FightChallengeJoinRefuseEvent.reason:type_name -> com.ankama.dofus.server.game.protocol.fight.FightChallengeJoinRefuseEvent.FighterRefusedReason
	34, // 15: com.ankama.dofus.server.game.protocol.fight.FightResume.spells_cool_down:type_name -> com.ankama.dofus.server.game.protocol.common.FightSpellCoolDown
	35, // 16: com.ankama.dofus.server.game.protocol.fight.FightResume.slaves_information:type_name -> com.ankama.dofus.server.game.protocol.common.FightResumeSlaves
	36, // 17: com.ankama.dofus.server.game.protocol.fight.FightMapInformationResponse.fight_start_positions:type_name -> com.ankama.dofus.server.game.protocol.common.FightStartingPositions
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_game_fight_proto_init() }
func file_proto_game_fight_proto_init() {
	if File_proto_game_fight_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_game_fight_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FightTurnReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FightTurnFinishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FightJoinRunningEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*FightEndEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*FightStatisticsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*FightNewRoundEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FightTurnListEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FightTurnEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FightNewWaveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*FightTurnStartPlayingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*FightPauseEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FightSlaveSwitchContextEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FightSlaveNoLongerControlledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*FightRefreshCharacterStatsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*FightIsTurnReadyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*FightSynchronizeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*FightTurnEndEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*FightFighterShowEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*FightFighterRefreshEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*FightChallengeJoinRefuseEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*FightResume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_game_fight_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*FightMapInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_game_fight_proto_msgTypes[2].OneofWrappers = []any{}
	file_proto_game_fight_proto_msgTypes[3].OneofWrappers = []any{}
	file_proto_game_fight_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_game_fight_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_game_fight_proto_goTypes,
		DependencyIndexes: file_proto_game_fight_proto_depIdxs,
		EnumInfos:         file_proto_game_fight_proto_enumTypes,
		MessageInfos:      file_proto_game_fight_proto_msgTypes,
	}.Build()
	File_proto_game_fight_proto = out.File
	file_proto_game_fight_proto_rawDesc = nil
	file_proto_game_fight_proto_goTypes = nil
	file_proto_game_fight_proto_depIdxs = nil
}
